/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"tgui": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([0,"tgui-common"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./packages/tgui/index.js":
/*!********************************!*\
  !*** ./packages/tgui/index.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

__webpack_require__(/*! ./styles/main.scss */ "./packages/tgui/styles/main.scss");

__webpack_require__(/*! ./styles/themes/abductor.scss */ "./packages/tgui/styles/themes/abductor.scss");

__webpack_require__(/*! ./styles/themes/cardtable.scss */ "./packages/tgui/styles/themes/cardtable.scss");

__webpack_require__(/*! ./styles/themes/hackerman.scss */ "./packages/tgui/styles/themes/hackerman.scss");

__webpack_require__(/*! ./styles/themes/malfunction.scss */ "./packages/tgui/styles/themes/malfunction.scss");

__webpack_require__(/*! ./styles/themes/neutral.scss */ "./packages/tgui/styles/themes/neutral.scss");

__webpack_require__(/*! ./styles/themes/ntos.scss */ "./packages/tgui/styles/themes/ntos.scss");

__webpack_require__(/*! ./styles/themes/paper.scss */ "./packages/tgui/styles/themes/paper.scss");

__webpack_require__(/*! ./styles/themes/retro.scss */ "./packages/tgui/styles/themes/retro.scss");

__webpack_require__(/*! ./styles/themes/syndicate.scss */ "./packages/tgui/styles/themes/syndicate.scss");

var _perf = __webpack_require__(/*! common/perf */ "./packages/common/perf.js");

var _client = __webpack_require__(/*! tgui-dev-server/link/client */ "./packages/tgui-dev-server/link/client.js");

var _hotkeys = __webpack_require__(/*! ./hotkeys */ "./packages/tgui/hotkeys.js");

var _links = __webpack_require__(/*! ./links */ "./packages/tgui/links.js");

var _renderer = __webpack_require__(/*! ./renderer */ "./packages/tgui/renderer.js");

var _store = __webpack_require__(/*! ./store */ "./packages/tgui/store.js");

var _events = __webpack_require__(/*! ./events */ "./packages/tgui/events.js");

var _window$performance, _window$performance$t;

_perf.perf.mark('inception', (_window$performance = window.performance) == null ? void 0 : (_window$performance$t = _window$performance.timing) == null ? void 0 : _window$performance$t.navigationStart);

_perf.perf.mark('init');

var store = (0, _store.configureStore)();
var renderApp = (0, _renderer.createRenderer)(function () {
  var _require = __webpack_require__(/*! ./routes */ "./packages/tgui/routes.js"),
      getRoutedComponent = _require.getRoutedComponent;

  var Component = getRoutedComponent(store);
  return (0, _inferno.createComponentVNode)(2, _store.StoreProvider, {
    "store": store,
    children: (0, _inferno.createComponentVNode)(2, Component)
  });
});

var setupApp = function setupApp() {
  // Delay setup
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupApp);
    return;
  }

  (0, _events.setupGlobalEvents)();
  (0, _hotkeys.setupHotKeys)();
  (0, _links.captureExternalLinks)(); // Subscribe for state updates

  store.subscribe(renderApp); // Dispatch incoming messages

  window.update = function (msg) {
    return store.dispatch(Byond.parseJson(msg));
  }; // Process the early update queue


  while (true) {
    var msg = window.__updateQueue__.shift();

    if (!msg) {
      break;
    }

    window.update(msg);
  } // Enable hot module reloading


  if (false) {}
};

setupApp();

/***/ }),

/***/ "./packages/tgui/interfaces sync \\.js$":
/*!**********************************************************!*\
  !*** ./packages/tgui/interfaces sync nonrecursive \.js$ ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./AbductorConsole.js": "./packages/tgui/interfaces/AbductorConsole.js",
	"./Achievements.js": "./packages/tgui/interfaces/Achievements.js",
	"./AiAirlock.js": "./packages/tgui/interfaces/AiAirlock.js",
	"./AiRestorer.js": "./packages/tgui/interfaces/AiRestorer.js",
	"./AirAlarm.js": "./packages/tgui/interfaces/AirAlarm.js",
	"./AirlockElectronics.js": "./packages/tgui/interfaces/AirlockElectronics.js",
	"./Apc.js": "./packages/tgui/interfaces/Apc.js",
	"./ApcControl.js": "./packages/tgui/interfaces/ApcControl.js",
	"./AtmosAlertConsole.js": "./packages/tgui/interfaces/AtmosAlertConsole.js",
	"./AtmosControlConsole.js": "./packages/tgui/interfaces/AtmosControlConsole.js",
	"./AtmosControlPanel.js": "./packages/tgui/interfaces/AtmosControlPanel.js",
	"./AtmosFilter.js": "./packages/tgui/interfaces/AtmosFilter.js",
	"./AtmosMixer.js": "./packages/tgui/interfaces/AtmosMixer.js",
	"./AtmosPump.js": "./packages/tgui/interfaces/AtmosPump.js",
	"./AtmosRelief.js": "./packages/tgui/interfaces/AtmosRelief.js",
	"./AutomatedAnnouncement.js": "./packages/tgui/interfaces/AutomatedAnnouncement.js",
	"./BankMachine.js": "./packages/tgui/interfaces/BankMachine.js",
	"./Bepis.js": "./packages/tgui/interfaces/Bepis.js",
	"./Biogenerator.js": "./packages/tgui/interfaces/Biogenerator.js",
	"./BlackmarketUplink.js": "./packages/tgui/interfaces/BlackmarketUplink.js",
	"./BluespaceArtillery.js": "./packages/tgui/interfaces/BluespaceArtillery.js",
	"./BluespaceLocator.js": "./packages/tgui/interfaces/BluespaceLocator.js",
	"./BorgPanel.js": "./packages/tgui/interfaces/BorgPanel.js",
	"./BrigTimer.js": "./packages/tgui/interfaces/BrigTimer.js",
	"./CameraConsole.js": "./packages/tgui/interfaces/CameraConsole.js",
	"./Canister.js": "./packages/tgui/interfaces/Canister.js",
	"./Canvas.js": "./packages/tgui/interfaces/Canvas.js",
	"./Cargo.js": "./packages/tgui/interfaces/Cargo.js",
	"./CargoBountyConsole.js": "./packages/tgui/interfaces/CargoBountyConsole.js",
	"./CargoExpress.js": "./packages/tgui/interfaces/CargoExpress.js",
	"./CargoHoldTerminal.js": "./packages/tgui/interfaces/CargoHoldTerminal.js",
	"./CellularEmporium.js": "./packages/tgui/interfaces/CellularEmporium.js",
	"./CentcomPodLauncher.js": "./packages/tgui/interfaces/CentcomPodLauncher.js",
	"./ChemAcclimator.js": "./packages/tgui/interfaces/ChemAcclimator.js",
	"./ChemDebugSynthesizer.js": "./packages/tgui/interfaces/ChemDebugSynthesizer.js",
	"./ChemDispenser.js": "./packages/tgui/interfaces/ChemDispenser.js",
	"./ChemFilter.js": "./packages/tgui/interfaces/ChemFilter.js",
	"./ChemHeater.js": "./packages/tgui/interfaces/ChemHeater.js",
	"./ChemMaster.js": "./packages/tgui/interfaces/ChemMaster.js",
	"./ChemPress.js": "./packages/tgui/interfaces/ChemPress.js",
	"./ChemReactionChamber.js": "./packages/tgui/interfaces/ChemReactionChamber.js",
	"./ChemSplitter.js": "./packages/tgui/interfaces/ChemSplitter.js",
	"./ChemSynthesizer.js": "./packages/tgui/interfaces/ChemSynthesizer.js",
	"./CivCargoHoldTerminal.js": "./packages/tgui/interfaces/CivCargoHoldTerminal.js",
	"./ClockworkSlab.js": "./packages/tgui/interfaces/ClockworkSlab.js",
	"./CodexGigas.js": "./packages/tgui/interfaces/CodexGigas.js",
	"./ComputerFabricator.js": "./packages/tgui/interfaces/ComputerFabricator.js",
	"./Crayon.js": "./packages/tgui/interfaces/Crayon.js",
	"./CrewConsole.js": "./packages/tgui/interfaces/CrewConsole.js",
	"./Cryo.js": "./packages/tgui/interfaces/Cryo.js",
	"./DecalPainter.js": "./packages/tgui/interfaces/DecalPainter.js",
	"./DisposalUnit.js": "./packages/tgui/interfaces/DisposalUnit.js",
	"./DnaConsole.js": "./packages/tgui/interfaces/DnaConsole.js",
	"./DnaVault.js": "./packages/tgui/interfaces/DnaVault.js",
	"./EightBallVote.js": "./packages/tgui/interfaces/EightBallVote.js",
	"./Electrolyzer.js": "./packages/tgui/interfaces/Electrolyzer.js",
	"./Electropack.js": "./packages/tgui/interfaces/Electropack.js",
	"./EmergencyShuttleConsole.js": "./packages/tgui/interfaces/EmergencyShuttleConsole.js",
	"./EngravedMessage.js": "./packages/tgui/interfaces/EngravedMessage.js",
	"./ExosuitControlConsole.js": "./packages/tgui/interfaces/ExosuitControlConsole.js",
	"./ExosuitFabricator.js": "./packages/tgui/interfaces/ExosuitFabricator.js",
	"./ExperimentConfigure.js": "./packages/tgui/interfaces/ExperimentConfigure.js",
	"./ForbiddenLore.js": "./packages/tgui/interfaces/ForbiddenLore.js",
	"./Gateway.js": "./packages/tgui/interfaces/Gateway.js",
	"./GhostPoolProtection.js": "./packages/tgui/interfaces/GhostPoolProtection.js",
	"./GlandDispenser.js": "./packages/tgui/interfaces/GlandDispenser.js",
	"./Gps.js": "./packages/tgui/interfaces/Gps.js",
	"./GravityGenerator.js": "./packages/tgui/interfaces/GravityGenerator.js",
	"./GulagItemReclaimer.js": "./packages/tgui/interfaces/GulagItemReclaimer.js",
	"./GulagTeleporterConsole.js": "./packages/tgui/interfaces/GulagTeleporterConsole.js",
	"./Holodeck.js": "./packages/tgui/interfaces/Holodeck.js",
	"./Holopad.js": "./packages/tgui/interfaces/Holopad.js",
	"./HypnoChair.js": "./packages/tgui/interfaces/HypnoChair.js",
	"./ImplantChair.js": "./packages/tgui/interfaces/ImplantChair.js",
	"./InfraredEmitter.js": "./packages/tgui/interfaces/InfraredEmitter.js",
	"./Intellicard.js": "./packages/tgui/interfaces/Intellicard.js",
	"./Jukebox.js": "./packages/tgui/interfaces/Jukebox.js",
	"./KeycardAuth.js": "./packages/tgui/interfaces/KeycardAuth.js",
	"./LaborClaimConsole.js": "./packages/tgui/interfaces/LaborClaimConsole.js",
	"./LanguageMenu.js": "./packages/tgui/interfaces/LanguageMenu.js",
	"./LaunchpadConsole.js": "./packages/tgui/interfaces/LaunchpadConsole.js",
	"./LaunchpadRemote.js": "./packages/tgui/interfaces/LaunchpadRemote.js",
	"./MafiaPanel.js": "./packages/tgui/interfaces/MafiaPanel.js",
	"./MalfunctionModulePicker.js": "./packages/tgui/interfaces/MalfunctionModulePicker.js",
	"./MechBayPowerConsole.js": "./packages/tgui/interfaces/MechBayPowerConsole.js",
	"./MechpadConsole.js": "./packages/tgui/interfaces/MechpadConsole.js",
	"./MedicalKiosk.js": "./packages/tgui/interfaces/MedicalKiosk.js",
	"./Microscope.js": "./packages/tgui/interfaces/Microscope.js",
	"./MiningVendor.js": "./packages/tgui/interfaces/MiningVendor.js",
	"./Mint.js": "./packages/tgui/interfaces/Mint.js",
	"./Mule.js": "./packages/tgui/interfaces/Mule.js",
	"./NaniteChamberControl.js": "./packages/tgui/interfaces/NaniteChamberControl.js",
	"./NaniteCloudControl.js": "./packages/tgui/interfaces/NaniteCloudControl.js",
	"./NaniteProgramHub.js": "./packages/tgui/interfaces/NaniteProgramHub.js",
	"./NaniteProgrammer.js": "./packages/tgui/interfaces/NaniteProgrammer.js",
	"./NaniteRemote.js": "./packages/tgui/interfaces/NaniteRemote.js",
	"./NotificationPreferences.js": "./packages/tgui/interfaces/NotificationPreferences.js",
	"./NtnetRelay.js": "./packages/tgui/interfaces/NtnetRelay.js",
	"./NtosAiRestorer.js": "./packages/tgui/interfaces/NtosAiRestorer.js",
	"./NtosArcade.js": "./packages/tgui/interfaces/NtosArcade.js",
	"./NtosAtmos.js": "./packages/tgui/interfaces/NtosAtmos.js",
	"./NtosBountyConsole.js": "./packages/tgui/interfaces/NtosBountyConsole.js",
	"./NtosCard.js": "./packages/tgui/interfaces/NtosCard.js",
	"./NtosConfiguration.js": "./packages/tgui/interfaces/NtosConfiguration.js",
	"./NtosCrewManifest.js": "./packages/tgui/interfaces/NtosCrewManifest.js",
	"./NtosCyborgRemoteMonitor.js": "./packages/tgui/interfaces/NtosCyborgRemoteMonitor.js",
	"./NtosCyborgRemoteMonitorSyndicate.js": "./packages/tgui/interfaces/NtosCyborgRemoteMonitorSyndicate.js",
	"./NtosFileManager.js": "./packages/tgui/interfaces/NtosFileManager.js",
	"./NtosJobManager.js": "./packages/tgui/interfaces/NtosJobManager.js",
	"./NtosMain.js": "./packages/tgui/interfaces/NtosMain.js",
	"./NtosNetChat.js": "./packages/tgui/interfaces/NtosNetChat.js",
	"./NtosNetDos.js": "./packages/tgui/interfaces/NtosNetDos.js",
	"./NtosNetDownloader.js": "./packages/tgui/interfaces/NtosNetDownloader.js",
	"./NtosNetMonitor.js": "./packages/tgui/interfaces/NtosNetMonitor.js",
	"./NtosPowerMonitor.js": "./packages/tgui/interfaces/NtosPowerMonitor.js",
	"./NtosRadar.js": "./packages/tgui/interfaces/NtosRadar.js",
	"./NtosRadarSyndicate.js": "./packages/tgui/interfaces/NtosRadarSyndicate.js",
	"./NtosRequestKiosk.js": "./packages/tgui/interfaces/NtosRequestKiosk.js",
	"./NtosRevelation.js": "./packages/tgui/interfaces/NtosRevelation.js",
	"./NtosRoboControl.js": "./packages/tgui/interfaces/NtosRoboControl.js",
	"./NtosShipping.js": "./packages/tgui/interfaces/NtosShipping.js",
	"./NtosStationAlertConsole.js": "./packages/tgui/interfaces/NtosStationAlertConsole.js",
	"./NtosSupermatterMonitor.js": "./packages/tgui/interfaces/NtosSupermatterMonitor.js",
	"./NtosTechweb.js": "./packages/tgui/interfaces/NtosTechweb.js",
	"./NuclearBomb.js": "./packages/tgui/interfaces/NuclearBomb.js",
	"./OperatingComputer.js": "./packages/tgui/interfaces/OperatingComputer.js",
	"./Orbit.js": "./packages/tgui/interfaces/Orbit.js",
	"./OreBox.js": "./packages/tgui/interfaces/OreBox.js",
	"./OreRedemptionMachine.js": "./packages/tgui/interfaces/OreRedemptionMachine.js",
	"./Pandemic.js": "./packages/tgui/interfaces/Pandemic.js",
	"./PaperSheet.js": "./packages/tgui/interfaces/PaperSheet.js",
	"./ParticleAccelerator.js": "./packages/tgui/interfaces/ParticleAccelerator.js",
	"./PersonalCrafting.js": "./packages/tgui/interfaces/PersonalCrafting.js",
	"./Photocopier.js": "./packages/tgui/interfaces/Photocopier.js",
	"./PortableChemMixer.js": "./packages/tgui/interfaces/PortableChemMixer.js",
	"./PortableGenerator.js": "./packages/tgui/interfaces/PortableGenerator.js",
	"./PortablePump.js": "./packages/tgui/interfaces/PortablePump.js",
	"./PortableScrubber.js": "./packages/tgui/interfaces/PortableScrubber.js",
	"./PortableTurret.js": "./packages/tgui/interfaces/PortableTurret.js",
	"./PowerMonitor.js": "./packages/tgui/interfaces/PowerMonitor.js",
	"./ProbingConsole.js": "./packages/tgui/interfaces/ProbingConsole.js",
	"./ProximitySensor.js": "./packages/tgui/interfaces/ProximitySensor.js",
	"./Radio.js": "./packages/tgui/interfaces/Radio.js",
	"./RadioactiveMicrolaser.js": "./packages/tgui/interfaces/RadioactiveMicrolaser.js",
	"./RapidPipeDispenser.js": "./packages/tgui/interfaces/RapidPipeDispenser.js",
	"./RemoteRobotControl.js": "./packages/tgui/interfaces/RemoteRobotControl.js",
	"./RequestKiosk.js": "./packages/tgui/interfaces/RequestKiosk.js",
	"./RoboticsControlConsole.js": "./packages/tgui/interfaces/RoboticsControlConsole.js",
	"./Roulette.js": "./packages/tgui/interfaces/Roulette.js",
	"./SatelliteControl.js": "./packages/tgui/interfaces/SatelliteControl.js",
	"./ScannerGate.js": "./packages/tgui/interfaces/ScannerGate.js",
	"./SeedExtractor.js": "./packages/tgui/interfaces/SeedExtractor.js",
	"./ShuttleConsole.js": "./packages/tgui/interfaces/ShuttleConsole.js",
	"./ShuttleManipulator.js": "./packages/tgui/interfaces/ShuttleManipulator.js",
	"./Signaler.js": "./packages/tgui/interfaces/Signaler.js",
	"./SkillPanel.js": "./packages/tgui/interfaces/SkillPanel.js",
	"./SkillStation.js": "./packages/tgui/interfaces/SkillStation.js",
	"./Sleeper.js": "./packages/tgui/interfaces/Sleeper.js",
	"./SlimeBodySwapper.js": "./packages/tgui/interfaces/SlimeBodySwapper.js",
	"./SmartVend.js": "./packages/tgui/interfaces/SmartVend.js",
	"./Smes.js": "./packages/tgui/interfaces/Smes.js",
	"./SmokeMachine.js": "./packages/tgui/interfaces/SmokeMachine.js",
	"./SolarControl.js": "./packages/tgui/interfaces/SolarControl.js",
	"./SpaceHeater.js": "./packages/tgui/interfaces/SpaceHeater.js",
	"./SpawnersMenu.js": "./packages/tgui/interfaces/SpawnersMenu.js",
	"./StationAlertConsole.js": "./packages/tgui/interfaces/StationAlertConsole.js",
	"./SuitStorageUnit.js": "./packages/tgui/interfaces/SuitStorageUnit.js",
	"./SyndContractor.js": "./packages/tgui/interfaces/SyndContractor.js",
	"./TachyonArray.js": "./packages/tgui/interfaces/TachyonArray.js",
	"./Tank.js": "./packages/tgui/interfaces/Tank.js",
	"./TankDispenser.js": "./packages/tgui/interfaces/TankDispenser.js",
	"./Techweb.js": "./packages/tgui/interfaces/Techweb.js",
	"./Telecomms.js": "./packages/tgui/interfaces/Telecomms.js",
	"./TelecommsInteraction.js": "./packages/tgui/interfaces/TelecommsInteraction.js",
	"./TelecommsLogBrowser.js": "./packages/tgui/interfaces/TelecommsLogBrowser.js",
	"./TelecommsMonitor.js": "./packages/tgui/interfaces/TelecommsMonitor.js",
	"./TelecommsPDALog.js": "./packages/tgui/interfaces/TelecommsPDALog.js",
	"./Teleporter.js": "./packages/tgui/interfaces/Teleporter.js",
	"./ThermoMachine.js": "./packages/tgui/interfaces/ThermoMachine.js",
	"./Timer.js": "./packages/tgui/interfaces/Timer.js",
	"./TransferValve.js": "./packages/tgui/interfaces/TransferValve.js",
	"./TurbineComputer.js": "./packages/tgui/interfaces/TurbineComputer.js",
	"./TurretControl.js": "./packages/tgui/interfaces/TurretControl.js",
	"./Uplink.js": "./packages/tgui/interfaces/Uplink.js",
	"./VaultController.js": "./packages/tgui/interfaces/VaultController.js",
	"./Vendatray.js": "./packages/tgui/interfaces/Vendatray.js",
	"./Vending.js": "./packages/tgui/interfaces/Vending.js",
	"./VrSleeper.js": "./packages/tgui/interfaces/VrSleeper.js",
	"./Wires.js": "./packages/tgui/interfaces/Wires.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./packages/tgui/interfaces sync \\.js$";

/***/ }),

/***/ "./packages/tgui/interfaces/AbductorConsole.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/AbductorConsole.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AbductorConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _Uplink = __webpack_require__(/*! ./Uplink */ "./packages/tgui/interfaces/Uplink.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AbductorConsole = function AbductorConsole(props, context) {
  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 1),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "theme": "abductor",
    "width": 600,
    "height": 532,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "icon": "list",
          "lineHeight": "23px",
          "selected": tab === 1,
          "onClick": function () {
            function onClick() {
              return setTab(1);
            }

            return onClick;
          }(),
          children: "Abductsoft 3000"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "icon": "list",
          "lineHeight": "23px",
          "selected": tab === 2,
          "onClick": function () {
            function onClick() {
              return setTab(2);
            }

            return onClick;
          }(),
          children: "Mission Settings"
        })]
      }), tab === 1 && (0, _inferno.createComponentVNode)(2, Abductsoft), tab === 2 && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, EmergencyTeleporter), (0, _inferno.createComponentVNode)(2, VestSettings)], 4)]
    })
  });
};

exports.AbductorConsole = AbductorConsole;

var Abductsoft = function Abductsoft(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var experiment = data.experiment,
      points = data.points,
      credits = data.credits;

  if (!experiment) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      "danger": true,
      children: "No Experiment Machine Detected"
    });
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Collected Samples",
        children: points
      })
    })
  }), (0, _inferno.createComponentVNode)(2, _Uplink.GenericUplink, {
    "currencyAmount": credits,
    "currencySymbol": "Credits"
  })], 4);
};

var EmergencyTeleporter = function EmergencyTeleporter(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var pad = data.pad,
      gizmo = data.gizmo;

  if (!pad) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      "danger": true,
      children: "No Telepad Detected"
    });
  }

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Emergency Teleport",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "exclamation-circle",
      "content": "Activate",
      "color": "bad",
      "onClick": function () {
        function onClick() {
          return act('teleporter_send');
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Mark Retrieval",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": gizmo ? "user-plus" : "user-slash",
          "content": gizmo ? "Retrieve" : "No Mark",
          "disabled": !gizmo,
          "onClick": function () {
            function onClick() {
              return act('teleporter_retrieve');
            }

            return onClick;
          }()
        })
      })
    })
  });
};

var VestSettings = function VestSettings(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var vest = data.vest,
      vest_mode = data.vest_mode,
      vest_lock = data.vest_lock;

  if (!vest) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      "danger": true,
      children: "No Agent Vest Detected"
    });
  }

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Agent Vest Settings",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": vest_lock ? 'lock' : 'unlock',
      "content": vest_lock ? 'Locked' : 'Unlocked',
      "onClick": function () {
        function onClick() {
          return act('toggle_vest');
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Mode",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": vest_mode === 1 ? 'eye-slash' : 'fist-raised',
          "content": vest_mode === 1 ? "Stealth" : "Combat",
          "onClick": function () {
            function onClick() {
              return act('flip_vest');
            }

            return onClick;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Disguise",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "user-secret",
          "content": "Select",
          "onClick": function () {
            function onClick() {
              return act('select_disguise');
            }

            return onClick;
          }()
        })
      })]
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Achievements.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/Achievements.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Achievements = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Achievements = function Achievements(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var categories = data.categories;

  var _useLocalState = (0, _backend.useLocalState)(context, 'category', categories[0]),
      selectedCategory = _useLocalState[0],
      setSelectedCategory = _useLocalState[1];

  var achievements = data.achievements.filter(function (x) {
    return x.category === selectedCategory;
  });
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Achievements",
    "width": 540,
    "height": 680,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [categories.map(function (category) {
          return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
            "selected": selectedCategory === category,
            "onClick": function () {
              function onClick() {
                return setSelectedCategory(category);
              }

              return onClick;
            }(),
            children: category
          }, category);
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": selectedCategory === 'High Scores',
          "onClick": function () {
            function onClick() {
              return setSelectedCategory('High Scores');
            }

            return onClick;
          }(),
          children: "High Scores"
        })]
      }), selectedCategory === 'High Scores' && (0, _inferno.createComponentVNode)(2, HighScoreTable) || (0, _inferno.createComponentVNode)(2, AchievementTable, {
        "achievements": achievements
      })]
    })
  });
};

exports.Achievements = Achievements;

var AchievementTable = function AchievementTable(props, context) {
  var achievements = props.achievements;
  return (0, _inferno.createComponentVNode)(2, _components.Table, {
    children: achievements.map(function (achievement) {
      return (0, _inferno.createComponentVNode)(2, Achievement, {
        "achievement": achievement
      }, achievement.name);
    })
  });
};

var Achievement = function Achievement(props) {
  var achievement = props.achievement;
  var name = achievement.name,
      desc = achievement.desc,
      icon_class = achievement.icon_class,
      value = achievement.value,
      score = achievement.score;
  return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "m": 1,
        "className": icon_class
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "verticalAlign": "top",
      children: [(0, _inferno.createVNode)(1, "h1", null, name, 0), desc, score && (0, _inferno.createComponentVNode)(2, _components.Box, {
        "color": value > 0 ? 'good' : 'bad',
        children: value > 0 ? "Earned " + value + " times" : 'Locked'
      }) || (0, _inferno.createComponentVNode)(2, _components.Box, {
        "color": value ? 'good' : 'bad',
        children: value ? 'Unlocked' : 'Locked'
      })]
    })]
  }, name);
};

var HighScoreTable = function HighScoreTable(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      data = _useBackend2.data;

  var highscores = data.highscore,
      user_ckey = data.user_ckey;

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'highscore', 0),
      highScoreIndex = _useLocalState2[0],
      setHighScoreIndex = _useLocalState2[1];

  var highscore = highscores[highScoreIndex];

  if (!highscore) {
    return null;
  }

  var scores = Object.keys(highscore.scores).map(function (key) {
    return {
      ckey: key,
      value: highscore.scores[key]
    };
  });
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
        "vertical": true,
        children: highscores.map(function (highscore, i) {
          return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
            "selected": highScoreIndex === i,
            "onClick": function () {
              function onClick() {
                return setHighScoreIndex(i);
              }

              return onClick;
            }(),
            children: highscore.name
          }, highscore.name);
        })
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      "basis": 0,
      children: (0, _inferno.createComponentVNode)(2, _components.Table, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          "header": true,
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "textAlign": "center",
            children: "#"
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "textAlign": "center",
            children: "Key"
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "textAlign": "center",
            children: "Score"
          })]
        }), scores.map(function (score, i) {
          return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            "className": "candystripe",
            "m": 2,
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "color": "label",
              "textAlign": "center",
              children: i + 1
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "color": score.ckey === user_ckey && 'green',
              "textAlign": "center",
              children: [i === 0 && (0, _inferno.createComponentVNode)(2, _components.Icon, {
                "name": "crown",
                "color": "yellow",
                "mr": 2
              }), score.ckey, i === 0 && (0, _inferno.createComponentVNode)(2, _components.Icon, {
                "name": "crown",
                "color": "yellow",
                "ml": 2
              })]
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "textAlign": "center",
              children: score.value
            })]
          }, score.ckey);
        })]
      })
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/AiAirlock.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/AiAirlock.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AiAirlock = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var dangerMap = {
  2: {
    color: 'good',
    localStatusText: 'Offline'
  },
  1: {
    color: 'average',
    localStatusText: 'Caution'
  },
  0: {
    color: 'bad',
    localStatusText: 'Optimal'
  }
};

var AiAirlock = function AiAirlock(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var statusMain = dangerMap[data.power.main] || dangerMap[0];
  var statusBackup = dangerMap[data.power.backup] || dangerMap[0];
  var statusElectrify = dangerMap[data.shock] || dangerMap[0];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 390,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Power Status",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Main",
            "color": statusMain.color,
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "lightbulb-o",
              "disabled": !data.power.main,
              "content": "Disrupt",
              "onClick": function () {
                function onClick() {
                  return act('disrupt-main');
                }

                return onClick;
              }()
            }),
            children: [data.power.main ? 'Online' : 'Offline', ' ', (!data.wires.main_1 || !data.wires.main_2) && '[Wires have been cut!]' || data.power.main_timeleft > 0 && "[" + data.power.main_timeleft + "s]"]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Backup",
            "color": statusBackup.color,
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "lightbulb-o",
              "disabled": !data.power.backup,
              "content": "Disrupt",
              "onClick": function () {
                function onClick() {
                  return act('disrupt-backup');
                }

                return onClick;
              }()
            }),
            children: [data.power.backup ? 'Online' : 'Offline', ' ', (!data.wires.backup_1 || !data.wires.backup_2) && '[Wires have been cut!]' || data.power.backup_timeleft > 0 && "[" + data.power.backup_timeleft + "s]"]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Electrify",
            "color": statusElectrify.color,
            "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "wrench",
              "disabled": !(data.wires.shock && data.shock === 0),
              "content": "Restore",
              "onClick": function () {
                function onClick() {
                  return act('shock-restore');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "bolt",
              "disabled": !data.wires.shock,
              "content": "Temporary",
              "onClick": function () {
                function onClick() {
                  return act('shock-temp');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "bolt",
              "disabled": !data.wires.shock,
              "content": "Permanent",
              "onClick": function () {
                function onClick() {
                  return act('shock-perm');
                }

                return onClick;
              }()
            })], 4),
            children: [data.shock === 2 ? 'Safe' : 'Electrified', ' ', !data.wires.shock && '[Wires have been cut!]' || data.shock_timeleft > 0 && "[" + data.shock_timeleft + "s]" || data.shock_timeleft === -1 && '[Permanent]']
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Access and Door Control",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "ID Scan",
            "color": "bad",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.id_scanner ? 'power-off' : 'times',
              "content": data.id_scanner ? 'Enabled' : 'Disabled',
              "selected": data.id_scanner,
              "disabled": !data.wires.id_scanner,
              "onClick": function () {
                function onClick() {
                  return act('idscan-toggle');
                }

                return onClick;
              }()
            }),
            children: !data.wires.id_scanner && '[Wires have been cut!]'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Emergency Access",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.emergency ? 'power-off' : 'times',
              "content": data.emergency ? 'Enabled' : 'Disabled',
              "selected": data.emergency,
              "onClick": function () {
                function onClick() {
                  return act('emergency-toggle');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Divider), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Door Bolts",
            "color": "bad",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.locked ? 'lock' : 'unlock',
              "content": data.locked ? 'Lowered' : 'Raised',
              "selected": data.locked,
              "disabled": !data.wires.bolts,
              "onClick": function () {
                function onClick() {
                  return act('bolt-toggle');
                }

                return onClick;
              }()
            }),
            children: !data.wires.bolts && '[Wires have been cut!]'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Door Bolt Lights",
            "color": "bad",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.lights ? 'power-off' : 'times',
              "content": data.lights ? 'Enabled' : 'Disabled',
              "selected": data.lights,
              "disabled": !data.wires.lights,
              "onClick": function () {
                function onClick() {
                  return act('light-toggle');
                }

                return onClick;
              }()
            }),
            children: !data.wires.lights && '[Wires have been cut!]'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Door Force Sensors",
            "color": "bad",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.safe ? 'power-off' : 'times',
              "content": data.safe ? 'Enabled' : 'Disabled',
              "selected": data.safe,
              "disabled": !data.wires.safe,
              "onClick": function () {
                function onClick() {
                  return act('safe-toggle');
                }

                return onClick;
              }()
            }),
            children: !data.wires.safe && '[Wires have been cut!]'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Door Timing Safety",
            "color": "bad",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.speed ? 'power-off' : 'times',
              "content": data.speed ? 'Enabled' : 'Disabled',
              "selected": data.speed,
              "disabled": !data.wires.timing,
              "onClick": function () {
                function onClick() {
                  return act('speed-toggle');
                }

                return onClick;
              }()
            }),
            children: !data.wires.timing && '[Wires have been cut!]'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Divider), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Door Control",
            "color": "bad",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.opened ? 'sign-out-alt' : 'sign-in-alt',
              "content": data.opened ? 'Open' : 'Closed',
              "selected": data.opened,
              "disabled": data.locked || data.welded,
              "onClick": function () {
                function onClick() {
                  return act('open-close');
                }

                return onClick;
              }()
            }),
            children: !!(data.locked || data.welded) && (0, _inferno.createVNode)(1, "span", null, [(0, _inferno.createTextVNode)("[Door is "), data.locked ? 'bolted' : '', data.locked && data.welded ? ' and ' : '', data.welded ? 'welded' : '', (0, _inferno.createTextVNode)("!]")], 0)
          })]
        })
      })]
    })
  });
};

exports.AiAirlock = AiAirlock;

/***/ }),

/***/ "./packages/tgui/interfaces/AiRestorer.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/AiRestorer.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AiRestorerContent = exports.AiRestorer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AiRestorer = function AiRestorer() {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 370,
    "height": 360,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, AiRestorerContent)
    })
  });
};

exports.AiRestorer = AiRestorer;

var AiRestorerContent = function AiRestorerContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var AI_present = data.AI_present,
      error = data.error,
      name = data.name,
      laws = data.laws,
      isDead = data.isDead,
      restoring = data.restoring,
      health = data.health,
      ejectable = data.ejectable;
  return (0, _inferno.createFragment)([error && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
    "textAlign": "center",
    children: error
  }), !!ejectable && (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "icon": "eject",
    "content": AI_present ? name : "----------",
    "disabled": !AI_present,
    "onClick": function () {
      function onClick() {
        return act('PRG_eject');
      }

      return onClick;
    }()
  }), !!AI_present && (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": ejectable ? "System Status" : name,
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "bold": true,
      "color": isDead ? 'bad' : 'good',
      children: isDead ? "Nonfunctional" : "Functional"
    }),
    children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Integrity",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": health,
          "minValue": 0,
          "maxValue": 100,
          "ranges": {
            good: [70, Infinity],
            average: [50, 70],
            bad: [-Infinity, 50]
          }
        })
      })
    }), !!restoring && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "textAlign": "center",
      "fontSize": "20px",
      "color": "good",
      "mt": 1,
      children: "RECONSTRUCTION IN PROGRESS"
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "icon": "plus",
      "content": "Begin Reconstruction",
      "disabled": restoring,
      "mt": 1,
      "onClick": function () {
        function onClick() {
          return act('PRG_beginReconstruction');
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Laws",
      "level": 2,
      children: laws.map(function (law) {
        return (0, _inferno.createComponentVNode)(2, _components.Box, {
          "className": "candystripe",
          children: law
        }, law);
      })
    })]
  })], 0);
};

exports.AiRestorerContent = AiRestorerContent;

/***/ }),

/***/ "./packages/tgui/interfaces/AirAlarm.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/AirAlarm.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AirAlarm = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _InterfaceLockNoticeBox = __webpack_require__(/*! ./common/InterfaceLockNoticeBox */ "./packages/tgui/interfaces/common/InterfaceLockNoticeBox.js");

var _AtmosControls = __webpack_require__(/*! ./common/AtmosControls */ "./packages/tgui/interfaces/common/AtmosControls.js");

var AirAlarm = function AirAlarm(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var locked = data.locked && !data.siliconUser;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 440,
    "height": 650,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _InterfaceLockNoticeBox.InterfaceLockNoticeBox), (0, _inferno.createComponentVNode)(2, AirAlarmStatus), !locked && (0, _inferno.createComponentVNode)(2, AirAlarmControl)]
    })
  });
};

exports.AirAlarm = AirAlarm;

var AirAlarmStatus = function AirAlarmStatus(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      data = _useBackend2.data;

  var entries = (data.environment_data || []).filter(function (entry) {
    return entry.value >= 0.01;
  });
  var dangerMap = {
    0: {
      color: 'good',
      localStatusText: 'Optimal'
    },
    1: {
      color: 'average',
      localStatusText: 'Caution'
    },
    2: {
      color: 'bad',
      localStatusText: 'Danger (Internals Required)'
    }
  };
  var localStatus = dangerMap[data.danger_level] || dangerMap[0];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Air Status",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [entries.length > 0 && (0, _inferno.createFragment)([entries.map(function (entry) {
        var status = dangerMap[entry.danger_level] || dangerMap[0];
        return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": entry.name,
          "color": status.color,
          children: [(0, _math.toFixed)(entry.value, 2), entry.unit]
        }, entry.name);
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Local status",
        "color": localStatus.color,
        children: localStatus.localStatusText
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Area status",
        "color": data.atmos_alarm || data.fire_alarm ? 'bad' : 'good',
        children: data.atmos_alarm && 'Atmosphere Alarm' || data.fire_alarm && 'Fire Alarm' || 'Nominal'
      })], 0) || (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Warning",
        "color": "bad",
        children: "Cannot obtain air sample for analysis."
      }), !!data.emagged && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Warning",
        "color": "bad",
        children: "Safety measures offline. Device may exhibit abnormal behavior."
      })]
    })
  });
};

var AIR_ALARM_ROUTES = {
  home: {
    title: 'Air Controls',
    component: function () {
      function component() {
        return AirAlarmControlHome;
      }

      return component;
    }()
  },
  vents: {
    title: 'Vent Controls',
    component: function () {
      function component() {
        return AirAlarmControlVents;
      }

      return component;
    }()
  },
  scrubbers: {
    title: 'Scrubber Controls',
    component: function () {
      function component() {
        return AirAlarmControlScrubbers;
      }

      return component;
    }()
  },
  modes: {
    title: 'Operating Mode',
    component: function () {
      function component() {
        return AirAlarmControlModes;
      }

      return component;
    }()
  },
  thresholds: {
    title: 'Alarm Thresholds',
    component: function () {
      function component() {
        return AirAlarmControlThresholds;
      }

      return component;
    }()
  }
};

var AirAlarmControl = function AirAlarmControl(props, context) {
  var _useLocalState = (0, _backend.useLocalState)(context, 'screen'),
      screen = _useLocalState[0],
      setScreen = _useLocalState[1];

  var route = AIR_ALARM_ROUTES[screen] || AIR_ALARM_ROUTES.home;
  var Component = route.component();
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": route.title,
    "buttons": screen && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "arrow-left",
      "content": "Back",
      "onClick": function () {
        function onClick() {
          return setScreen();
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, Component)
  });
}; //  Home screen
// --------------------------------------------------------


var AirAlarmControlHome = function AirAlarmControlHome(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'screen'),
      screen = _useLocalState2[0],
      setScreen = _useLocalState2[1];

  var mode = data.mode,
      atmos_alarm = data.atmos_alarm;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": atmos_alarm ? 'exclamation-triangle' : 'exclamation',
    "color": atmos_alarm && 'caution',
    "content": "Area Atmosphere Alarm",
    "onClick": function () {
      function onClick() {
        return act(atmos_alarm ? 'reset' : 'alarm');
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mt": 1
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": mode === 3 ? 'exclamation-triangle' : 'exclamation',
    "color": mode === 3 && 'danger',
    "content": "Panic Siphon",
    "onClick": function () {
      function onClick() {
        return act('mode', {
          mode: mode === 3 ? 1 : 3
        });
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mt": 2
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "sign-out-alt",
    "content": "Vent Controls",
    "onClick": function () {
      function onClick() {
        return setScreen('vents');
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mt": 1
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "filter",
    "content": "Scrubber Controls",
    "onClick": function () {
      function onClick() {
        return setScreen('scrubbers');
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mt": 1
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "cog",
    "content": "Operating Mode",
    "onClick": function () {
      function onClick() {
        return setScreen('modes');
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mt": 1
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "chart-bar",
    "content": "Alarm Thresholds",
    "onClick": function () {
      function onClick() {
        return setScreen('thresholds');
      }

      return onClick;
    }()
  })], 4);
}; //  Vents
// --------------------------------------------------------


var AirAlarmControlVents = function AirAlarmControlVents(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      data = _useBackend4.data;

  var vents = data.vents;

  if (!vents || vents.length === 0) {
    return 'Nothing to show';
  }

  return vents.map(function (vent) {
    return (0, _inferno.createComponentVNode)(2, _AtmosControls.Vent, {
      "vent": vent
    }, vent.id_tag);
  });
}; //  Scrubbers
// --------------------------------------------------------


var AirAlarmControlScrubbers = function AirAlarmControlScrubbers(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      data = _useBackend5.data;

  var scrubbers = data.scrubbers;

  if (!scrubbers || scrubbers.length === 0) {
    return 'Nothing to show';
  }

  return scrubbers.map(function (scrubber) {
    return (0, _inferno.createComponentVNode)(2, _AtmosControls.Scrubber, {
      "scrubber": scrubber
    }, scrubber.id_tag);
  });
}; //  Modes
// --------------------------------------------------------


var AirAlarmControlModes = function AirAlarmControlModes(props, context) {
  var _useBackend6 = (0, _backend.useBackend)(context),
      act = _useBackend6.act,
      data = _useBackend6.data;

  var modes = data.modes;

  if (!modes || modes.length === 0) {
    return 'Nothing to show';
  }

  return modes.map(function (mode) {
    return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": mode.selected ? 'check-square-o' : 'square-o',
      "selected": mode.selected,
      "color": mode.selected && mode.danger && 'danger',
      "content": mode.name,
      "onClick": function () {
        function onClick() {
          return act('mode', {
            mode: mode.mode
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 1
    })], 4, mode.mode);
  });
}; //  Thresholds
// --------------------------------------------------------


var AirAlarmControlThresholds = function AirAlarmControlThresholds(props, context) {
  var _useBackend7 = (0, _backend.useBackend)(context),
      act = _useBackend7.act,
      data = _useBackend7.data;

  var thresholds = data.thresholds;
  return (0, _inferno.createVNode)(1, "table", "LabeledList", [(0, _inferno.createVNode)(1, "thead", null, (0, _inferno.createVNode)(1, "tr", null, [(0, _inferno.createVNode)(1, "td"), (0, _inferno.createVNode)(1, "td", "color-bad", "min2", 16), (0, _inferno.createVNode)(1, "td", "color-average", "min1", 16), (0, _inferno.createVNode)(1, "td", "color-average", "max1", 16), (0, _inferno.createVNode)(1, "td", "color-bad", "max2", 16)], 4), 2), (0, _inferno.createVNode)(1, "tbody", null, thresholds.map(function (threshold) {
    return (0, _inferno.createVNode)(1, "tr", null, [(0, _inferno.createVNode)(1, "td", "LabeledList__label", threshold.name, 0), threshold.settings.map(function (setting) {
      return (0, _inferno.createVNode)(1, "td", null, (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": (0, _math.toFixed)(setting.selected, 2),
        "onClick": function () {
          function onClick() {
            return act('threshold', {
              env: setting.env,
              "var": setting.val
            });
          }

          return onClick;
        }()
      }), 2, null, setting.val);
    })], 0, null, threshold.name);
  }), 0)], 4, {
    "style": {
      width: '100%'
    }
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/AirlockElectronics.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/AirlockElectronics.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AirlockElectronics = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _AccessList = __webpack_require__(/*! ./common/AccessList */ "./packages/tgui/interfaces/common/AccessList.js");

var AirlockElectronics = function AirlockElectronics(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var oneAccess = data.oneAccess,
      unres_direction = data.unres_direction;
  var regions = data.regions || [];
  var accesses = data.accesses || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 420,
    "height": 485,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Main",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Access Required",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": oneAccess ? 'unlock' : 'lock',
              "content": oneAccess ? 'One' : 'All',
              "onClick": function () {
                function onClick() {
                  return act('one_access');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Unrestricted Access",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": unres_direction & 1 ? 'check-square-o' : 'square-o',
              "content": "North",
              "selected": unres_direction & 1,
              "onClick": function () {
                function onClick() {
                  return act('direc_set', {
                    unres_direction: '1'
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": unres_direction & 2 ? 'check-square-o' : 'square-o',
              "content": "South",
              "selected": unres_direction & 2,
              "onClick": function () {
                function onClick() {
                  return act('direc_set', {
                    unres_direction: '2'
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": unres_direction & 4 ? 'check-square-o' : 'square-o',
              "content": "East",
              "selected": unres_direction & 4,
              "onClick": function () {
                function onClick() {
                  return act('direc_set', {
                    unres_direction: '4'
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": unres_direction & 8 ? 'check-square-o' : 'square-o',
              "content": "West",
              "selected": unres_direction & 8,
              "onClick": function () {
                function onClick() {
                  return act('direc_set', {
                    unres_direction: '8'
                  });
                }

                return onClick;
              }()
            })]
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _AccessList.AccessList, {
        "accesses": regions,
        "selectedList": accesses,
        "accessMod": function () {
          function accessMod(ref) {
            return act('set', {
              access: ref
            });
          }

          return accessMod;
        }(),
        "grantAll": function () {
          function grantAll() {
            return act('grant_all');
          }

          return grantAll;
        }(),
        "denyAll": function () {
          function denyAll() {
            return act('clear_all');
          }

          return denyAll;
        }(),
        "grantDep": function () {
          function grantDep(ref) {
            return act('grant_region', {
              region: ref
            });
          }

          return grantDep;
        }(),
        "denyDep": function () {
          function denyDep(ref) {
            return act('deny_region', {
              region: ref
            });
          }

          return denyDep;
        }()
      })]
    })
  });
};

exports.AirlockElectronics = AirlockElectronics;

/***/ }),

/***/ "./packages/tgui/interfaces/Apc.js":
/*!*****************************************!*\
  !*** ./packages/tgui/interfaces/Apc.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Apc = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _InterfaceLockNoticeBox = __webpack_require__(/*! ./common/InterfaceLockNoticeBox */ "./packages/tgui/interfaces/common/InterfaceLockNoticeBox.js");

var Apc = function Apc(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 450,
    "height": 445,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, ApcContent)
    })
  });
};

exports.Apc = Apc;
var powerStatusMap = {
  2: {
    color: 'good',
    externalPowerText: 'External Power',
    chargingText: 'Fully Charged'
  },
  1: {
    color: 'average',
    externalPowerText: 'Low External Power',
    chargingText: 'Charging'
  },
  0: {
    color: 'bad',
    externalPowerText: 'No External Power',
    chargingText: 'Not Charging'
  }
};
var malfMap = {
  1: {
    icon: 'terminal',
    content: 'Override Programming',
    action: 'hack'
  },
  2: {
    icon: 'caret-square-down',
    content: 'Shunt Core Process',
    action: 'occupy'
  },
  3: {
    icon: 'caret-square-left',
    content: 'Return to Main Core',
    action: 'deoccupy'
  },
  4: {
    icon: 'caret-square-down',
    content: 'Shunt Core Process',
    action: 'occupy'
  }
};

var ApcContent = function ApcContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var locked = data.locked && !data.siliconUser;
  var externalPowerStatus = powerStatusMap[data.externalPower] || powerStatusMap[0];
  var chargingStatus = powerStatusMap[data.chargingStatus] || powerStatusMap[0];
  var channelArray = data.powerChannels || [];
  var malfStatus = malfMap[data.malfStatus] || malfMap[0];
  var adjustedCellChange = data.powerCellStatus / 100;

  if (data.failTime > 0) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: [(0, _inferno.createVNode)(1, "b", null, (0, _inferno.createVNode)(1, "h3", null, "SYSTEM FAILURE", 16), 2), (0, _inferno.createVNode)(1, "i", null, "I/O regulators malfunction detected! Waiting for system reboot...", 16), (0, _inferno.createVNode)(1, "br"), "Automatic reboot in ", data.failTime, " seconds...", (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "sync",
        "content": "Reboot Now",
        "onClick": function () {
          function onClick() {
            return act('reboot');
          }

          return onClick;
        }()
      })]
    });
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _InterfaceLockNoticeBox.InterfaceLockNoticeBox), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Power Status",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Main Breaker",
        "color": externalPowerStatus.color,
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.isOperating ? 'power-off' : 'times',
          "content": data.isOperating ? 'On' : 'Off',
          "selected": data.isOperating && !locked,
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('breaker');
            }

            return onClick;
          }()
        }),
        children: ["[ ", externalPowerStatus.externalPowerText, " ]"]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Power Cell",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "color": "good",
          "value": adjustedCellChange
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Charge Mode",
        "color": chargingStatus.color,
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.chargeMode ? 'sync' : 'close',
          "content": data.chargeMode ? 'Auto' : 'Off',
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('charge');
            }

            return onClick;
          }()
        }),
        children: ["[ ", chargingStatus.chargingText, " ]"]
      })]
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Power Channels",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [channelArray.map(function (channel) {
        var topicParams = channel.topicParams;
        return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": channel.title,
          "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "mx": 2,
            "color": channel.status >= 2 ? 'good' : 'bad',
            children: channel.status >= 2 ? 'On' : 'Off'
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "sync",
            "content": "Auto",
            "selected": !locked && (channel.status === 1 || channel.status === 3),
            "disabled": locked,
            "onClick": function () {
              function onClick() {
                return act('channel', topicParams.auto);
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "power-off",
            "content": "On",
            "selected": !locked && channel.status === 2,
            "disabled": locked,
            "onClick": function () {
              function onClick() {
                return act('channel', topicParams.on);
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "times",
            "content": "Off",
            "selected": !locked && channel.status === 0,
            "disabled": locked,
            "onClick": function () {
              function onClick() {
                return act('channel', topicParams.off);
              }

              return onClick;
            }()
          })], 4),
          children: channel.powerLoad
        }, channel.title);
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Total Load",
        children: (0, _inferno.createVNode)(1, "b", null, data.totalLoad, 0)
      })]
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Misc",
    "buttons": !!data.siliconUser && (0, _inferno.createFragment)([!!data.malfStatus && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": malfStatus.icon,
      "content": malfStatus.content,
      "color": "bad",
      "onClick": function () {
        function onClick() {
          return act(malfStatus.action);
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "lightbulb-o",
      "content": "Overload",
      "onClick": function () {
        function onClick() {
          return act('overload');
        }

        return onClick;
      }()
    })], 0),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Cover Lock",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.coverLocked ? 'lock' : 'unlock',
          "content": data.coverLocked ? 'Engaged' : 'Disengaged',
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('cover');
            }

            return onClick;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Emergency Lighting",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "lightbulb-o",
          "content": data.emergencyLights ? 'Enabled' : 'Disabled',
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('emergency_lighting');
            }

            return onClick;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Night Shift Lighting",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "lightbulb-o",
          "content": data.nightshiftLights ? 'Enabled' : 'Disabled',
          "onClick": function () {
            function onClick() {
              return act('toggle_nightshift');
            }

            return onClick;
          }()
        })
      }), data.hijackable === 1 && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "title": "Hijacking",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "unlock",
          "content": "Hijack",
          "disabled": data.hijacker,
          "onClick": function () {
            function onClick() {
              return act('hijack');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "lock",
          "content": "Lockdown",
          "isabled": !data.lockdownavail && data.hijacked === 1,
          "onClick": function () {
            function onClick() {
              return act('lockdown');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "lightbulb-o",
          "content": "Drain",
          "disabled": !data.drainavail && data.hijacked === 1,
          "onClick": function () {
            function onClick() {
              return act('drain');
            }

            return onClick;
          }()
        })], 4)
      })]
    })
  })], 4);
};

/***/ }),

/***/ "./packages/tgui/interfaces/ApcControl.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/ApcControl.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ApcControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _PowerMonitor = __webpack_require__(/*! ./PowerMonitor */ "./packages/tgui/interfaces/PowerMonitor.js");

var ApcControl = function ApcControl(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "APC Controller",
    "width": 550,
    "height": 500,
    "resizable": true,
    children: [data.authenticated === 1 && (0, _inferno.createComponentVNode)(2, ApcLoggedIn), data.authenticated === 0 && (0, _inferno.createComponentVNode)(2, ApcLoggedOut)]
  });
};

exports.ApcControl = ApcControl;

var ApcLoggedOut = function ApcLoggedOut(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var emagged = data.emagged;
  var text = emagged === 1 ? 'Open' : 'Log In';
  return (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
    children: (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "color": emagged === 1 ? '' : 'good',
      "content": text,
      "onClick": function () {
        function onClick() {
          return act('log-in');
        }

        return onClick;
      }()
    })
  });
};

var ApcLoggedIn = function ApcLoggedIn(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var restoring = data.restoring;

  var _useLocalState = (0, _backend.useLocalState)(context, 'tab-index', 1),
      tabIndex = _useLocalState[0],
      setTabIndex = _useLocalState[1];

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Tabs, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
      "selected": tabIndex === 1,
      "onClick": function () {
        function onClick() {
          setTabIndex(1);
          act('check-apcs');
        }

        return onClick;
      }(),
      children: "APC Control Panel"
    }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
      "selected": tabIndex === 2,
      "onClick": function () {
        function onClick() {
          setTabIndex(2);
          act('check-logs');
        }

        return onClick;
      }(),
      children: "Log View Panel"
    })]
  }), restoring === 1 && (0, _inferno.createComponentVNode)(2, _components.Dimmer, {
    "fontSize": "32px",
    children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
      "name": "cog",
      "spin": true
    }), ' Resetting...']
  }), tabIndex === 1 && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, ControlPanel), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "fillPositionedParent": true,
    "top": "53px",
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, ApcControlScene)
    })
  })], 4), tabIndex === 2 && (0, _inferno.createComponentVNode)(2, _components.Box, {
    "fillPositionedParent": true,
    "top": "20px",
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, LogPanel)
    })
  })], 0);
};

var ControlPanel = function ControlPanel(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act,
      data = _useBackend4.data;

  var emagged = data.emagged,
      logging = data.logging;

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'sortByField', null),
      sortByField = _useLocalState2[0],
      setSortByField = _useLocalState2[1];

  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "mr": 2,
        "color": "label",
        children: "Sort by:"
      }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": sortByField === 'name',
        "content": "Name",
        "onClick": function () {
          function onClick() {
            return setSortByField(sortByField !== 'name' && 'name');
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": sortByField === 'charge',
        "content": "Charge",
        "onClick": function () {
          function onClick() {
            return setSortByField(sortByField !== 'charge' && 'charge');
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": sortByField === 'draw',
        "content": "Draw",
        "onClick": function () {
          function onClick() {
            return setSortByField(sortByField !== 'draw' && 'draw');
          }

          return onClick;
        }()
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: [emagged === 1 && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
        "color": logging === 1 ? 'bad' : 'good',
        "content": logging === 1 ? 'Stop Logging' : 'Restore Logging',
        "onClick": function () {
          function onClick() {
            return act('toggle-logs');
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "Reset Console",
        "onClick": function () {
          function onClick() {
            return act('restore-console');
          }

          return onClick;
        }()
      })], 4), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "color": "bad",
        "content": "Log Out",
        "onClick": function () {
          function onClick() {
            return act('log-out');
          }

          return onClick;
        }()
      })]
    })]
  });
};

var ApcControlScene = function ApcControlScene(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      data = _useBackend5.data,
      act = _useBackend5.act;

  var _useLocalState3 = (0, _backend.useLocalState)(context, 'sortByField', null),
      sortByField = _useLocalState3[0];

  var apcs = (0, _fp.flow)([(0, _collections.map)(function (apc, i) {
    return Object.assign({}, apc, {
      // Generate a unique id
      id: apc.name + i
    });
  }), sortByField === 'name' && (0, _collections.sortBy)(function (apc) {
    return apc.name;
  }), sortByField === 'charge' && (0, _collections.sortBy)(function (apc) {
    return -apc.charge;
  }), sortByField === 'draw' && (0, _collections.sortBy)(function (apc) {
    return -(0, _PowerMonitor.powerRank)(apc.load);
  }, function (apc) {
    return -parseFloat(apc.load);
  })])(data.apcs);
  return (0, _inferno.createComponentVNode)(2, _components.Table, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
      "header": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        children: "On/Off"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        children: "Area"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        children: "Charge"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        "textAlign": "right",
        children: "Draw"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        "title": "Equipment",
        children: "Eqp"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        "title": "Lighting",
        children: "Lgt"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        "title": "Environment",
        children: "Env"
      })]
    }), apcs.map(function (apc, i) {
      return (0, _inferno.createVNode)(1, "tr", "Table__row  candystripe", [(0, _inferno.createVNode)(1, "td", null, (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": apc.operating ? 'power-off' : 'times',
        "color": apc.operating ? 'good' : 'bad',
        "onClick": function () {
          function onClick() {
            return act('breaker', {
              ref: apc.ref
            });
          }

          return onClick;
        }()
      }), 2), (0, _inferno.createVNode)(1, "td", null, (0, _inferno.createComponentVNode)(2, _components.Button, {
        "onClick": function () {
          function onClick() {
            return act('access-apc', {
              ref: apc.ref
            });
          }

          return onClick;
        }(),
        children: apc.name
      }), 2), (0, _inferno.createVNode)(1, "td", "Table__cell text-right text-nowrap", (0, _inferno.createComponentVNode)(2, _PowerMonitor.AreaCharge, {
        "charging": apc.charging,
        "charge": apc.charge
      }), 2), (0, _inferno.createVNode)(1, "td", "Table__cell text-right text-nowrap", apc.load, 0), (0, _inferno.createVNode)(1, "td", "Table__cell text-center text-nowrap", (0, _inferno.createComponentVNode)(2, AreaStatusColorButton, {
        "target": "equipment",
        "status": apc.eqp,
        "apc": apc,
        "act": act
      }), 2), (0, _inferno.createVNode)(1, "td", "Table__cell text-center text-nowrap", (0, _inferno.createComponentVNode)(2, AreaStatusColorButton, {
        "target": "lighting",
        "status": apc.lgt,
        "apc": apc,
        "act": act
      }), 2), (0, _inferno.createVNode)(1, "td", "Table__cell text-center text-nowrap", (0, _inferno.createComponentVNode)(2, AreaStatusColorButton, {
        "target": "environ",
        "status": apc.env,
        "apc": apc,
        "act": act
      }), 2)], 4, null, apc.id);
    })]
  });
};

var LogPanel = function LogPanel(props, context) {
  var _useBackend6 = (0, _backend.useBackend)(context),
      data = _useBackend6.data;

  var logs = (0, _fp.flow)([(0, _collections.map)(function (line, i) {
    return Object.assign({}, line, {
      // Generate a unique id
      id: line.entry + i
    });
  }), function (logs) {
    return logs.reverse();
  }])(data.logs);
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "m": -0.5,
    children: logs.map(function (line) {
      return (0, _inferno.createComponentVNode)(2, _components.Box, {
        "p": 0.5,
        "className": "candystripe",
        "bold": true,
        children: line.entry
      }, line.id);
    })
  });
};

var AreaStatusColorButton = function AreaStatusColorButton(props) {
  var target = props.target,
      status = props.status,
      apc = props.apc,
      act = props.act;
  var power = Boolean(status & 2);
  var mode = Boolean(status & 1);
  return (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": mode ? 'sync' : 'power-off',
    "color": power ? 'good' : 'bad',
    "onClick": function () {
      function onClick() {
        return act('toggle-minor', {
          type: target,
          value: statusChange(status),
          ref: apc.ref
        });
      }

      return onClick;
    }()
  });
};

var statusChange = function statusChange(status) {
  // mode flip power flip both flip
  // 0, 2, 3
  return status === 0 ? 2 : status === 2 ? 3 : 0;
};

AreaStatusColorButton.defaultHooks = _react.pureComponentHooks;

/***/ }),

/***/ "./packages/tgui/interfaces/AtmosAlertConsole.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/AtmosAlertConsole.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AtmosAlertConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AtmosAlertConsole = function AtmosAlertConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var priorityAlerts = data.priority || [];
  var minorAlerts = data.minor || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 300,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Alarms",
        children: (0, _inferno.createVNode)(1, "ul", null, [priorityAlerts.length === 0 && (0, _inferno.createVNode)(1, "li", "color-good", "No Priority Alerts", 16), priorityAlerts.map(function (alert) {
          return (0, _inferno.createVNode)(1, "li", null, (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "times",
            "content": alert,
            "color": "bad",
            "onClick": function () {
              function onClick() {
                return act('clear', {
                  zone: alert
                });
              }

              return onClick;
            }()
          }), 2, null, alert);
        }), minorAlerts.length === 0 && (0, _inferno.createVNode)(1, "li", "color-good", "No Minor Alerts", 16), minorAlerts.map(function (alert) {
          return (0, _inferno.createVNode)(1, "li", null, (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "times",
            "content": alert,
            "color": "average",
            "onClick": function () {
              function onClick() {
                return act('clear', {
                  zone: alert
                });
              }

              return onClick;
            }()
          }), 2, null, alert);
        })], 0)
      })
    })
  });
};

exports.AtmosAlertConsole = AtmosAlertConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/AtmosControlConsole.js":
/*!*********************************************************!*\
  !*** ./packages/tgui/interfaces/AtmosControlConsole.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AtmosControlConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AtmosControlConsole = function AtmosControlConsole(props, context) {
  var _sensors$;

  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var sensors = data.sensors || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 315,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": !!data.tank && ((_sensors$ = sensors[0]) == null ? void 0 : _sensors$.long_name),
        children: sensors.map(function (sensor) {
          var gases = sensor.gases || {};
          return (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": !data.tank && sensor.long_name,
            "level": 2,
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Pressure",
                children: (0, _math.toFixed)(sensor.pressure, 2) + ' kPa'
              }), !!sensor.temperature && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Temperature",
                children: (0, _math.toFixed)(sensor.temperature, 2) + ' K'
              }), (0, _collections.map)(function (gasPercent, gasId) {
                return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": gasId,
                  children: (0, _math.toFixed)(gasPercent, 2) + '%'
                });
              })(gases)]
            })
          }, sensor.id_tag);
        })
      }), data.tank && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Controls",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "undo",
          "content": "Reconnect",
          "onClick": function () {
            function onClick() {
              return act('reconnect');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Input Injector",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.inputting ? 'power-off' : 'times',
              "content": data.inputting ? 'Injecting' : 'Off',
              "selected": data.inputting,
              "onClick": function () {
                function onClick() {
                  return act('input');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Input Rate",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": data.inputRate,
              "unit": "L/s",
              "width": "63px",
              "minValue": 0,
              "maxValue": 200,
              "suppressFlicker": 2000,
              "onChange": function () {
                function onChange(e, value) {
                  return act('rate', {
                    rate: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Output Regulator",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.outputting ? 'power-off' : 'times',
              "content": data.outputting ? 'Open' : 'Closed',
              "selected": data.outputting,
              "onClick": function () {
                function onClick() {
                  return act('output');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Output Pressure",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": parseFloat(data.outputPressure),
              "unit": "kPa",
              "width": "75px",
              "minValue": 0,
              "maxValue": 4500,
              "step": 10,
              "suppressFlicker": 2000,
              "onChange": function () {
                function onChange(e, value) {
                  return act('pressure', {
                    pressure: value
                  });
                }

                return onChange;
              }()
            })
          })]
        })
      })]
    })
  });
};

exports.AtmosControlConsole = AtmosControlConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/AtmosControlPanel.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/AtmosControlPanel.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AtmosControlPanel = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AtmosControlPanel = function AtmosControlPanel(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var groups = (0, _fp.flow)([(0, _collections.map)(function (group, i) {
    return Object.assign({}, group, {
      // Generate a unique id
      id: group.area + i
    });
  }), (0, _collections.sortBy)(function (group) {
    return group.id;
  })])(data.excited_groups);
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "SSAir Control Panel",
    "width": 900,
    "height": 500,
    "resizable": true,
    children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
      "m": 1,
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "justify": "space-between",
        "align": "baseline",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "onClick": function () {
              function onClick() {
                return act('toggle-freeze');
              }

              return onClick;
            }(),
            "color": data.frozen === 1 ? 'good' : 'bad',
            children: data.frozen === 1 ? 'Freeze Subsystem' : 'Unfreeze Subsystem'
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: ["Fire Cnt: ", data.fire_count]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: ["Active Turfs: ", data.active_size]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: ["Excited Groups: ", data.excited_size]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: ["Hotspots: ", data.hotspots_size]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: ["Superconductors: ", data.conducting_size]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
            "checked": data.showing_user,
            "onClick": function () {
              function onClick() {
                return act('toggle_user_display');
              }

              return onClick;
            }(),
            children: "Personal View"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
            "checked": data.show_all,
            "onClick": function () {
              function onClick() {
                return act('toggle_show_all');
              }

              return onClick;
            }(),
            children: "Display all"
          })
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "fillPositionedParent": true,
      "top": "45px",
      children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
        "scrollable": true,
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          children: (0, _inferno.createComponentVNode)(2, _components.Table, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              "header": true,
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: "Area Name"
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                children: "Breakdown"
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                children: "Dismantle"
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                children: "Turfs"
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                children: data.display_max === 1 && "Max Share"
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                children: "Display"
              })]
            }), groups.map(function (group) {
              return (0, _inferno.createVNode)(1, "tr", null, [(0, _inferno.createVNode)(1, "td", null, (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": group.area,
                "onClick": function () {
                  function onClick() {
                    return act('move-to-target', {
                      spot: group.jump_to
                    });
                  }

                  return onClick;
                }()
              }), 2), (0, _inferno.createVNode)(1, "td", null, group.breakdown, 0), (0, _inferno.createVNode)(1, "td", null, group.dismantle, 0), (0, _inferno.createVNode)(1, "td", null, group.size, 0), (0, _inferno.createVNode)(1, "td", null, data.display_max === 1 && group.max_share, 0), (0, _inferno.createVNode)(1, "td", null, (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
                "checked": group.should_show,
                "onClick": function () {
                  function onClick() {
                    return act('toggle_show_group', {
                      group: group.group
                    });
                  }

                  return onClick;
                }()
              }), 2)], 4, null, group.id);
            })]
          })
        })
      })
    })]
  });
};

exports.AtmosControlPanel = AtmosControlPanel;

/***/ }),

/***/ "./packages/tgui/interfaces/AtmosFilter.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/AtmosFilter.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AtmosFilter = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AtmosFilter = function AtmosFilter(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var filterTypes = data.filter_types || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 390,
    "height": 187,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.on ? 'power-off' : 'times',
              "content": data.on ? 'On' : 'Off',
              "selected": data.on,
              "onClick": function () {
                function onClick() {
                  return act('power');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Transfer Rate",
            children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": parseFloat(data.rate),
              "width": "63px",
              "unit": "L/s",
              "minValue": 0,
              "maxValue": 200,
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('rate', {
                    rate: value
                  });
                }

                return onDrag;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "plus",
              "content": "Max",
              "disabled": data.rate === data.max_rate,
              "onClick": function () {
                function onClick() {
                  return act('rate', {
                    rate: 'max'
                  });
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Filter",
            children: filterTypes.map(function (filter) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "selected": filter.selected,
                "content": (0, _constants.getGasLabel)(filter.id, filter.name),
                "onClick": function () {
                  function onClick() {
                    return act('filter', {
                      mode: filter.id
                    });
                  }

                  return onClick;
                }()
              }, filter.id);
            })
          })]
        })
      })
    })
  });
};

exports.AtmosFilter = AtmosFilter;

/***/ }),

/***/ "./packages/tgui/interfaces/AtmosMixer.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/AtmosMixer.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AtmosMixer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AtmosMixer = function AtmosMixer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 370,
    "height": 165,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.on ? 'power-off' : 'times',
              "content": data.on ? 'On' : 'Off',
              "selected": data.on,
              "onClick": function () {
                function onClick() {
                  return act('power');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Output Pressure",
            children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": parseFloat(data.set_pressure),
              "unit": "kPa",
              "width": "75px",
              "minValue": 0,
              "maxValue": 4500,
              "step": 10,
              "onChange": function () {
                function onChange(e, value) {
                  return act('pressure', {
                    pressure: value
                  });
                }

                return onChange;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "plus",
              "content": "Max",
              "disabled": data.set_pressure === data.max_pressure,
              "onClick": function () {
                function onClick() {
                  return act('pressure', {
                    pressure: 'max'
                  });
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Node 1",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": data.node1_concentration,
              "unit": "%",
              "width": "60px",
              "minValue": 0,
              "maxValue": 100,
              "stepPixelSize": 2,
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('node1', {
                    concentration: value
                  });
                }

                return onDrag;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Node 2",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": data.node2_concentration,
              "unit": "%",
              "width": "60px",
              "minValue": 0,
              "maxValue": 100,
              "stepPixelSize": 2,
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('node2', {
                    concentration: value
                  });
                }

                return onDrag;
              }()
            })
          })]
        })
      })
    })
  });
};

exports.AtmosMixer = AtmosMixer;

/***/ }),

/***/ "./packages/tgui/interfaces/AtmosPump.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/AtmosPump.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AtmosPump = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AtmosPump = function AtmosPump(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 335,
    "height": 115,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.on ? 'power-off' : 'times',
              "content": data.on ? 'On' : 'Off',
              "selected": data.on,
              "onClick": function () {
                function onClick() {
                  return act('power');
                }

                return onClick;
              }()
            })
          }), data.max_rate ? (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Transfer Rate",
            children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": parseFloat(data.rate),
              "width": "63px",
              "unit": "L/s",
              "minValue": 0,
              "maxValue": 200,
              "onChange": function () {
                function onChange(e, value) {
                  return act('rate', {
                    rate: value
                  });
                }

                return onChange;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "plus",
              "content": "Max",
              "disabled": data.rate === data.max_rate,
              "onClick": function () {
                function onClick() {
                  return act('rate', {
                    rate: 'max'
                  });
                }

                return onClick;
              }()
            })]
          }) : (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Output Pressure",
            children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": parseFloat(data.pressure),
              "unit": "kPa",
              "width": "75px",
              "minValue": 0,
              "maxValue": 4500,
              "step": 10,
              "onChange": function () {
                function onChange(e, value) {
                  return act('pressure', {
                    pressure: value
                  });
                }

                return onChange;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "plus",
              "content": "Max",
              "disabled": data.pressure === data.max_pressure,
              "onClick": function () {
                function onClick() {
                  return act('pressure', {
                    pressure: 'max'
                  });
                }

                return onClick;
              }()
            })]
          })]
        })
      })
    })
  });
};

exports.AtmosPump = AtmosPump;

/***/ }),

/***/ "./packages/tgui/interfaces/AtmosRelief.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/AtmosRelief.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AtmosRelief = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var AtmosRelief = function AtmosRelief(props, context) {
  // rebranded AtmoPump
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 335,
    "height": 115,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Open Pressure",
            children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": parseFloat(data.open_pressure),
              "unit": "kPa",
              "width": "75px",
              "minValue": 0,
              "maxValue": data.max_pressure || 4500,
              "step": 10,
              "onChange": function () {
                function onChange(e, value) {
                  return act('open_pressure', {
                    pressure: value
                  });
                }

                return onChange;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "plus",
              "content": "Max",
              "disabled": data.open_pressure === data.max_pressure,
              "onClick": function () {
                function onClick() {
                  return act('open_pressure', {
                    pressure: 'max'
                  });
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Close Pressure",
            children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": parseFloat(data.close_pressure),
              "unit": "kPa",
              "width": "75px",
              "minValue": 0,
              "maxValue": data.max_pressure || 4500,
              "step": 10,
              "onChange": function () {
                function onChange(e, value) {
                  return act('close_pressure', {
                    pressure: value
                  });
                }

                return onChange;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "plus",
              "content": "Max",
              "disabled": data.close_pressure === data.max_pressure,
              "onClick": function () {
                function onClick() {
                  return act('close_pressure', {
                    pressure: 'max'
                  });
                }

                return onClick;
              }()
            })]
          })]
        })
      })
    })
  });
};

exports.AtmosRelief = AtmosRelief;

/***/ }),

/***/ "./packages/tgui/interfaces/AutomatedAnnouncement.js":
/*!***********************************************************!*\
  !*** ./packages/tgui/interfaces/AutomatedAnnouncement.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AutomatedAnnouncement = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var TOOLTIP_TEXT = "%PERSON will be replaced with their name.\n%RANK with their job.";

var AutomatedAnnouncement = function AutomatedAnnouncement(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var arrivalToggle = data.arrivalToggle,
      arrival = data.arrival,
      newheadToggle = data.newheadToggle,
      newhead = data.newhead;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Automated Announcement System",
    "width": 500,
    "height": 225,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Arrival Announcement",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": arrivalToggle ? 'power-off' : 'times',
          "selected": arrivalToggle,
          "content": arrivalToggle ? 'On' : 'Off',
          "onClick": function () {
            function onClick() {
              return act('ArrivalToggle');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Message",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "info",
              "tooltip": TOOLTIP_TEXT,
              "tooltipPosition": "left"
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "fluid": true,
              "value": arrival,
              "onChange": function () {
                function onChange(e, value) {
                  return act('ArrivalText', {
                    newText: value
                  });
                }

                return onChange;
              }()
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Departmental Head Announcement",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": newheadToggle ? 'power-off' : 'times',
          "selected": newheadToggle,
          "content": newheadToggle ? 'On' : 'Off',
          "onClick": function () {
            function onClick() {
              return act('NewheadToggle');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Message",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "info",
              "tooltip": TOOLTIP_TEXT,
              "tooltipPosition": "left"
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "fluid": true,
              "value": newhead,
              "onChange": function () {
                function onChange(e, value) {
                  return act('NewheadText', {
                    newText: value
                  });
                }

                return onChange;
              }()
            })
          })
        })
      })]
    })
  });
};

exports.AutomatedAnnouncement = AutomatedAnnouncement;

/***/ }),

/***/ "./packages/tgui/interfaces/BankMachine.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/BankMachine.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BankMachine = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var BankMachine = function BankMachine(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var current_balance = data.current_balance,
      siphoning = data.siphoning,
      station_name = data.station_name;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 155,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        "danger": true,
        children: "Authorized personnel only"
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": station_name + ' Vault',
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Balance",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": siphoning ? 'times' : 'sync',
              "content": siphoning ? 'Stop Siphoning' : 'Siphon Credits',
              "selected": siphoning,
              "onClick": function () {
                function onClick() {
                  return act(siphoning ? 'halt' : 'siphon');
                }

                return onClick;
              }()
            }),
            children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "value": current_balance,
              "format": function () {
                function format(value) {
                  return (0, _format.formatMoney)(value);
                }

                return format;
              }()
            }), ' cr']
          })
        })
      })]
    })
  });
};

exports.BankMachine = BankMachine;

/***/ }),

/***/ "./packages/tgui/interfaces/Bepis.js":
/*!*******************************************!*\
  !*** ./packages/tgui/interfaces/Bepis.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Bepis = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Bepis = function Bepis(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var amount = data.amount;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 480,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Business Exploration Protocol Incubation Sink",
        children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Information",
          "backgroundColor": "#450F44",
          "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "power-off",
            "content": data.manual_power ? 'Off' : 'On',
            "selected": !data.manual_power,
            "onClick": function () {
              function onClick() {
                return act('toggle_power');
              }

              return onClick;
            }()
          }),
          children: "All you need to know about the B.E.P.I.S. and you! The B.E.P.I.S. performs hundreds of tests a second using electrical and financial resources to invent new products, or discover new technologies otherwise overlooked for being too risky or too niche to produce!"
        }), (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Payer's Account",
          "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "redo-alt",
            "content": "Reset Account",
            "onClick": function () {
              function onClick() {
                return act('account_reset');
              }

              return onClick;
            }()
          }),
          children: ["Console is currently being operated by ", data.account_owner ? data.account_owner : 'no one', "."]
        }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            "size": 1.5,
            children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
              "title": "Stored Data and Statistics",
              children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
                children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": "Deposited Credits",
                  children: data.stored_cash
                }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": "Investment Variability",
                  children: [data.accuracy_percentage, "%"]
                }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": "Innovation Bonus",
                  children: data.positive_cash_offset
                }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": "Risk Offset",
                  "color": "bad",
                  children: data.negative_cash_offset
                }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": "Deposit Amount",
                  children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
                    "value": amount,
                    "unit": "Credits",
                    "minValue": 100,
                    "maxValue": 30000,
                    "step": 100,
                    "stepPixelSize": 2,
                    "onChange": function () {
                      function onChange(e, value) {
                        return act('amount', {
                          amount: value
                        });
                      }

                      return onChange;
                    }()
                  })
                })]
              })
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "donate",
                "content": "Deposit Credits",
                "disabled": data.manual_power === 1 || data.silicon_check === 1,
                "onClick": function () {
                  function onClick() {
                    return act('deposit_cash');
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "eject",
                "content": "Withdraw Credits",
                "disabled": data.manual_power === 1,
                "onClick": function () {
                  function onClick() {
                    return act('withdraw_cash');
                  }

                  return onClick;
                }()
              })]
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Section, {
              "title": "Market Data and Analysis",
              children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
                children: ["Average technology cost: ", data.mean_value]
              }), (0, _inferno.createComponentVNode)(2, _components.Box, {
                children: ["Current chance of Success: Est. ", data.success_estimate, "%"]
              }), data.error_name && (0, _inferno.createComponentVNode)(2, _components.Box, {
                "color": "bad",
                children: "Previous Failure Reason: Deposited cash value too low. Please insert more money for future success."
              }), (0, _inferno.createComponentVNode)(2, _components.Box, {
                "m": 1
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "microscope",
                "disabled": data.manual_power === 1,
                "onClick": function () {
                  function onClick() {
                    return act('begin_experiment');
                  }

                  return onClick;
                }(),
                "content": "Begin Testing"
              })]
            })
          })]
        })]
      })
    })
  });
};

exports.Bepis = Bepis;

/***/ }),

/***/ "./packages/tgui/interfaces/Biogenerator.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/Biogenerator.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BiogeneratorContent = exports.Biogenerator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var MAX_SEARCH_RESULTS = 25;

var Biogenerator = function Biogenerator(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var beaker = data.beaker,
      processing = data.processing;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 550,
    "height": 380,
    "resizable": true,
    children: [!!processing && (0, _inferno.createComponentVNode)(2, _components.Dimmer, {
      "fontSize": "32px",
      children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
        "name": "cog",
        "spin": 1
      }), ' Processing...']
    }), (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [!beaker && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No Container"
      }), !!beaker && (0, _inferno.createComponentVNode)(2, BiogeneratorContent)]
    })]
  });
};

exports.Biogenerator = Biogenerator;

var BiogeneratorContent = function BiogeneratorContent(props, context) {
  var _categories$, _categories$find;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var biomass = data.biomass,
      can_process = data.can_process,
      _data$categories = data.categories,
      categories = _data$categories === void 0 ? [] : _data$categories;

  var _useLocalState = (0, _backend.useLocalState)(context, 'searchText', ''),
      searchText = _useLocalState[0],
      setSearchText = _useLocalState[1];

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'category', (_categories$ = categories[0]) == null ? void 0 : _categories$.name),
      selectedCategory = _useLocalState2[0],
      setSelectedCategory = _useLocalState2[1];

  var testSearch = (0, _string.createSearch)(searchText, function (item) {
    return item.name;
  });
  var items = searchText.length > 0 // Flatten all categories and apply search to it
  && categories.flatMap(function (category) {
    return category.items || [];
  }).filter(testSearch).filter(function (item, i) {
    return i < MAX_SEARCH_RESULTS;
  }) // Select a category and show all items in it
  || ((_categories$find = categories.find(function (category) {
    return category.name === selectedCategory;
  })) == null ? void 0 : _categories$find.items) // If none of that results in a list, return an empty list
  || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": biomass > 0 ? 'good' : 'bad',
      children: [(0, _format.formatMoney)(biomass), " Biomass"]
    }),
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("Search"), (0, _inferno.createComponentVNode)(2, _components.Input, {
      "autoFocus": true,
      "value": searchText,
      "onInput": function () {
        function onInput(e, value) {
          return setSearchText(value);
        }

        return onInput;
      }(),
      "mx": 1
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "content": "Eject",
      "onClick": function () {
        function onClick() {
          return act('detach');
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "cog",
      "content": "Activate",
      "disabled": !can_process,
      "onClick": function () {
        function onClick() {
          return act('activate');
        }

        return onClick;
      }()
    })], 4),
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: [searchText.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
          "vertical": true,
          children: categories.map(function (category) {
            var _category$items;

            return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": category.name === selectedCategory,
              "onClick": function () {
                function onClick() {
                  return setSelectedCategory(category.name);
                }

                return onClick;
              }(),
              children: [category.name, " (", ((_category$items = category.items) == null ? void 0 : _category$items.length) || 0, ")"]
            }, category.name);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        "basis": 0,
        children: [items.length === 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: searchText.length === 0 ? 'No items in this category.' : 'No results found.'
        }), (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: (0, _inferno.createComponentVNode)(2, ItemList, {
            "biomass": biomass,
            "items": items
          })
        })]
      })]
    })
  });
};

exports.BiogeneratorContent = BiogeneratorContent;

var ItemList = function ItemList(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act;

  var _useLocalState3 = (0, _backend.useLocalState)(context, 'hoveredItem', {}),
      hoveredItem = _useLocalState3[0],
      setHoveredItem = _useLocalState3[1];

  var hoveredCost = hoveredItem && hoveredItem.cost || 0; // Append extra hover data to items

  var items = props.items.map(function (item) {
    var _useLocalState4 = (0, _backend.useLocalState)(context, "amount" + item.name, 1),
        amount = _useLocalState4[0],
        setAmount = _useLocalState4[1];

    var notSameItem = hoveredItem && hoveredItem.name !== item.name;
    var notEnoughHovered = props.biomass - hoveredCost * hoveredItem.amount < item.cost * amount;
    var disabledDueToHovered = notSameItem && notEnoughHovered;
    var disabled = props.biomass < item.cost * amount || disabledDueToHovered;
    return Object.assign({}, item, {
      disabled: disabled,
      amount: amount,
      setAmount: setAmount
    });
  });
  return items.map(function (item) {
    return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        children: [(0, _inferno.createVNode)(1, "span", (0, _react.classes)(['design32x32', item.id]), null, 1, {
          "style": {
            'vertical-align': 'middle'
          }
        }), ' ', (0, _inferno.createVNode)(1, "b", null, item.name, 0)]
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": Math.round(item.amount),
          "width": "35px",
          "minValue": 1,
          "maxValue": 10,
          "onChange": function () {
            function onChange(e, value) {
              return item.setAmount(value);
            }

            return onChange;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "style": {
            'text-align': 'right'
          },
          "fluid": true,
          "content": item.cost * item.amount + ' ' + "BIO",
          "disabled": item.disabled,
          "onmouseover": function () {
            function onmouseover() {
              return setHoveredItem(item);
            }

            return onmouseover;
          }(),
          "onmouseout": function () {
            function onmouseout() {
              return setHoveredItem({});
            }

            return onmouseout;
          }(),
          "onClick": function () {
            function onClick() {
              return act('create', {
                id: item.id,
                amount: item.amount
              });
            }

            return onClick;
          }()
        })
      })]
    }, item.id);
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/BlackmarketUplink.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/BlackmarketUplink.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BlackMarketUplink = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var BlackMarketUplink = function BlackMarketUplink(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$categories = data.categories,
      categories = _data$categories === void 0 ? [] : _data$categories,
      _data$markets = data.markets,
      markets = _data$markets === void 0 ? [] : _data$markets,
      _data$items = data.items,
      items = _data$items === void 0 ? [] : _data$items,
      money = data.money,
      viewing_market = data.viewing_market,
      viewing_category = data.viewing_category;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 600,
    "height": 480,
    "theme": "hackerman",
    "resizable": true,
    children: [(0, _inferno.createComponentVNode)(2, ShipmentSelector), (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Black Market Uplink",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "bold": true,
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": money,
            "format": function () {
              function format(value) {
                return (0, _format.formatMoney)(value) + ' cr';
              }

              return format;
            }()
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: markets.map(function (market) {
          return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
            "selected": market.id === viewing_market,
            "onClick": function () {
              function onClick() {
                return act('set_market', {
                  market: market.id
                });
              }

              return onClick;
            }(),
            children: market.name
          }, market.id);
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
            "vertical": true,
            children: categories.map(function (category) {
              return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
                "mt": 0.5,
                "selected": viewing_category === category,
                "onClick": function () {
                  function onClick() {
                    return act('set_category', {
                      category: category
                    });
                  }

                  return onClick;
                }(),
                children: category
              }, category);
            })
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          "basis": 0,
          children: items.map(function (item) {
            return (0, _inferno.createComponentVNode)(2, _components.Box, {
              "className": "candystripe",
              "p": 1,
              "pb": 2,
              children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
                "spacing": 1,
                "align": "baseline",
                children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                  "bold": true,
                  "grow": 1,
                  children: item.name
                }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                  "color": "label",
                  children: item.amount ? item.amount + " in stock" : "Out of stock"
                }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                  children: (0, _format.formatMoney)(item.cost) + ' cr'
                }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                  children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                    "content": "Buy",
                    "disabled": !item.amount || item.cost > money,
                    "onClick": function () {
                      function onClick() {
                        return act('select', {
                          item: item.id
                        });
                      }

                      return onClick;
                    }()
                  })
                })]
              }), item.desc]
            }, item.name);
          })
        })]
      })]
    })]
  });
};

exports.BlackMarketUplink = BlackMarketUplink;

var ShipmentSelector = function ShipmentSelector(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var buying = data.buying,
      ltsrbt_built = data.ltsrbt_built,
      money = data.money;

  if (!buying) {
    return null;
  }

  var deliveryMethods = data.delivery_methods.map(function (method) {
    var description = data.delivery_method_description[method.name];
    return Object.assign({}, method, {
      description: description
    });
  });
  return (0, _inferno.createComponentVNode)(2, _components.Modal, {
    "textAlign": "center",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
      "mb": 1,
      children: deliveryMethods.map(function (method) {
        if (method.name === 'LTSRBT' && !ltsrbt_built) {
          return null;
        }

        return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mx": 1,
          "width": "250px",
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "fontSize": "30px",
            children: method.name
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "mt": 1,
            children: method.description
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "mt": 2,
            "content": (0, _format.formatMoney)(method.price) + ' cr',
            "disabled": money < method.price,
            "onClick": function () {
              function onClick() {
                return act('buy', {
                  method: method.name
                });
              }

              return onClick;
            }()
          })]
        }, method.name);
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Cancel",
      "color": "bad",
      "onClick": function () {
        function onClick() {
          return act('cancel');
        }

        return onClick;
      }()
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/BluespaceArtillery.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/BluespaceArtillery.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BluespaceArtillery = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var BluespaceArtillery = function BluespaceArtillery(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var notice = data.notice,
      connected = data.connected,
      unlocked = data.unlocked,
      target = data.target;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 220,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [!!notice && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: notice
      }), connected ? (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Target",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "crosshairs",
          "disabled": !unlocked,
          "onClick": function () {
            function onClick() {
              return act('recalibrate');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": target ? 'average' : 'bad',
          "fontSize": "25px",
          children: target || 'No Target Set'
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: unlocked ? (0, _inferno.createComponentVNode)(2, _components.Box, {
          "style": {
            margin: 'auto'
          },
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "content": "FIRE",
            "color": "bad",
            "disabled": !target,
            "fontSize": "30px",
            "textAlign": "center",
            "lineHeight": "46px",
            "onClick": function () {
              function onClick() {
                return act('fire');
              }

              return onClick;
            }()
          })
        }) : (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "bad",
          "fontSize": "18px",
          children: "Bluespace artillery is currently locked."
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mt": 1,
          children: "Awaiting authorization via keycard reader from at minimum two station heads."
        })], 4)
      })], 4) : (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Maintenance",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "wrench",
              "content": "Complete Deployment",
              "onClick": function () {
                function onClick() {
                  return act('build');
                }

                return onClick;
              }()
            })
          })
        })
      })]
    })
  });
};

exports.BluespaceArtillery = BluespaceArtillery;

/***/ }),

/***/ "./packages/tgui/interfaces/BluespaceLocator.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/BluespaceLocator.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BluespaceLocator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var directionToIcon = {
  north: 0,
  northeast: 45,
  east: 90,
  southeast: 135,
  south: 180,
  southwest: 225,
  west: 270,
  northwest: 315
};

var BluespaceLocator = function BluespaceLocator(props, context) {
  var _useSharedState = (0, _backend.useSharedState)(context, "tab", "implant"),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 300,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === "implant",
          "onClick": function () {
            function onClick() {
              return setTab("implant");
            }

            return onClick;
          }(),
          children: "Implants"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === "beacon",
          "onClick": function () {
            function onClick() {
              return setTab("beacon");
            }

            return onClick;
          }(),
          children: "Teleporter Beacons"
        })]
      }), tab === "beacon" && (0, _inferno.createComponentVNode)(2, TeleporterBeacons) || tab === "implant" && (0, _inferno.createComponentVNode)(2, TrackingImplants)]
    })
  });
};

exports.BluespaceLocator = BluespaceLocator;

var TeleporterBeacons = function TeleporterBeacons(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var telebeacons = data.telebeacons;
  return telebeacons.map(function (beacon) {
    return (0, _inferno.createComponentVNode)(2, SignalLocator, {
      "name": beacon.name,
      "distance": beacon.distance,
      "direction": directionToIcon[beacon.direction]
    }, beacon.name);
  });
};

var TrackingImplants = function TrackingImplants(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      data = _useBackend2.data;

  var trackimplants = data.trackimplants;
  return trackimplants.map(function (implant) {
    return (0, _inferno.createComponentVNode)(2, SignalLocator, {
      "name": implant.name,
      "distance": implant.distance,
      "direction": directionToIcon[implant.direction]
    }, implant.name);
  });
};

var SignalLocator = function SignalLocator(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      data = _useBackend3.data;

  var trackingrange = data.trackingrange;
  var name = props.name,
      direction = props.direction,
      distance = props.distance;
  return (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
    "mb": 1,
    "value": trackingrange - distance,
    "minValue": 0,
    "maxValue": trackingrange,
    "ranges": {
      red: [0, trackingrange / 3],
      yellow: [trackingrange / 3, 2 * (trackingrange / 3)],
      green: [2 * (trackingrange / 3), trackingrange]
    },
    children: [name, (0, _inferno.createComponentVNode)(2, _components.Icon, {
      "ml": 2,
      "name": "arrow-up",
      "rotation": direction
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/BorgPanel.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/BorgPanel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BorgPanel = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var BorgPanel = function BorgPanel(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var borg = data.borg || {};
  var cell = data.cell || {};
  var cellPercent = cell.charge / cell.maxcharge;
  var channels = data.channels || [];
  var modules = data.modules || [];
  var upgrades = data.upgrades || [];
  var ais = data.ais || [];
  var laws = data.laws || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Borg Panel",
    "width": 700,
    "height": 700,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": borg.name,
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "pencil-alt",
          "content": "Rename",
          "onClick": function () {
            function onClick() {
              return act('rename');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": borg.emagged ? 'check-square-o' : 'square-o',
              "content": "Emagged",
              "selected": borg.emagged,
              "onClick": function () {
                function onClick() {
                  return act('toggle_emagged');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": borg.lockdown ? 'check-square-o' : 'square-o',
              "content": "Locked Down",
              "selected": borg.lockdown,
              "onClick": function () {
                function onClick() {
                  return act('toggle_lockdown');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": borg.scrambledcodes ? 'check-square-o' : 'square-o',
              "content": "Scrambled Codes",
              "selected": borg.scrambledcodes,
              "onClick": function () {
                function onClick() {
                  return act('toggle_scrambledcodes');
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Charge",
            children: [!cell.missing ? (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": cellPercent,
              children: cell.charge + ' / ' + cell.maxcharge
            }) : (0, _inferno.createVNode)(1, "span", "color-bad", "No cell installed", 16), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "pencil-alt",
              "content": "Set",
              "onClick": function () {
                function onClick() {
                  return act('set_charge');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "eject",
              "content": "Change",
              "onClick": function () {
                function onClick() {
                  return act('change_cell');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "trash",
              "content": "Remove",
              "color": "bad",
              "onClick": function () {
                function onClick() {
                  return act('remove_cell');
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Radio Channels",
            children: channels.map(function (channel) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": channel.installed ? 'check-square-o' : 'square-o',
                "content": channel.name,
                "selected": channel.installed,
                "onClick": function () {
                  function onClick() {
                    return act('toggle_radio', {
                      channel: channel.name
                    });
                  }

                  return onClick;
                }()
              }, channel.name);
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Module",
            children: modules.map(function (module) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": borg.active_module === module.type ? 'check-square-o' : 'square-o',
                "content": module.name,
                "selected": borg.active_module === module.type,
                "onClick": function () {
                  function onClick() {
                    return act('setmodule', {
                      module: module.type
                    });
                  }

                  return onClick;
                }()
              }, module.type);
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Upgrades",
            children: upgrades.map(function (upgrade) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": upgrade.installed ? 'check-square-o' : 'square-o',
                "content": upgrade.name,
                "selected": upgrade.installed,
                "onClick": function () {
                  function onClick() {
                    return act('toggle_upgrade', {
                      upgrade: upgrade.type
                    });
                  }

                  return onClick;
                }()
              }, upgrade.type);
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Master AI",
            children: ais.map(function (ai) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": ai.connected ? 'check-square-o' : 'square-o',
                "content": ai.name,
                "selected": ai.connected,
                "onClick": function () {
                  function onClick() {
                    return act('slavetoai', {
                      slavetoai: ai.ref
                    });
                  }

                  return onClick;
                }()
              }, ai.ref);
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Laws",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": borg.lawupdate ? 'check-square-o' : 'square-o',
          "content": "Lawsync",
          "selected": borg.lawupdate,
          "onClick": function () {
            function onClick() {
              return act('toggle_lawupdate');
            }

            return onClick;
          }()
        }),
        children: laws.map(function (law) {
          return (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: law
          }, law);
        })
      })]
    })
  });
};

exports.BorgPanel = BorgPanel;

/***/ }),

/***/ "./packages/tgui/interfaces/BrigTimer.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/BrigTimer.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BrigTimer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var BrigTimer = function BrigTimer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 138,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Cell Timer",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "clock-o",
          "content": data.timing ? 'Stop' : 'Start',
          "selected": data.timing,
          "onClick": function () {
            function onClick() {
              return act(data.timing ? 'stop' : 'start');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "lightbulb-o",
          "content": data.flash_charging ? 'Recharging' : 'Flash',
          "disabled": data.flash_charging,
          "onClick": function () {
            function onClick() {
              return act('flash');
            }

            return onClick;
          }()
        })], 4),
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "fast-backward",
          "onClick": function () {
            function onClick() {
              return act('time', {
                adjust: -600
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "backward",
          "onClick": function () {
            function onClick() {
              return act('time', {
                adjust: -100
              });
            }

            return onClick;
          }()
        }), ' ', String(data.minutes).padStart(2, '0'), ":", String(data.seconds).padStart(2, '0'), ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "forward",
          "onClick": function () {
            function onClick() {
              return act('time', {
                adjust: 100
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "fast-forward",
          "onClick": function () {
            function onClick() {
              return act('time', {
                adjust: 600
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "hourglass-start",
          "content": "Short",
          "onClick": function () {
            function onClick() {
              return act('preset', {
                preset: 'short'
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "hourglass-start",
          "content": "Medium",
          "onClick": function () {
            function onClick() {
              return act('preset', {
                preset: 'medium'
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "hourglass-start",
          "content": "Long",
          "onClick": function () {
            function onClick() {
              return act('preset', {
                preset: 'long'
              });
            }

            return onClick;
          }()
        })]
      })
    })
  });
};

exports.BrigTimer = BrigTimer;

/***/ }),

/***/ "./packages/tgui/interfaces/CameraConsole.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/CameraConsole.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CameraConsoleContent = exports.CameraConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

/**
 * Returns previous and next camera names relative to the currently
 * active camera.
 */
var prevNextCamera = function prevNextCamera(cameras, activeCamera) {
  var _cameras, _cameras2;

  if (!activeCamera) {
    return [];
  }

  var index = cameras.findIndex(function (camera) {
    return camera.name === activeCamera.name;
  });
  return [(_cameras = cameras[index - 1]) == null ? void 0 : _cameras.name, (_cameras2 = cameras[index + 1]) == null ? void 0 : _cameras2.name];
};
/**
 * Camera selector.
 *
 * Filters cameras, applies search terms and sorts the alphabetically.
 */


var selectCameras = function selectCameras(cameras, searchText) {
  if (searchText === void 0) {
    searchText = '';
  }

  var testSearch = (0, _string.createSearch)(searchText, function (camera) {
    return camera.name;
  });
  return (0, _fp.flow)([// Null camera filter
  (0, _collections.filter)(function (camera) {
    return camera == null ? void 0 : camera.name;
  }), // Optional search term
  searchText && (0, _collections.filter)(testSearch), // Slightly expensive, but way better than sorting in BYOND
  (0, _collections.sortBy)(function (camera) {
    return camera.name;
  })])(cameras);
};

var CameraConsole = function CameraConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data,
      config = _useBackend.config;

  var mapRef = data.mapRef,
      activeCamera = data.activeCamera;
  var cameras = selectCameras(data.cameras);

  var _prevNextCamera = prevNextCamera(cameras, activeCamera),
      prevCameraName = _prevNextCamera[0],
      nextCameraName = _prevNextCamera[1];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 870,
    "height": 708,
    "resizable": true,
    children: [(0, _inferno.createVNode)(1, "div", "CameraConsole__left", (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, CameraConsoleContent)
    }), 2), (0, _inferno.createVNode)(1, "div", "CameraConsole__right", [(0, _inferno.createVNode)(1, "div", "CameraConsole__toolbar", [(0, _inferno.createVNode)(1, "b", null, "Camera: ", 16), activeCamera && activeCamera.name || '—'], 0), (0, _inferno.createVNode)(1, "div", "CameraConsole__toolbarRight", [(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "chevron-left",
      "disabled": !prevCameraName,
      "onClick": function () {
        function onClick() {
          return act('switch_camera', {
            name: prevCameraName
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "chevron-right",
      "disabled": !nextCameraName,
      "onClick": function () {
        function onClick() {
          return act('switch_camera', {
            name: nextCameraName
          });
        }

        return onClick;
      }()
    })], 4), (0, _inferno.createComponentVNode)(2, _components.ByondUi, {
      "className": "CameraConsole__map",
      "params": {
        id: mapRef,
        type: 'map'
      }
    })], 4)]
  });
};

exports.CameraConsole = CameraConsole;

var CameraConsoleContent = function CameraConsoleContent(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _useLocalState = (0, _backend.useLocalState)(context, 'searchText', ''),
      searchText = _useLocalState[0],
      setSearchText = _useLocalState[1];

  var activeCamera = data.activeCamera;
  var cameras = selectCameras(data.cameras, searchText);
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Input, {
    "autoFocus": true,
    "fluid": true,
    "mb": 1,
    "placeholder": "Search for a camera",
    "onInput": function () {
      function onInput(e, value) {
        return setSearchText(value);
      }

      return onInput;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: cameras.map(function (camera) {
      return (// We're not using the component here because performance
        // would be absolutely abysmal (50+ ms for each re-render).
        (0, _inferno.createVNode)(1, "div", (0, _react.classes)(['Button', 'Button--fluid', 'Button--color--transparent', 'Button--ellipsis', activeCamera && camera.name === activeCamera.name && 'Button--selected']), camera.name, 0, {
          "title": camera.name,
          "onClick": function () {
            function onClick() {
              return act('switch_camera', {
                name: camera.name
              });
            }

            return onClick;
          }()
        }, camera.name)
      );
    })
  })], 4);
};

exports.CameraConsoleContent = CameraConsoleContent;

/***/ }),

/***/ "./packages/tgui/interfaces/Canister.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/Canister.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Canister = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Canister = function Canister(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var portConnected = data.portConnected,
      tankPressure = data.tankPressure,
      releasePressure = data.releasePressure,
      defaultReleasePressure = data.defaultReleasePressure,
      minReleasePressure = data.minReleasePressure,
      maxReleasePressure = data.maxReleasePressure,
      valveOpen = data.valveOpen,
      isPrototype = data.isPrototype,
      hasHoldingTank = data.hasHoldingTank,
      holdingTank = data.holdingTank,
      restricted = data.restricted;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 232,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Canister",
        "buttons": (0, _inferno.createFragment)([!!isPrototype && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "mr": 1,
          "icon": restricted ? 'lock' : 'unlock',
          "color": "caution",
          "content": restricted ? 'Engineering' : 'Public',
          "onClick": function () {
            function onClick() {
              return act('restricted');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "pencil-alt",
          "content": "Relabel",
          "onClick": function () {
            function onClick() {
              return act('relabel');
            }

            return onClick;
          }()
        })], 0),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledControls, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledControls.Item, {
            "minWidth": "66px",
            "label": "Pressure",
            children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "value": tankPressure,
              "format": function () {
                function format(value) {
                  if (value < 10000) {
                    return (0, _math.toFixed)(value) + ' kPa';
                  }

                  return (0, _format.formatSiUnit)(value * 1000, 1, 'Pa');
                }

                return format;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledControls.Item, {
            "label": "Regulator",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "position": "relative",
              "left": "-8px",
              children: [(0, _inferno.createComponentVNode)(2, _components.Knob, {
                "size": 1.25,
                "color": !!valveOpen && 'yellow',
                "value": releasePressure,
                "unit": "kPa",
                "minValue": minReleasePressure,
                "maxValue": maxReleasePressure,
                "step": 5,
                "stepPixelSize": 1,
                "onDrag": function () {
                  function onDrag(e, value) {
                    return act('pressure', {
                      pressure: value
                    });
                  }

                  return onDrag;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "position": "absolute",
                "top": "-2px",
                "right": "-20px",
                "color": "transparent",
                "icon": "fast-forward",
                "onClick": function () {
                  function onClick() {
                    return act('pressure', {
                      pressure: maxReleasePressure
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "position": "absolute",
                "top": "16px",
                "right": "-20px",
                "color": "transparent",
                "icon": "undo",
                "onClick": function () {
                  function onClick() {
                    return act('pressure', {
                      pressure: defaultReleasePressure
                    });
                  }

                  return onClick;
                }()
              })]
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledControls.Item, {
            "label": "Valve",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "my": 0.5,
              "width": "50px",
              "lineHeight": 2,
              "fontSize": "11px",
              "color": valveOpen ? hasHoldingTank ? 'caution' : 'danger' : null,
              "content": valveOpen ? 'Open' : 'Closed',
              "onClick": function () {
                function onClick() {
                  return act('valve');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledControls.Item, {
            "mr": 1,
            "label": "Port",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "position": "relative",
              children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
                "size": 1.25,
                "name": portConnected ? 'plug' : 'times',
                "color": portConnected ? 'good' : 'bad'
              }), (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
                "content": portConnected ? 'Connected' : 'Disconnected',
                "position": "top"
              })]
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Holding Tank",
        "buttons": !!hasHoldingTank && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "color": valveOpen && 'danger',
          "content": "Eject",
          "onClick": function () {
            function onClick() {
              return act('eject');
            }

            return onClick;
          }()
        }),
        children: [!!hasHoldingTank && (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Label",
            children: holdingTank.name
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Pressure",
            children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "value": holdingTank.tankPressure
            }), " kPa"]
          })]
        }), !hasHoldingTank && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "average",
          children: "No Holding Tank"
        })]
      })]
    })
  });
};

exports.Canister = Canister;

/***/ }),

/***/ "./packages/tgui/interfaces/Canvas.js":
/*!********************************************!*\
  !*** ./packages/tgui/interfaces/Canvas.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Canvas = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var PX_PER_UNIT = 28;

var PaintCanvas = /*#__PURE__*/function (_Component) {
  _inheritsLoose(PaintCanvas, _Component);

  function PaintCanvas(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.canvasRef = (0, _inferno.createRef)();
    _this.onCVClick = props.onCanvasClick;
    return _this;
  }

  var _proto = PaintCanvas.prototype;

  _proto.componentDidMount = function () {
    function componentDidMount() {
      this.drawCanvas(this.props);
    }

    return componentDidMount;
  }();

  _proto.componentDidUpdate = function () {
    function componentDidUpdate() {
      this.drawCanvas(this.props);
    }

    return componentDidUpdate;
  }();

  _proto.drawCanvas = function () {
    function drawCanvas(propSource) {
      var ctx = this.canvasRef.current.getContext("2d");
      var grid = propSource.value;
      var x_size = grid.length;

      if (!x_size) {
        return;
      }

      var y_size = grid[0].length;
      var x_scale = Math.round(this.canvasRef.current.width / x_size);
      var y_scale = Math.round(this.canvasRef.current.height / y_size);
      ctx.save();
      ctx.scale(x_scale, y_scale);

      for (var x = 0; x < grid.length; x++) {
        var element = grid[x];

        for (var y = 0; y < element.length; y++) {
          var color = element[y];
          ctx.fillStyle = color;
          ctx.fillRect(x, y, 1, 1);
        }
      }

      ctx.restore();
    }

    return drawCanvas;
  }();

  _proto.clickwrapper = function () {
    function clickwrapper(event) {
      var x_size = this.props.value.length;

      if (!x_size) {
        return;
      }

      var y_size = this.props.value[0].length;
      var x_scale = this.canvasRef.current.width / x_size;
      var y_scale = this.canvasRef.current.height / y_size;
      var x = Math.floor(event.offsetX / x_scale) + 1;
      var y = Math.floor(event.offsetY / y_scale) + 1;
      this.onCVClick(x, y);
    }

    return clickwrapper;
  }();

  _proto.render = function () {
    function render() {
      var _this2 = this;

      var _this$props = this.props,
          _this$props$res = _this$props.res,
          res = _this$props$res === void 0 ? 1 : _this$props$res,
          value = _this$props.value,
          rest = _objectWithoutPropertiesLoose(_this$props, ["res", "value"]);

      var _getImageSize = getImageSize(value),
          width = _getImageSize[0],
          height = _getImageSize[1];

      return (0, _inferno.normalizeProps)((0, _inferno.createVNode)(1, "canvas", null, "Canvas failed to render.", 16, Object.assign({
        "width": width * PX_PER_UNIT || 300,
        "height": height * PX_PER_UNIT || 300
      }, rest, {
        "onClick": function () {
          function onClick(e) {
            return _this2.clickwrapper(e);
          }

          return onClick;
        }()
      }), null, this.canvasRef));
    }

    return render;
  }();

  return PaintCanvas;
}(_inferno.Component);

var getImageSize = function getImageSize(value) {
  var width = value.length;
  var height = width !== 0 ? value[0].length : 0;
  return [width, height];
};

var Canvas = function Canvas(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _getImageSize2 = getImageSize(data.grid),
      width = _getImageSize2[0],
      height = _getImageSize2[1];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": Math.min(400, width * PX_PER_UNIT * 32 + 24),
    "height": Math.min(400, height * PX_PER_UNIT * 32 + 24),
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "textAlign": "center",
        children: [(0, _inferno.createComponentVNode)(2, PaintCanvas, {
          "value": data.grid,
          "onCanvasClick": function () {
            function onCanvasClick(x, y) {
              return act("paint", {
                x: x,
                y: y
              });
            }

            return onCanvasClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: [!data.finalized && (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
            "onClick": function () {
              function onClick() {
                return act("finalize");
              }

              return onClick;
            }(),
            "content": "Finalize"
          }), data.name]
        })]
      })
    })
  });
};

exports.Canvas = Canvas;

/***/ }),

/***/ "./packages/tgui/interfaces/Cargo.js":
/*!*******************************************!*\
  !*** ./packages/tgui/interfaces/Cargo.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CargoCatalog = exports.Cargo = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Cargo = function Cargo(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 'catalog'),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  var requestonly = data.requestonly;
  var cart = data.cart || [];
  var requests = data.requests || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 780,
    "height": 750,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, CargoStatus), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "fitted": true,
        children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
            "icon": "list",
            "selected": tab === 'catalog',
            "onClick": function () {
              function onClick() {
                return setTab('catalog');
              }

              return onClick;
            }(),
            children: "Catalog"
          }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
            "icon": "envelope",
            "textColor": tab !== 'requests' && requests.length > 0 && 'yellow',
            "selected": tab === 'requests',
            "onClick": function () {
              function onClick() {
                return setTab('requests');
              }

              return onClick;
            }(),
            children: ["Requests (", requests.length, ")"]
          }), !requestonly && (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
            "icon": "shopping-cart",
            "textColor": tab !== 'cart' && cart.length > 0 && 'yellow',
            "selected": tab === 'cart',
            "onClick": function () {
              function onClick() {
                return setTab('cart');
              }

              return onClick;
            }(),
            children: ["Checkout (", cart.length, ")"]
          })]
        })
      }), tab === 'catalog' && (0, _inferno.createComponentVNode)(2, CargoCatalog), tab === 'requests' && (0, _inferno.createComponentVNode)(2, CargoRequests), tab === 'cart' && (0, _inferno.createComponentVNode)(2, CargoCart)]
    })
  });
};

exports.Cargo = Cargo;

var CargoStatus = function CargoStatus(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var away = data.away,
      docked = data.docked,
      loan = data.loan,
      loan_dispatched = data.loan_dispatched,
      location = data.location,
      message = data.message,
      points = data.points,
      requestonly = data.requestonly;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Cargo",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "bold": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
        "value": points,
        "format": function () {
          function format(value) {
            return (0, _format.formatMoney)(value);
          }

          return format;
        }()
      }), ' credits']
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Shuttle",
        children: docked && !requestonly && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": location,
          "onClick": function () {
            function onClick() {
              return act('send');
            }

            return onClick;
          }()
        }) || location
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "CentCom Message",
        children: message
      }), !!loan && !requestonly && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Loan",
        children: !loan_dispatched && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Loan Shuttle",
          "disabled": !(away && docked),
          "onClick": function () {
            function onClick() {
              return act('loan');
            }

            return onClick;
          }()
        }) || (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "bad",
          children: "Loaned to Centcom"
        })
      })]
    })
  });
};

var CargoCatalog = function CargoCatalog(props, context) {
  var _supplies$;

  var express = props.express;

  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var self_paid = data.self_paid;
  var supplies = (0, _collections.toArray)(data.supplies);

  var _useSharedState2 = (0, _backend.useSharedState)(context, 'supply', (_supplies$ = supplies[0]) == null ? void 0 : _supplies$.name),
      activeSupplyName = _useSharedState2[0],
      setActiveSupplyName = _useSharedState2[1];

  var activeSupply = supplies.find(function (supply) {
    return supply.name === activeSupplyName;
  });
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Catalog",
    "buttons": !express && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, CargoCartButtons), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
      "ml": 2,
      "content": "Buy Privately",
      "checked": self_paid,
      "onClick": function () {
        function onClick() {
          return act('toggleprivate');
        }

        return onClick;
      }()
    })], 4),
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "ml": -1,
        "mr": 1,
        children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
          "vertical": true,
          children: supplies.map(function (supply) {
            return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": supply.name === activeSupplyName,
              "onClick": function () {
                function onClick() {
                  return setActiveSupplyName(supply.name);
                }

                return onClick;
              }(),
              children: [supply.name, " (", supply.packs.length, ")"]
            }, supply.name);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        "basis": 0,
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: activeSupply == null ? void 0 : activeSupply.packs.map(function (pack) {
            var tags = [];

            if (pack.small_item) {
              tags.push('Small');
            }

            if (pack.access) {
              tags.push('Restricted');
            }

            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              "className": "candystripe",
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: pack.name
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                "color": "label",
                "textAlign": "right",
                children: tags.join(', ')
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                "textAlign": "right",
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "fluid": true,
                  "tooltip": pack.desc,
                  "tooltipPosition": "left",
                  "onClick": function () {
                    function onClick() {
                      return act('add', {
                        id: pack.id
                      });
                    }

                    return onClick;
                  }(),
                  children: [(0, _format.formatMoney)(self_paid && !pack.goody ? Math.round(pack.cost * 1.1) : pack.cost), ' cr']
                })
              })]
            }, pack.name);
          })
        })
      })]
    })
  });
};

exports.CargoCatalog = CargoCatalog;

var CargoRequests = function CargoRequests(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act,
      data = _useBackend4.data;

  var requestonly = data.requestonly;
  var requests = data.requests || []; // Labeled list reimplementation to squeeze extra columns out of it

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Active Requests",
    "buttons": !requestonly && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "times",
      "content": "Clear",
      "color": "transparent",
      "onClick": function () {
        function onClick() {
          return act('denyall');
        }

        return onClick;
      }()
    }),
    children: [requests.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "good",
      children: "No Requests"
    }), requests.length > 0 && (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: requests.map(function (request) {
        return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          "className": "candystripe",
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            "color": "label",
            children: ["#", request.id]
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: request.object
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: (0, _inferno.createVNode)(1, "b", null, request.orderer, 0)
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "width": "25%",
            children: (0, _inferno.createVNode)(1, "i", null, request.reason, 0)
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            "textAlign": "right",
            children: [(0, _format.formatMoney)(request.cost), " cr"]
          }), !requestonly && (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "check",
              "color": "good",
              "onClick": function () {
                function onClick() {
                  return act('approve', {
                    id: request.id
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "times",
              "color": "bad",
              "onClick": function () {
                function onClick() {
                  return act('deny', {
                    id: request.id
                  });
                }

                return onClick;
              }()
            })]
          })]
        }, request.id);
      })
    })]
  });
};

var CargoCartButtons = function CargoCartButtons(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      act = _useBackend5.act,
      data = _useBackend5.data;

  var requestonly = data.requestonly;
  var cart = data.cart || [];
  var total = cart.reduce(function (total, entry) {
    return total + entry.cost;
  }, 0);

  if (requestonly) {
    return null;
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    "mx": 1,
    children: [cart.length === 0 && 'Cart is empty', cart.length === 1 && '1 item', cart.length >= 2 && cart.length + ' items', ' ', total > 0 && "(" + (0, _format.formatMoney)(total) + " cr)"]
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "times",
    "color": "transparent",
    "content": "Clear",
    "onClick": function () {
      function onClick() {
        return act('clear');
      }

      return onClick;
    }()
  })], 4);
};

var CargoCart = function CargoCart(props, context) {
  var _useBackend6 = (0, _backend.useBackend)(context),
      act = _useBackend6.act,
      data = _useBackend6.data;

  var requestonly = data.requestonly,
      away = data.away,
      docked = data.docked,
      location = data.location;
  var cart = data.cart || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Current Cart",
    "buttons": (0, _inferno.createComponentVNode)(2, CargoCartButtons),
    children: [cart.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      children: "Nothing in cart"
    }), cart.length > 0 && (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: cart.map(function (entry) {
        return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          "className": "candystripe",
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            "color": "label",
            children: ["#", entry.id]
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: entry.object
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            children: !!entry.paid && (0, _inferno.createVNode)(1, "b", null, "[Paid Privately]", 16)
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            "textAlign": "right",
            children: [(0, _format.formatMoney)(entry.cost), " cr"]
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "minus",
              "onClick": function () {
                function onClick() {
                  return act('remove', {
                    id: entry.id
                  });
                }

                return onClick;
              }()
            })
          })]
        }, entry.id);
      })
    }), cart.length > 0 && !requestonly && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 2,
      children: away === 1 && docked === 1 && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "color": "green",
        "style": {
          'line-height': '28px',
          'padding': '0 12px'
        },
        "content": "Confirm the order",
        "onClick": function () {
          function onClick() {
            return act('send');
          }

          return onClick;
        }()
      }) || (0, _inferno.createComponentVNode)(2, _components.Box, {
        "opacity": 0.5,
        children: ["Shuttle in ", location, "."]
      })
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/CargoBountyConsole.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/CargoBountyConsole.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CargoBountyConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var CargoBountyConsole = function CargoBountyConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$bountydata = data.bountydata,
      bountydata = _data$bountydata === void 0 ? [] : _data$bountydata;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 750,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": (0, _inferno.createComponentVNode)(2, BountyHeader),
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "print",
          "content": "Print Bounty List",
          "onClick": function () {
            function onClick() {
              return act('Print');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          "border": true,
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            "bold": true,
            "italic": true,
            "color": "label",
            "fontSize": 1.25,
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Bounty Object"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Description"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Progress"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Value"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Claim"
            })]
          }), bountydata.map(function (bounty) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              "backgroundColor": bounty.priority === 1 ? 'rgba(252, 152, 3, 0.25)' : '',
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "p": 1,
                children: bounty.name
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "italic": true,
                "textAlign": "center",
                "p": 1,
                children: bounty.description
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "p": 1,
                "textAlign": "center",
                children: [bounty.priority === 1 ? (0, _inferno.createComponentVNode)(2, _components.Box, {
                  children: "High Priority"
                }) : "", bounty.completion_string]
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "p": 1,
                "textAlign": "center",
                children: bounty.reward_string
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "p": 1,
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "fluid": true,
                  "textAlign": "center",
                  "icon": bounty.claimed === 1 ? "check" : "",
                  "content": bounty.claimed === 1 ? "Claimed" : "Claim",
                  "disabled": bounty.claimed === 1,
                  "color": bounty.can_claim === 1 ? 'green' : 'red',
                  "onClick": function () {
                    function onClick() {
                      return act('ClaimBounty', {
                        bounty: bounty.bounty_ref
                      });
                    }

                    return onClick;
                  }()
                })
              })]
            }, bounty.name);
          })]
        })
      })
    })
  });
};

exports.CargoBountyConsole = CargoBountyConsole;

var BountyHeader = function BountyHeader(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var stored_cash = data.stored_cash;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    "bold": true,
    children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
      "value": stored_cash,
      "format": function () {
        function format(value) {
          return (0, _format.formatMoney)(value);
        }

        return format;
      }()
    }), ' credits']
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/CargoExpress.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/CargoExpress.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CargoExpress = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _Cargo = __webpack_require__(/*! ./Cargo */ "./packages/tgui/interfaces/Cargo.js");

var _InterfaceLockNoticeBox = __webpack_require__(/*! ./common/InterfaceLockNoticeBox */ "./packages/tgui/interfaces/common/InterfaceLockNoticeBox.js");

var CargoExpress = function CargoExpress(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 600,
    "height": 700,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _InterfaceLockNoticeBox.InterfaceLockNoticeBox, {
        "accessText": "a QM-level ID card"
      }), !data.locked && (0, _inferno.createComponentVNode)(2, CargoExpressContent)]
    })
  });
};

exports.CargoExpress = CargoExpress;

var CargoExpressContent = function CargoExpressContent(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Cargo Express",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "bold": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
        "value": Math.round(data.points)
      }), ' credits']
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Landing Location",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Cargo Bay",
          "selected": !data.usingBeacon,
          "onClick": function () {
            function onClick() {
              return act('LZCargo');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "selected": data.usingBeacon,
          "disabled": !data.hasBeacon,
          "onClick": function () {
            function onClick() {
              return act('LZBeacon');
            }

            return onClick;
          }(),
          children: [data.beaconzone, " (", data.beaconName, ")"]
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": data.printMsg,
          "disabled": !data.canBuyBeacon,
          "onClick": function () {
            function onClick() {
              return act('printBeacon');
            }

            return onClick;
          }()
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Notice",
        children: data.message
      })]
    })
  }), (0, _inferno.createComponentVNode)(2, _Cargo.CargoCatalog, {
    "express": true
  })], 4);
};

/***/ }),

/***/ "./packages/tgui/interfaces/CargoHoldTerminal.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/CargoHoldTerminal.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CargoHoldTerminal = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var CargoHoldTerminal = function CargoHoldTerminal(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var points = data.points,
      pad = data.pad,
      sending = data.sending,
      status_report = data.status_report;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 600,
    "height": 230,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Cargo Value",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "bold": true,
              children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
                "value": Math.round(points)
              }), " credits"]
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Cargo Pad",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "sync",
          "content": "Recalculate Value",
          "disabled": !pad,
          "onClick": function () {
            function onClick() {
              return act('recalc');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": sending ? 'times' : 'arrow-up',
          "content": sending ? "Stop Sending" : "Send Goods",
          "selected": sending,
          "disabled": !pad,
          "onClick": function () {
            function onClick() {
              return act(sending ? 'stop' : 'send');
            }

            return onClick;
          }()
        })], 4),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            "color": pad ? "good" : "bad",
            children: pad ? "Online" : "Not Found"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Cargo Report",
            children: status_report
          })]
        })
      })]
    })
  });
};

exports.CargoHoldTerminal = CargoHoldTerminal;

/***/ }),

/***/ "./packages/tgui/interfaces/CellularEmporium.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/CellularEmporium.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CellularEmporium = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var CellularEmporium = function CellularEmporium(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var abilities = data.abilities;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 900,
    "height": 480,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Genetic Points",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "undo",
              "content": "Readapt",
              "disabled": !data.can_readapt,
              "onClick": function () {
                function onClick() {
                  return act('readapt');
                }

                return onClick;
              }()
            }),
            children: data.genetic_points_remaining
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: abilities.map(function (ability) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "className": "candystripe",
              "label": ability.name,
              "buttons": (0, _inferno.createFragment)([ability.dna_cost, ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": ability.owned ? 'Evolved' : 'Evolve',
                "selected": ability.owned,
                "onClick": function () {
                  function onClick() {
                    return act('evolve', {
                      name: ability.name
                    });
                  }

                  return onClick;
                }()
              })], 0),
              children: [ability.desc, (0, _inferno.createComponentVNode)(2, _components.Box, {
                "color": "good",
                children: ability.helptext
              })]
            }, ability.name);
          })
        })
      })]
    })
  });
};

exports.CellularEmporium = CellularEmporium;

/***/ }),

/***/ "./packages/tgui/interfaces/CentcomPodLauncher.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/CentcomPodLauncher.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CentcomPodLauncher = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _storage = __webpack_require__(/*! common/storage */ "./packages/common/storage.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _uuid = __webpack_require__(/*! common/uuid */ "./packages/common/uuid.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var pod_grey = {
  color: 'grey'
};

var useCompact = function useCompact(context) {
  var _useLocalState = (0, _backend.useLocalState)(context, 'compact', false),
      compact = _useLocalState[0],
      setCompact = _useLocalState[1];

  var toggleCompact = function toggleCompact() {
    return setCompact(!compact);
  };

  return [compact, toggleCompact];
};

var CentcomPodLauncher = function CentcomPodLauncher(props, context) {
  var _useCompact = useCompact(context),
      compact = _useCompact[0];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    "title": compact ? "Use against Helen Weinstein" : "Supply Pod Menu (Use against Helen Weinstein)",
    "overflow": "hidden",
    "width": compact ? 435 : 690,
    "height": compact ? 360 : 440,
    children: (0, _inferno.createComponentVNode)(2, CentcomPodLauncherContent)
  }, 'CPL_' + compact);
};

exports.CentcomPodLauncher = CentcomPodLauncher;

var CentcomPodLauncherContent = function CentcomPodLauncherContent(props, context) {
  var _useCompact2 = useCompact(context),
      compact = _useCompact2[0];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "direction": "column",
      "height": "100%",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 0,
        "shrink": 0,
        children: (0, _inferno.createComponentVNode)(2, PodStatusPage)
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "mt": 1,
        "grow": 1,
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "height": "100%",
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            "shrink": 0,
            "basis": "13em",
            children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
              "direction": "column",
              "height": "100%",
              children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "grow": 1,
                children: (0, _inferno.createComponentVNode)(2, PresetsPage)
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "mt": 1,
                "grow": 0,
                children: (0, _inferno.createComponentVNode)(2, ReverseMenu)
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "mt": 1,
                children: (0, _inferno.createComponentVNode)(2, _components.Section, {
                  children: (0, _inferno.createComponentVNode)(2, LaunchPage)
                })
              })]
            })
          }), !compact && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "ml": 1,
            "grow": 3,
            children: (0, _inferno.createComponentVNode)(2, ViewTabHolder)
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "ml": 1,
            "basis": "8em",
            children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
              "direction": "column",
              "height": "100%",
              children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                children: (0, _inferno.createComponentVNode)(2, Bays)
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "mt": 1,
                "grow": 1,
                children: (0, _inferno.createComponentVNode)(2, Timing)
              }), !compact && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "mt": 1,
                children: (0, _inferno.createComponentVNode)(2, Sounds)
              })]
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "ml": 1,
            "basis": "11em",
            children: (0, _inferno.createComponentVNode)(2, StylePage)
          })]
        })
      })]
    })
  });
};

var TABPAGES = [{
  title: 'View Pod',
  component: function () {
    function component() {
      return TabPod;
    }

    return component;
  }()
}, {
  title: 'View Bay',
  component: function () {
    function component() {
      return TabBay;
    }

    return component;
  }()
}, {
  title: 'View Dropoff Location',
  component: function () {
    function component() {
      return TabDrop;
    }

    return component;
  }()
}];
var REVERSE_OPTIONS = [{
  title: 'Mobs',
  icon: 'user'
}, {
  title: 'Unanchored\nObjects',
  key: 'Unanchored',
  icon: 'cube'
}, {
  title: 'Anchored\nObjects',
  key: 'Anchored',
  icon: 'anchor'
}, {
  title: 'Under-Floor',
  key: 'Underfloor',
  icon: 'eye-slash'
}, {
  title: 'Wall-Mounted',
  key: 'Wallmounted',
  icon: 'link'
}, {
  title: 'Floors',
  icon: 'border-all'
}, {
  title: 'Walls',
  icon: 'square'
}];
var DELAYS = [{
  title: 'Pre',
  tooltip: 'Time until pod gets to station'
}, {
  title: 'Fall',
  tooltip: 'Duration of pods\nfalling animation'
}, {
  title: 'Open',
  tooltip: 'Time it takes pod to open after landing'
}, {
  title: 'Exit',
  tooltip: 'Time for pod to\nleave after opening'
}];
var SOUNDS = [{
  title: 'Fall',
  act: 'fallingSound',
  tooltip: 'Plays while pod falls, timed\nto end when pod lands'
}, {
  title: 'Land',
  act: 'landingSound',
  tooltip: 'Plays after pod lands'
}, {
  title: 'Open',
  act: 'openingSound',
  tooltip: 'Plays when pod opens'
}, {
  title: 'Exit',
  act: 'leavingSound',
  tooltip: 'Plays when pod leaves'
}];
var STYLES = [{
  title: 'Standard'
}, {
  title: 'Advanced'
}, {
  title: 'Nanotrasen'
}, {
  title: 'Syndicate'
}, {
  title: 'Deathsquad'
}, {
  title: 'Cultist'
}, {
  title: 'Missile'
}, {
  title: 'Syndie Missile'
}, {
  title: 'Supply Box'
}, {
  title: 'Clown Pod'
}, {
  title: 'Fruit'
}, {
  title: 'Invisible'
}, {
  title: 'Gondola'
}, {
  title: 'Seethrough'
}];
var BAYS = [{
  title: '1'
}, {
  title: '2'
}, {
  title: '3'
}, {
  title: '4'
}, {
  title: 'ERT'
}];
var EFFECTS_LOAD = [{
  title: 'Launch All Turfs',
  icon: 'globe',
  choiceNumber: 0,
  selected: 'launchChoice',
  act: 'launchAll'
}, {
  title: 'Launch Turf Ordered',
  icon: 'sort-amount-down-alt',
  choiceNumber: 1,
  selected: 'launchChoice',
  act: 'launchOrdered'
}, {
  title: 'Pick Random Turf',
  icon: 'dice',
  choiceNumber: 2,
  selected: 'launchChoice',
  act: 'launchRandomTurf'
}, {
  divider: 1
}, {
  title: 'Launch Whole Turf',
  icon: 'expand',
  choiceNumber: 0,
  selected: 'launchRandomItem',
  act: 'launchWholeTurf'
}, {
  title: 'Pick Random Item',
  icon: 'dice',
  choiceNumber: 1,
  selected: 'launchRandomItem',
  act: 'launchRandomItem'
}, {
  divider: 1
}, {
  title: 'Clone',
  icon: 'clone',
  soloSelected: 'launchClone',
  act: 'launchClone'
}];
var EFFECTS_NORMAL = [{
  title: 'Specific Target',
  icon: 'user-check',
  soloSelected: 'effectTarget',
  act: 'effectTarget'
}, {
  title: 'Pod Stays',
  icon: 'hand-paper',
  choiceNumber: 0,
  selected: 'effectBluespace',
  act: 'effectBluespace'
}, {
  title: 'Stealth',
  icon: 'user-ninja',
  soloSelected: 'effectStealth',
  act: 'effectStealth'
}, {
  title: 'Quiet',
  icon: 'volume-mute',
  soloSelected: 'effectQuiet',
  act: 'effectQuiet'
}, {
  title: 'Missile Mode',
  icon: 'rocket',
  soloSelected: 'effectMissile',
  act: 'effectMissile'
}, {
  title: 'Burst Launch',
  icon: 'certificate',
  soloSelected: 'effectBurst',
  act: 'effectBurst'
}, {
  title: 'Any Descent Angle',
  icon: 'ruler-combined',
  soloSelected: 'effectCircle',
  act: 'effectCircle'
}, {
  title: 'No Ghost Alert\n(If you dont want to\nentertain bored ghosts)',
  icon: 'ghost',
  choiceNumber: 0,
  selected: 'effectAnnounce',
  act: 'effectAnnounce'
}];
var EFFECTS_HARM = [{
  title: 'Explosion Custom',
  icon: 'bomb',
  choiceNumber: 1,
  selected: 'explosionChoice',
  act: 'explosionCustom'
}, {
  title: 'Adminbus Explosion\nWhat are they gonna do, ban you?',
  icon: 'bomb',
  choiceNumber: 2,
  selected: 'explosionChoice',
  act: 'explosionBus'
}, {
  divider: 1
}, {
  title: 'Custom Damage',
  icon: 'skull',
  choiceNumber: 1,
  selected: 'damageChoice',
  act: 'damageCustom'
}, {
  title: 'Gib',
  icon: 'skull-crossbones',
  choiceNumber: 2,
  selected: 'damageChoice',
  act: 'damageGib'
}, {
  divider: 1
}, {
  title: 'Projectile Cloud',
  details: true,
  icon: 'cloud-meatball',
  soloSelected: 'effectShrapnel',
  act: 'effectShrapnel'
}, {
  title: 'Stun',
  icon: 'sun',
  soloSelected: 'effectStun',
  act: 'effectStun'
}, {
  title: 'Delimb',
  icon: 'socks',
  soloSelected: 'effectLimb',
  act: 'effectLimb'
}, {
  title: 'Yeet Organs',
  icon: 'book-dead',
  soloSelected: 'effectOrgans',
  act: 'effectOrgans'
}];
var EFFECTS_ALL = [{
  list: EFFECTS_LOAD,
  label: "Load From",
  alt_label: "Load",
  tooltipPosition: "right"
}, {
  list: EFFECTS_NORMAL,
  label: "Normal Effects",
  tooltipPosition: "bottom"
}, {
  list: EFFECTS_HARM,
  label: "Harmful Effects",
  tooltipPosition: "bottom"
}];

var ViewTabHolder = function ViewTabHolder(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'tabPageIndex', 1),
      tabPageIndex = _useLocalState2[0],
      setTabPageIndex = _useLocalState2[1];

  var mapRef = data.mapRef;
  var TabPageComponent = TABPAGES[tabPageIndex].component();
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "View",
    "fill": true,
    "buttons": (0, _inferno.createFragment)([!!data.customDropoff && data.effectReverse === 1 && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "inline": true,
      "color": "transparent",
      "tooltip": "View Dropoff Location",
      "icon": "arrow-circle-down",
      "selected": 2 === tabPageIndex,
      "onClick": function () {
        function onClick() {
          setTabPageIndex(2);
          act('tabSwitch', {
            tabIndex: 2
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "inline": true,
      "color": "transparent",
      "tooltip": "View Pod",
      "icon": "rocket",
      "selected": 0 === tabPageIndex,
      "onClick": function () {
        function onClick() {
          setTabPageIndex(0);
          act('tabSwitch', {
            tabIndex: 0
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "inline": true,
      "color": "transparent",
      "tooltip": "View Source Bay",
      "icon": "th",
      "selected": 1 === tabPageIndex,
      "onClick": function () {
        function onClick() {
          setTabPageIndex(1);
          act('tabSwitch', {
            tabIndex: 1
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createVNode)(1, "span", null, "|", 16, {
      "style": pod_grey
    }), !!data.customDropoff && data.effectReverse === 1 && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "inline": true,
      "color": "transparent",
      "icon": "lightbulb",
      "selected": data.renderLighting,
      "tooltip": "Render Lighting for the dropoff view",
      "onClick": function () {
        function onClick() {
          act('renderLighting');
          act('refreshView');
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "inline": true,
      "color": "transparent",
      "icon": "sync-alt",
      "tooltip": "Refresh view window in case it breaks",
      "onClick": function () {
        function onClick() {
          setTabPageIndex(tabPageIndex);
          act('refreshView');
        }

        return onClick;
      }()
    })], 0),
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "direction": "column",
      "height": "100%",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "m": 0.5,
        children: (0, _inferno.createComponentVNode)(2, TabPageComponent)
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "m": 0.5,
        "grow": 1,
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          "fill": true,
          children: (0, _inferno.createComponentVNode)(2, _components.ByondUi, {
            "fillPositionedParent": true,
            "params": {
              zoom: 0,
              id: mapRef,
              type: 'map'
            }
          })
        })
      })]
    })
  });
};

var TabPod = function TabPod(props, context) {
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "color": "label",
    children: ["Note: You can right click on this", (0, _inferno.createVNode)(1, "br"), "blueprint pod and edit vars directly"]
  });
};

var TabBay = function TabBay(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data,
      config = _useBackend2.config;

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": "Teleport",
    "icon": "street-view",
    "onClick": function () {
      function onClick() {
        return act('teleportCentcom');
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": data.oldArea ? data.oldArea.substring(0, 17) : 'Go Back',
    "disabled": !data.oldArea,
    "icon": "undo-alt",
    "onClick": function () {
      function onClick() {
        return act('teleportBack');
      }

      return onClick;
    }()
  })], 4);
};

var TabDrop = function TabDrop(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data,
      config = _useBackend3.config;

  var mapRef = data.mapRef;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": "Teleport",
    "icon": "street-view",
    "onClick": function () {
      function onClick() {
        return act('teleportDropoff');
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": data.oldArea ? data.oldArea.substring(0, 17) : 'Go Back',
    "disabled": !data.oldArea,
    "icon": "undo-alt",
    "onClick": function () {
      function onClick() {
        return act('teleportBack');
      }

      return onClick;
    }()
  })], 4);
};

var PodStatusPage = function PodStatusPage(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act,
      data = _useBackend4.data;

  var _useCompact3 = useCompact(context),
      compact = _useCompact3[0],
      toggleCompact = _useCompact3[1];

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "fill": true,
    "width": "100%",
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: EFFECTS_ALL.map(function (list, i) {
        return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "bold": true,
            "color": "label",
            "mb": 1,
            children: [compact === 1 && list.alt_label ? list.alt_label : list.label, ":"]
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: list.list.map(function (effect, j) {
              return (0, _inferno.createFragment)([effect.divider && (0, _inferno.createVNode)(1, "span", null, (0, _inferno.createVNode)(1, "b", null, "|", 16), 2, {
                "style": pod_grey
              }), !effect.divider && (0, _inferno.createComponentVNode)(2, _components.Button, {
                "tooltip": effect.details ? data.effectShrapnel ? effect.title + "\n" + data.shrapnelType + "\nMagnitude:" + data.shrapnelMagnitude : effect.title : effect.title,
                "tooltipPosition": list.tooltipPosition,
                "tooltipOverrideLong": true,
                "icon": effect.icon,
                "content": effect.content,
                "selected": effect.soloSelected ? data[effect.soloSelected] : data[effect.selected] === effect.choiceNumber,
                "onClick": function () {
                  function onClick() {
                    return data.payload !== 0 ? act(effect.act, effect.payload) : act(effect.act);
                  }

                  return onClick;
                }(),
                "style": {
                  'vertical-align': 'middle',
                  'margin-left': j !== 0 ? '1px' : '0px',
                  'margin-right': j !== list.list.length - 1 ? '1px' : '0px',
                  'border-radius': '5px'
                }
              })], 0, j);
            })
          })]
        }), i < EFFECTS_ALL.length && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Divider, {
            "vertical": true
          })
        }), i === EFFECTS_ALL.length - 1 && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": "label",
            "mb": 1,
            children: (0, _inferno.createVNode)(1, "b", null, "Extras:", 16)
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "m": 0,
              "inline": true,
              "color": "transparent",
              "icon": "list-alt",
              "tooltip": "Game Panel",
              "tooltipPosition": "top-left",
              "onClick": function () {
                function onClick() {
                  return act('gamePanel');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "inline": true,
              "m": 0,
              "color": "transparent",
              "icon": "hammer",
              "tooltip": "Build Mode",
              "tooltipPosition": "top-left",
              "onClick": function () {
                function onClick() {
                  return act('buildMode');
                }

                return onClick;
              }()
            }), compact && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "inline": true,
              "m": 0,
              "color": "transparent",
              "icon": "expand",
              "tooltip": "Maximize",
              "tooltipPosition": "top-left",
              "onClick": function () {
                function onClick() {
                  toggleCompact();
                  act('refreshView');
                }

                return onClick;
              }()
            }) || (0, _inferno.createComponentVNode)(2, _components.Button, {
              "m": 0,
              "inline": true,
              "color": "transparent",
              "icon": "compress",
              "tooltip": "Compact mode",
              "tooltipPosition": "top-left",
              "onClick": function () {
                function onClick() {
                  return toggleCompact();
                }

                return onClick;
              }()
            })]
          })]
        })], 0, i);
      })
    })
  });
};

var ReverseMenu = function ReverseMenu(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      act = _useBackend5.act,
      data = _useBackend5.data;

  var _useLocalState3 = (0, _backend.useLocalState)(context, 'tabPageIndex', 1),
      tabPageIndex = _useLocalState3[0],
      setTabPageIndex = _useLocalState3[1];

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "fill": true,
    "height": "100%",
    "title": "Reverse",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": data.effectReverse === 1 ? "toggle-on" : "toggle-off",
      "selected": data.effectReverse,
      "tooltip": "Doesn't send items.\nAfer landing, returns to\ndropoff turf (or bay\nif none specified).",
      "tooltipOverrideLong": true,
      "tooltipPosition": "top-left",
      "onClick": function () {
        function onClick() {
          act('effectReverse');

          if (tabPageIndex === 2) {
            setTabPageIndex(1);
            act('tabSwitch', {
              tabIndex: 1
            });
          }
        }

        return onClick;
      }()
    }),
    children: data.effectReverse === 1 && (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "direction": "column",
      "height": "100%",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "maxHeight": "20px",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Dropoff Turf",
          "selected": data.picking_dropoff_turf,
          "disabled": !data.effectReverse,
          "tooltip": "Where reverse pods\ngo after landing",
          "tooltipOverrideLong": true,
          "tooltipPosition": "bottom-right",
          "onClick": function () {
            function onClick() {
              return act('pickDropoffTurf');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "inline": true,
          "icon": "trash",
          "disabled": !data.customDropoff,
          "tooltip": "Clears the custom dropoff\nlocation. Reverse pods will\ninstead dropoff at the\nselected bay.",
          "tooltipOverrideLong": true,
          "tooltipPosition": "bottom",
          "onClick": function () {
            function onClick() {
              act('clearDropoffTurf');

              if (tabPageIndex === 2) {
                setTabPageIndex(1);
                act('tabSwitch', {
                  tabIndex: 1
                });
              }
            }

            return onClick;
          }()
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Divider, {
        "horizontal": true
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "maxHeight": "20px",
        children: REVERSE_OPTIONS.map(function (option, i) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "inline": true,
            "icon": option.icon,
            "disabled": !data.effectReverse,
            "selected": option.key ? data.reverseOptionList[option.key] : data.reverseOptionList[option.title],
            "tooltip": option.title,
            "tooltipOverrideLong": true,
            "onClick": function () {
              function onClick() {
                return act('reverseOption', {
                  reverseOption: option.key ? option.key : option.title
                });
              }

              return onClick;
            }()
          }, i);
        })
      })]
    })
  });
};

var PresetsPage = /*#__PURE__*/function (_Component) {
  _inheritsLoose(PresetsPage, _Component);

  function PresetsPage() {
    var _this;

    _this = _Component.call(this) || this;
    _this.state = {
      presets: []
    };
    return _this;
  }

  var _proto = PresetsPage.prototype;

  _proto.componentDidMount = /*#__PURE__*/function () {
    var _componentDidMount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function () {
      function _callee() {
        return regeneratorRuntime.wrap(function () {
          function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.t0 = this;
                  _context.next = 3;
                  return this.getPresets();

                case 3:
                  _context.t1 = _context.sent;
                  _context.t2 = {
                    presets: _context.t1
                  };

                  _context.t0.setState.call(_context.t0, _context.t2);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }

          return _callee$;
        }(), _callee, this);
      }

      return _callee;
    }()));

    function componentDidMount() {
      return _componentDidMount.apply(this, arguments);
    }

    return componentDidMount;
  }();

  _proto.saveDataToPreset = function () {
    function saveDataToPreset(id, data) {
      _storage.storage.set("podlauncher_preset_" + id, data);
    }

    return saveDataToPreset;
  }();

  _proto.loadDataFromPreset = /*#__PURE__*/function () {
    var _loadDataFromPreset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function () {
      function _callee2(id, context) {
        var _useBackend6, act, data;

        return regeneratorRuntime.wrap(function () {
          function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _useBackend6 = (0, _backend.useBackend)(context), act = _useBackend6.act, data = _useBackend6.data;
                  _context2.t0 = act;
                  _context2.next = 4;
                  return _storage.storage.get("podlauncher_preset_" + id);

                case 4:
                  _context2.t1 = _context2.sent;
                  _context2.t2 = {
                    payload: _context2.t1
                  };
                  (0, _context2.t0)('loadDataFromPreset', _context2.t2);

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }

          return _callee2$;
        }(), _callee2);
      }

      return _callee2;
    }()));

    function loadDataFromPreset(_x, _x2) {
      return _loadDataFromPreset.apply(this, arguments);
    }

    return loadDataFromPreset;
  }();

  _proto.newPreset = function () {
    function newPreset(presetName, hue, data) {
      var presets = this.state.presets;

      if (!presets || presets === undefined) {
        presets = [];
        presets.push("hi!");
      }

      var id = (0, _uuid.createUuid)();
      var thing = {
        id: id,
        title: presetName,
        hue: hue
      };
      presets.push(thing);

      _storage.storage.set("podlauncher_presetlist", presets);

      this.saveDataToPreset(id, data);
    }

    return newPreset;
  }();

  _proto.getPresets = /*#__PURE__*/function () {
    var _getPresets = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function () {
      function _callee3() {
        var thing;
        return regeneratorRuntime.wrap(function () {
          function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _storage.storage.get("podlauncher_presetlist");

                case 2:
                  thing = _context3.sent;

                  if (thing === undefined) {
                    thing = [];
                  }

                  return _context3.abrupt("return", thing);

                case 5:
                case "end":
                  return _context3.stop();
              }
            }
          }

          return _callee3$;
        }(), _callee3);
      }

      return _callee3;
    }()));

    function getPresets() {
      return _getPresets.apply(this, arguments);
    }

    return getPresets;
  }();

  _proto.deletePreset = function () {
    function deletePreset(deleteID) {
      var presets = this.state.presets;

      for (var i = 0; i < presets.length; i++) {
        if (presets[i].id === deleteID) {
          presets.splice(i, 1);
        }
      }

      _storage.storage.set("podlauncher_presetlist", presets);
    }

    return deletePreset;
  }();

  _proto.render = function () {
    function render() {
      var _this2 = this;

      var presets = this.state.presets;

      var _useBackend7 = (0, _backend.useBackend)(this.context),
          act = _useBackend7.act,
          data = _useBackend7.data;

      var _useLocalState4 = (0, _backend.useLocalState)(this.context, 'presetIndex', 0),
          presetIndex = _useLocalState4[0],
          setSelectedPreset = _useLocalState4[1];

      var _useLocalState5 = (0, _backend.useLocalState)(this.context, 'settingName', 0),
          settingName = _useLocalState5[0],
          setEditingNameStatus = _useLocalState5[1];

      var _useLocalState6 = (0, _backend.useLocalState)(this.context, 'newNameText', ""),
          newNameText = _useLocalState6[0],
          setText = _useLocalState6[1];

      var _useLocalState7 = (0, _backend.useLocalState)(this.context, 'hue', 0),
          hue = _useLocalState7[0],
          setHue = _useLocalState7[1];

      return (0, _inferno.createComponentVNode)(2, _components.Section, {
        "scrollable": true,
        "fill": true,
        "title": "Presets",
        "buttons": (0, _inferno.createFragment)([settingName === 0 && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "color": "transparent",
          "icon": "plus",
          "tooltip": "New Preset",
          "onClick": function () {
            function onClick() {
              return setEditingNameStatus(1);
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "inline": true,
          "color": "transparent",
          "content": "",
          "icon": "download",
          "tooltip": "Saves preset",
          "tooltipOverrideLong": true,
          "tooltipPosition": "bottom",
          "onClick": function () {
            function onClick() {
              return _this2.saveDataToPreset(presetIndex, data);
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "inline": true,
          "color": "transparent",
          "content": "",
          "icon": "upload",
          "tooltip": "Loads preset",
          "onClick": function () {
            function onClick() {
              // Line break to meet line length reqs
              _this2.loadDataFromPreset(presetIndex, _this2.context);
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "inline": true,
          "color": "transparent",
          "icon": "trash",
          "tooltip": "Deletes the selected preset",
          "tooltipPosition": "bottom-left",
          "onClick": function () {
            function onClick() {
              return _this2.deletePreset(presetIndex);
            }

            return onClick;
          }()
        })], 0),
        children: [settingName === 1 && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "inline": true,
          "icon": "check",
          "tooltip": "Confirm",
          "tooltipPosition": "right",
          "onClick": function () {
            function onClick() {
              _this2.newPreset(newNameText, hue, data);

              setEditingNameStatus(0);
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "inline": true,
          "icon": "window-close",
          "tooltip": "Cancel",
          "onClick": function () {
            function onClick() {
              setText("");
              setEditingNameStatus(0);
            }

            return onClick;
          }()
        }), (0, _inferno.createVNode)(1, "span", null, " Hue: ", 16, {
          "color": "label"
        }), (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "inline": true,
          "animated": true,
          "width": "40px",
          "step": 5,
          "stepPixelSize": 5,
          "value": hue,
          "minValue": 0,
          "maxValue": 360,
          "onChange": function () {
            function onChange(e, value) {
              return setHue(value);
            }

            return onChange;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Input, {
          "inline": true,
          "autofocus": true,
          "placeholder": "Preset Name",
          "onChange": function () {
            function onChange(e, value) {
              return setText(value);
            }

            return onChange;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Divider, {
          "horizontal": true
        })], 4), (!presets || presets.length === 0) && (0, _inferno.createVNode)(1, "span", null, "Click [+] to define a new preset. They are persistent across rounds/servers!", 16, {
          "style": pod_grey
        }), presets ? presets.map(function (preset, i) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "width": "100%",
            "backgroundColor": "hsl(" + preset.hue + ", 50%, 50%)",
            "onClick": function () {
              function onClick() {
                return setSelectedPreset(preset.id);
              }

              return onClick;
            }(),
            "content": preset.title,
            "style": presetIndex === preset.id ? {
              'border-width': '1px',
              'border-style': 'solid',
              'border-color': "hsl(" + preset.hue + ", 80%, 80%)"
            } : ''
          }, i);
        }) : "", (0, _inferno.createVNode)(1, "span", null, [(0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createTextVNode)("NOTE: Custom sounds from outside the base game files will not save! :(")], 4, {
          "style": pod_grey
        })]
      });
    }

    return render;
  }();

  return PresetsPage;
}(_inferno.Component);

var LaunchPage = function LaunchPage(props, context) {
  var _useCompact4 = useCompact(context),
      compact = _useCompact4[0];

  var _useBackend8 = (0, _backend.useBackend)(context),
      act = _useBackend8.act,
      data = _useBackend8.data;

  return (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "textAlign": "center",
    "tooltip": "You should know what the\nCodex Astartes says about this",
    "tooltipOverrideLong": true,
    "selected": data.giveLauncher,
    "tooltipPosition": "top",
    "content": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "fontSize": "1.4em",
      "lineHeight": compact ? 1.5 : 3,
      children: "LAUNCH"
    }),
    "onClick": function () {
      function onClick() {
        return act('giveLauncher');
      }

      return onClick;
    }()
  });
};

var StylePage = function StylePage(props, context) {
  var _useBackend9 = (0, _backend.useBackend)(context),
      act = _useBackend9.act,
      data = _useBackend9.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "fill": true,
    "scrollable": true,
    "title": "Style",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Name",
      "color": "transparent",
      "icon": "edit",
      "selected": data.effectName,
      "tooltip": "Edit pod's\nname/desc.",
      "tooltipPosition": "bottom-left",
      "onClick": function () {
        function onClick() {
          return act('effectName');
        }

        return onClick;
      }()
    }),
    children: STYLES.map(function (page, i) {
      return (0, _inferno.createComponentVNode)(2, _components.Button, {
        "width": "45px",
        "height": "45px",
        "tooltipPosition": i >= STYLES.length - 2 ? i % 2 === 1 ? "top-left" : "top-right" : i % 2 === 1 ? "bottom-left" : "bottom-right",
        "tooltip": page.title,
        "style": {
          'vertical-align': 'middle',
          'margin-right': '5px',
          'border-radius': '20px'
        },
        "selected": data.styleChoice - 1 === i,
        "onClick": function () {
          function onClick() {
            return act('setStyle', {
              style: i
            });
          }

          return onClick;
        }(),
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "className": (0, _react.classes)(['supplypods64x64', 'pod_asset' + (i + 1)]),
          "style": {
            'transform': 'rotate(45deg) translate(-25%,-10%)',
            'pointer-events': 'none'
          }
        })
      }, i);
    })
  });
};

var Bays = function Bays(props, context) {
  var _useBackend10 = (0, _backend.useBackend)(context),
      act = _useBackend10.act,
      data = _useBackend10.data;

  var _useCompact5 = useCompact(context),
      compact = _useCompact5[0];

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "fill": true,
    "title": "Bay",
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "trash",
      "color": "transparent",
      "tooltip": "Clears everything\nfrom the selected bay",
      "tooltipOverrideLong": true,
      "tooltipPosition": "bottom-right",
      "onClick": function () {
        function onClick() {
          return act('clearBay');
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "question",
      "color": "transparent",
      "tooltip": "Each option corresponds\nto an area on centcom.\nLaunched pods will\nbe filled with items\nin these areas according\nto the \"Load from Bay\"\noptions at the top left.",
      "tooltipOverrideLong": true,
      "tooltipPosition": "bottom-right"
    })], 4),
    children: BAYS.map(function (bay, i) {
      return (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": bay.title,
        "tooltipPosition": "bottom-right",
        "selected": data.bayNumber === "" + (i + 1),
        "onClick": function () {
          function onClick() {
            return act('switchBay', {
              bayNumber: "" + (i + 1)
            });
          }

          return onClick;
        }()
      }, i);
    })
  });
};

var Timing = function Timing(props, context) {
  var _useBackend11 = (0, _backend.useBackend)(context),
      act = _useBackend11.act,
      data = _useBackend11.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "fill": true,
    "title": "Delay",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "undo",
      "color": "transparent",
      "tooltip": "Reset all pod\ntimings/delays",
      "tooltipOverrideLong": true,
      "tooltipPosition": "bottom-right",
      "onClick": function () {
        function onClick() {
          return act('resetTiming');
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledControls, {
      "wrap": true,
      children: DELAYS.map(function (delay, i) {
        return (0, _inferno.createComponentVNode)(2, _components.LabeledControls.Item, {
          "label": delay.title,
          children: (0, _inferno.createComponentVNode)(2, _components.Knob, {
            "inline": true,
            "step": 0.02,
            "value": data["delay_" + (i + 1)] / 10,
            "unclamped": true,
            "minValue": 0,
            "unit": "s",
            "format": function () {
              function format(value) {
                return (0, _math.toFixed)(value, 2);
              }

              return format;
            }(),
            "maxValue": 10,
            "color": data["delay_" + (i + 1)] / 10 > 10 ? "orange" : "default",
            "onDrag": function () {
              function onDrag(e, value) {
                act('editTiming', {
                  timer: i + 1,
                  value: Math.max(value, 0)
                });
              }

              return onDrag;
            }()
          })
        }, i);
      })
    })
  });
};

var Sounds = function Sounds(props, context) {
  var _useBackend12 = (0, _backend.useBackend)(context),
      act = _useBackend12.act,
      data = _useBackend12.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "fill": true,
    "title": "Sounds",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "volume-up",
      "color": "transparent",
      "selected": data.soundVolume !== data.defaultSoundVolume,
      "tooltip": "Sound Volume:" + data.soundVolume,
      "tooltipOverrideLong": true,
      "onClick": function () {
        function onClick() {
          return act('soundVolume');
        }

        return onClick;
      }()
    }),
    children: SOUNDS.map(function (sound, i) {
      return (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": sound.title,
        "tooltip": sound.tooltip,
        "tooltipPosition": "top-right",
        "tooltipOverrideLong": true,
        "selected": data[sound.act],
        "onClick": function () {
          function onClick() {
            return act(sound.act);
          }

          return onClick;
        }()
      }, i);
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/ChemAcclimator.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/ChemAcclimator.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemAcclimator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemAcclimator = function ChemAcclimator(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 320,
    "height": 271,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Acclimator",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Temperature",
            children: [data.chem_temp, " K"]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Target Temperature",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": data.target_temperature,
              "unit": "K",
              "width": "59px",
              "minValue": 0,
              "maxValue": 1000,
              "step": 5,
              "stepPixelSize": 2,
              "onChange": function () {
                function onChange(e, value) {
                  return act('set_target_temperature', {
                    temperature: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Acceptable Temp. Difference",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": data.allowed_temperature_difference,
              "unit": "K",
              "width": "59px",
              "minValue": 1,
              "maxValue": data.target_temperature,
              "stepPixelSize": 2,
              "onChange": function () {
                function onChange(e, value) {
                  act('set_allowed_temperature_difference', {
                    temperature: value
                  });
                }

                return onChange;
              }()
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Status",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "power-off",
          "content": data.enabled ? "On" : "Off",
          "selected": data.enabled,
          "onClick": function () {
            function onClick() {
              return act('toggle_power');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Volume",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": data.max_volume,
              "unit": "u",
              "width": "50px",
              "minValue": data.reagent_volume,
              "maxValue": 200,
              "step": 2,
              "stepPixelSize": 2,
              "onChange": function () {
                function onChange(e, value) {
                  return act('change_volume', {
                    volume: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Operation",
            children: data.acclimate_state
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current State",
            children: data.emptying ? 'Emptying' : 'Filling'
          })]
        })
      })]
    })
  });
};

exports.ChemAcclimator = ChemAcclimator;

/***/ }),

/***/ "./packages/tgui/interfaces/ChemDebugSynthesizer.js":
/*!**********************************************************!*\
  !*** ./packages/tgui/interfaces/ChemDebugSynthesizer.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemDebugSynthesizer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemDebugSynthesizer = function ChemDebugSynthesizer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var amount = data.amount,
      beakerCurrentVolume = data.beakerCurrentVolume,
      beakerMaxVolume = data.beakerMaxVolume,
      isBeakerLoaded = data.isBeakerLoaded,
      _data$beakerContents = data.beakerContents,
      beakerContents = _data$beakerContents === void 0 ? [] : _data$beakerContents;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 390,
    "height": 330,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Recipient",
        "buttons": isBeakerLoaded ? (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject",
          "onClick": function () {
            function onClick() {
              return act('ejectBeaker');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": amount,
          "unit": "u",
          "minValue": 1,
          "maxValue": beakerMaxVolume,
          "step": 1,
          "stepPixelSize": 2,
          "onChange": function () {
            function onChange(e, value) {
              return act('amount', {
                amount: value
              });
            }

            return onChange;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "plus",
          "content": "Input",
          "onClick": function () {
            function onClick() {
              return act('input');
            }

            return onClick;
          }()
        })], 4) : (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "plus",
          "content": "Create Beaker",
          "onClick": function () {
            function onClick() {
              return act('makecup');
            }

            return onClick;
          }()
        }),
        children: isBeakerLoaded ? (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
          children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": beakerCurrentVolume
          }), ' / ' + beakerMaxVolume + ' u']
        }), beakerContents.length > 0 ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: beakerContents.map(function (chem) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": chem.name,
              children: [chem.volume, " u"]
            }, chem.name);
          })
        }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "bad",
          children: "Recipient Empty"
        })], 0) : (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "average",
          children: "No Recipient"
        })
      })
    })
  });
};

exports.ChemDebugSynthesizer = ChemDebugSynthesizer;

/***/ }),

/***/ "./packages/tgui/interfaces/ChemDispenser.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/ChemDispenser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemDispenser = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemDispenser = function ChemDispenser(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var recording = !!data.recordingRecipe;

  var _useLocalState = (0, _backend.useLocalState)(context, 'fs_title', false),
      hasCol = _useLocalState[0],
      setHasCol = _useLocalState[1];

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'mode_toggle', true),
      modeToggle = _useLocalState2[0],
      setModeToggle = _useLocalState2[1];

  var _data$storedContents = data.storedContents,
      storedContents = _data$storedContents === void 0 ? [] : _data$storedContents; // TODO: Change how this piece of shit is built on server side
  // It has to be a list, not a fucking OBJECT!

  var recipes = Object.keys(data.recipes).map(function (name) {
    return {
      name: name,
      contents: data.recipes[name]
    };
  });
  var beakerTransferAmounts = data.beakerTransferAmounts || [];
  var beakerContents = recording && Object.keys(data.recordingRecipe).map(function (id) {
    return {
      id: id,
      name: (0, _string.toTitleCase)(id.replace(/_/, ' ')),
      volume: data.recordingRecipe[id]
    };
  }) || data.beakerContents || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 565,
    "height": data.canStore ? 720 : 620,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Status",
        "buttons": [recording && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "mx": 1,
          "color": "red",
          children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
            "name": "circle",
            "mr": 1
          }), "Recording"]
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "cog",
          "disabled": !data.isBeakerLoaded,
          "tooltip": "Alternate between buttons and radial input",
          "tooltipPosition": "bottom-left",
          "selected": modeToggle,
          "onClick": function () {
            function onClick() {
              return setModeToggle(!modeToggle);
            }

            return onClick;
          }()
        }, "colorButton")],
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Energy",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.energy / data.maxEnergy,
              children: (0, _math.toFixed)(data.energy) + ' units'
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Recipes",
        "buttons": (0, _inferno.createFragment)([!recording && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "mx": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "transparent",
            "content": "Clear recipes",
            "onClick": function () {
              function onClick() {
                return act('clear_recipes');
              }

              return onClick;
            }()
          })
        }), !recording && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "circle",
          "disabled": !data.isBeakerLoaded,
          "content": "Record",
          "onClick": function () {
            function onClick() {
              return act('record_recipe');
            }

            return onClick;
          }()
        }), recording && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "ban",
          "color": "transparent",
          "content": "Discard",
          "onClick": function () {
            function onClick() {
              return act('cancel_recording');
            }

            return onClick;
          }()
        }), recording && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "save",
          "color": "green",
          "content": "Save",
          "onClick": function () {
            function onClick() {
              return act('save_recording');
            }

            return onClick;
          }()
        })], 0),
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mr": -1,
          children: [recipes.map(function (recipe) {
            return (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "tint",
              "width": "129.5px",
              "lineHeight": 1.75,
              "content": recipe.name,
              "onClick": function () {
                function onClick() {
                  return act('dispense_recipe', {
                    recipe: recipe.name
                  });
                }

                return onClick;
              }()
            }, recipe.name);
          }), recipes.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": "light-gray",
            children: "No recipes."
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Dispense",
        "buttons": [modeToggle ? beakerTransferAmounts.map(function (amount) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "plus",
            "selected": amount === data.amount,
            "content": amount,
            "onClick": function () {
              function onClick() {
                return act('amount', {
                  target: amount
                });
              }

              return onClick;
            }()
          }, amount);
        }) : !!data.isBeakerLoaded && (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "width": "65px",
          "unit": "u",
          "step": data.stepAmount,
          "stepPixelSize": data.stepAmount,
          "disabled": !data.isBeakerLoaded,
          "value": data.amount,
          "minValue": 1,
          "maxValue": data.beakerMaxVolume,
          "onDrag": function () {
            function onDrag(e, amount) {
              return act('amount', {
                target: amount
              });
            }

            return onDrag;
          }()
        }, "dispenseInput"), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "cog",
          "tooltip": "Color code the reagents by pH",
          "tooltipPosition": "bottom-left",
          "selected": hasCol,
          "onClick": function () {
            function onClick() {
              return setHasCol(!hasCol);
            }

            return onClick;
          }()
        }, "colorButton")],
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mr": -1,
          children: data.chemicals.map(function (chemical) {
            return (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "tint",
              "width": "129.5px",
              "lineHeight": 1.75,
              "content": chemical.title,
              "tooltip": "pH: " + chemical.pH,
              "backgroundColor": hasCol ? chemical.pHCol : "primary",
              "onClick": function () {
                function onClick() {
                  return act('dispense', {
                    reagent: chemical.id
                  });
                }

                return onClick;
              }()
            }, chemical.id);
          })
        })
      }, "dispense"), !!data.canStore && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Storage",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: ["Transfer amount:", (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "initial": 5,
            "value": data.amount
          }), "u"]
        }),
        children: [(0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": data.storedVol / data.maxVol,
          children: (0, _math.toFixed)(data.storedVol) + ' units / ' + data.maxVol + ' units'
        }), (0, _inferno.createComponentVNode)(2, ChemicalBuffer, {
          children: storedContents.map(function (chemical) {
            return (0, _inferno.createComponentVNode)(2, ChemicalBufferEntry, {
              "chemical": chemical,
              "transferTo": "beaker"
            }, chemical.id);
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Beaker",
        "buttons": beakerTransferAmounts.map(function (amount) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "minus",
            "disabled": recording,
            "content": amount,
            "onClick": function () {
              function onClick() {
                return act('remove', {
                  amount: amount
                });
              }

              return onClick;
            }()
          }, amount);
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Beaker",
            "buttons": !!data.isBeakerLoaded && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "eject",
              "content": "Eject",
              "disabled": !data.isBeakerLoaded,
              "onClick": function () {
                function onClick() {
                  return act('eject');
                }

                return onClick;
              }()
            }),
            children: recording && 'Virtual beaker' || data.isBeakerLoaded && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "initial": 0,
              "value": data.beakerCurrentVolume
            }), (0, _inferno.createTextVNode)("/"), data.beakerMaxVolume, (0, _inferno.createTextVNode)(" units")], 0) || 'No beaker'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Contents",
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "label",
              children: !data.isBeakerLoaded && !recording && 'N/A' || beakerContents.length === 0 && 'Nothing'
            }), (0, _inferno.createComponentVNode)(2, ChemicalBeaker, {
              children: beakerContents.map(function (chemical) {
                return (0, _inferno.createComponentVNode)(2, ChemicalBeakerEntry, {
                  "chemical": chemical,
                  "transferTo": "beaker"
                }, chemical.id);
              })
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: ["pH:", (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
                "initial": 7.0,
                "value": data.beakerCurrentpH
              })]
            }, "pH")]
          })]
        })
      })]
    })
  });
};

exports.ChemDispenser = ChemDispenser;
var ChemicalBuffer = _components.Table;

var ChemicalBufferEntry = function ChemicalBufferEntry(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var chemical = props.chemical,
      transferTo = props.transferTo;
  return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "color": "label",
      children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
        "value": chemical.volume,
        "initial": 0
      }), " units of " + chemical.name]
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "Dispense",
        "icon": "download",
        "disabled": !!data.recordingRecipe || !data.isBeakerLoaded,
        "mt": 0.5,
        "onClick": function () {
          function onClick() {
            return act('unstore', {
              id: chemical.id
            });
          }

          return onClick;
        }()
      })
    })]
  }, chemical.id);
};

var ChemicalBeaker = _components.Table;

var ChemicalBeakerEntry = function ChemicalBeakerEntry(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var chemical = props.chemical,
      transferTo = props.transferTo;
  return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "color": "label",
      children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
        "value": chemical.volume,
        "initial": 0
      }), " units of " + chemical.name]
    }), !!data.canStore && (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "Store",
        "icon": "upload",
        "disabled": !!data.recordingRecipe,
        "mt": 0.5,
        "onClick": function () {
          function onClick() {
            return act('store', {
              id: chemical.id
            });
          }

          return onClick;
        }()
      })
    })]
  }, chemical.id);
};

/***/ }),

/***/ "./packages/tgui/interfaces/ChemFilter.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/ChemFilter.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemFilter = exports.ChemFilterPane = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemFilterPane = function ChemFilterPane(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act;

  var title = props.title,
      list = props.list,
      reagentName = props.reagentName,
      onReagentInput = props.onReagentInput;
  var titleKey = title.toLowerCase();
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": title,
    "minHeight": "240px",
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Input, {
      "placeholder": "Reagent",
      "width": "140px",
      "onInput": function () {
        function onInput(e, value) {
          return onReagentInput(value);
        }

        return onInput;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "ml": 1,
      "icon": "plus",
      "onClick": function () {
        function onClick() {
          return act('add', {
            which: titleKey,
            name: reagentName
          });
        }

        return onClick;
      }()
    })], 4),
    children: list.map(function (filter) {
      return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "minus",
        "content": filter,
        "onClick": function () {
          function onClick() {
            return act('remove', {
              which: titleKey,
              reagent: filter
            });
          }

          return onClick;
        }()
      })], 4, filter);
    })
  });
};

exports.ChemFilterPane = ChemFilterPane;

var ChemFilter = function ChemFilter(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _data$left = data.left,
      left = _data$left === void 0 ? [] : _data$left,
      _data$right = data.right,
      right = _data$right === void 0 ? [] : _data$right;

  var _useLocalState = (0, _backend.useLocalState)(context, 'leftName', ''),
      leftName = _useLocalState[0],
      setLeftName = _useLocalState[1];

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'rightName', ''),
      rightName = _useLocalState2[0],
      setRightName = _useLocalState2[1];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 300,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "spacing": 1,
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          children: (0, _inferno.createComponentVNode)(2, ChemFilterPane, {
            "title": "Left",
            "list": left,
            "reagentName": leftName,
            "onReagentInput": function () {
              function onReagentInput(value) {
                return setLeftName(value);
              }

              return onReagentInput;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          children: (0, _inferno.createComponentVNode)(2, ChemFilterPane, {
            "title": "Right",
            "list": right,
            "reagentName": rightName,
            "onReagentInput": function () {
              function onReagentInput(value) {
                return setRightName(value);
              }

              return onReagentInput;
            }()
          })
        })]
      })
    })
  });
};

exports.ChemFilter = ChemFilter;

/***/ }),

/***/ "./packages/tgui/interfaces/ChemHeater.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/ChemHeater.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemHeater = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _BeakerContents = __webpack_require__(/*! ./common/BeakerContents */ "./packages/tgui/interfaces/common/BeakerContents.js");

var ChemHeater = function ChemHeater(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var targetTemp = data.targetTemp,
      isActive = data.isActive,
      isBeakerLoaded = data.isBeakerLoaded,
      currentTemp = data.currentTemp,
      beakerCurrentVolume = data.beakerCurrentVolume,
      beakerMaxVolume = data.beakerMaxVolume,
      _data$beakerContents = data.beakerContents,
      beakerContents = _data$beakerContents === void 0 ? [] : _data$beakerContents;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 320,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Thermostat",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": isActive ? 'power-off' : 'times',
          "selected": isActive,
          "content": isActive ? 'On' : 'Off',
          "onClick": function () {
            function onClick() {
              return act('power');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Target",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "width": "65px",
              "unit": "K",
              "step": 10,
              "stepPixelSize": 3,
              "value": (0, _math.round)(targetTemp),
              "minValue": 0,
              "maxValue": 1000,
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('temperature', {
                    target: value
                  });
                }

                return onDrag;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Reading",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "width": "60px",
              "textAlign": "right",
              children: isBeakerLoaded && (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
                "value": currentTemp,
                "format": function () {
                  function format(value) {
                    return (0, _math.toFixed)(value) + ' K';
                  }

                  return format;
                }()
              }) || '—'
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Beaker",
        "buttons": !!isBeakerLoaded && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "color": "label",
          "mr": 2,
          children: [beakerCurrentVolume, " / ", beakerMaxVolume, " units"]
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject",
          "onClick": function () {
            function onClick() {
              return act('eject');
            }

            return onClick;
          }()
        })], 4),
        children: [(0, _inferno.createComponentVNode)(2, _BeakerContents.BeakerContents, {
          "beakerLoaded": isBeakerLoaded,
          "beakerContents": beakerContents
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "label",
          children: [Number(data.currentpH).toFixed(data.partRating), " pH"]
        }, "pH")]
      })]
    })
  });
};

exports.ChemHeater = ChemHeater;

/***/ }),

/***/ "./packages/tgui/interfaces/ChemMaster.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/ChemMaster.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemMaster = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemMaster = function ChemMaster(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var screen = data.screen;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 465,
    "height": 550,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: screen === 'analyze' && (0, _inferno.createComponentVNode)(2, AnalysisResults) || (0, _inferno.createComponentVNode)(2, ChemMasterContent)
    })
  });
};

exports.ChemMaster = ChemMaster;

var ChemMasterContent = function ChemMasterContent(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var screen = data.screen,
      _data$beakerContents = data.beakerContents,
      beakerContents = _data$beakerContents === void 0 ? [] : _data$beakerContents,
      _data$bufferContents = data.bufferContents,
      bufferContents = _data$bufferContents === void 0 ? [] : _data$bufferContents,
      beakerCurrentVolume = data.beakerCurrentVolume,
      beakerMaxVolume = data.beakerMaxVolume,
      isBeakerLoaded = data.isBeakerLoaded,
      isPillBottleLoaded = data.isPillBottleLoaded,
      pillBottleCurrentAmount = data.pillBottleCurrentAmount,
      pillBottleMaxAmount = data.pillBottleMaxAmount;

  if (screen === 'analyze') {
    return (0, _inferno.createComponentVNode)(2, AnalysisResults);
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Beaker",
    "buttons": !!data.isBeakerLoaded && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": "label",
      "mr": 2,
      children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
        "value": beakerCurrentVolume,
        "initial": 0
      }), " / " + beakerMaxVolume + " units"]
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "content": "Eject",
      "onClick": function () {
        function onClick() {
          return act('eject');
        }

        return onClick;
      }()
    })], 4),
    children: [!isBeakerLoaded && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      "mt": "3px",
      "mb": "5px",
      children: "No beaker loaded."
    }), !!isBeakerLoaded && beakerContents.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      "mt": "3px",
      "mb": "5px",
      children: "Beaker is empty."
    }), (0, _inferno.createComponentVNode)(2, ChemicalBuffer, {
      children: beakerContents.map(function (chemical) {
        return (0, _inferno.createComponentVNode)(2, ChemicalBufferEntry, {
          "chemical": chemical,
          "transferTo": "buffer"
        }, chemical.id);
      })
    })]
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Buffer",
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": "label",
      "mr": 1,
      children: "Mode:"
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "color": data.mode ? 'good' : 'bad',
      "icon": data.mode ? 'exchange-alt' : 'times',
      "content": data.mode ? 'Transfer' : 'Destroy',
      "onClick": function () {
        function onClick() {
          return act('toggleMode');
        }

        return onClick;
      }()
    })], 4),
    children: [bufferContents.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      "mt": "3px",
      "mb": "5px",
      children: "Buffer is empty."
    }), (0, _inferno.createComponentVNode)(2, ChemicalBuffer, {
      children: bufferContents.map(function (chemical) {
        return (0, _inferno.createComponentVNode)(2, ChemicalBufferEntry, {
          "chemical": chemical,
          "transferTo": "beaker"
        }, chemical.id);
      })
    })]
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Packaging",
    children: (0, _inferno.createComponentVNode)(2, PackagingControls)
  }), !!isPillBottleLoaded && (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Pill Bottle",
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": "label",
      "mr": 2,
      children: [pillBottleCurrentAmount, " / ", pillBottleMaxAmount, " pills"]
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "content": "Eject",
      "onClick": function () {
        function onClick() {
          return act('ejectPillBottle');
        }

        return onClick;
      }()
    })], 4)
  })], 0);
};

var ChemicalBuffer = _components.Table;

var ChemicalBufferEntry = function ChemicalBufferEntry(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act;

  var chemical = props.chemical,
      transferTo = props.transferTo;
  return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "color": "label",
      children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
        "value": chemical.volume,
        "initial": 0
      }), " units of " + chemical.name]
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "1",
        "onClick": function () {
          function onClick() {
            return act('transfer', {
              id: chemical.id,
              amount: 1,
              to: transferTo
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "5",
        "onClick": function () {
          function onClick() {
            return act('transfer', {
              id: chemical.id,
              amount: 5,
              to: transferTo
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "10",
        "onClick": function () {
          function onClick() {
            return act('transfer', {
              id: chemical.id,
              amount: 10,
              to: transferTo
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "All",
        "onClick": function () {
          function onClick() {
            return act('transfer', {
              id: chemical.id,
              amount: 1000,
              to: transferTo
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "ellipsis-h",
        "title": "Custom amount",
        "onClick": function () {
          function onClick() {
            return act('transfer', {
              id: chemical.id,
              amount: -1,
              to: transferTo
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "question",
        "title": "Analyze",
        "onClick": function () {
          function onClick() {
            return act('analyze', {
              id: chemical.id
            });
          }

          return onClick;
        }()
      })]
    })]
  }, chemical.id);
};

var PackagingControlsItem = function PackagingControlsItem(props) {
  var label = props.label,
      amountUnit = props.amountUnit,
      amount = props.amount,
      onChangeAmount = props.onChangeAmount,
      onCreate = props.onCreate,
      sideNote = props.sideNote;
  return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
    "label": label,
    children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
      "width": "84px",
      "unit": amountUnit,
      "step": 1,
      "stepPixelSize": 15,
      "value": amount,
      "minValue": 1,
      "maxValue": 20,
      "onChange": onChangeAmount
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "ml": 1,
      "content": "Create",
      "onClick": onCreate
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "ml": 1,
      "color": "label",
      children: sideNote
    })]
  });
};

var PackagingControls = function PackagingControls(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act,
      data = _useBackend4.data;

  var _useSharedState = (0, _backend.useSharedState)(context, 'pillAmount', 1),
      pillAmount = _useSharedState[0],
      setPillAmount = _useSharedState[1];

  var _useSharedState2 = (0, _backend.useSharedState)(context, 'patchAmount', 1),
      patchAmount = _useSharedState2[0],
      setPatchAmount = _useSharedState2[1];

  var _useSharedState3 = (0, _backend.useSharedState)(context, 'bottleAmount', 1),
      bottleAmount = _useSharedState3[0],
      setBottleAmount = _useSharedState3[1];

  var _useSharedState4 = (0, _backend.useSharedState)(context, 'packAmount', 1),
      packAmount = _useSharedState4[0],
      setPackAmount = _useSharedState4[1];

  var _useSharedState5 = (0, _backend.useSharedState)(context, 'setvialAmount', 1),
      vialAmount = _useSharedState5[0],
      setvialAmount = _useSharedState5[1];

  var _useSharedState6 = (0, _backend.useSharedState)(context, 'setdartAmount', 1),
      dartAmount = _useSharedState6[0],
      setdartAmount = _useSharedState6[1];

  var condi = data.condi,
      chosenPillStyle = data.chosenPillStyle,
      _data$pillStyles = data.pillStyles,
      pillStyles = _data$pillStyles === void 0 ? [] : _data$pillStyles;
  return (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
    children: [!condi && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Pill type",
      children: pillStyles.map(function (pill) {
        return (0, _inferno.createComponentVNode)(2, _components.Button, {
          "width": "30px",
          "selected": pill.id === chosenPillStyle,
          "textAlign": "center",
          "color": "transparent",
          "onClick": function () {
            function onClick() {
              return act('pillStyle', {
                id: pill.id
              });
            }

            return onClick;
          }(),
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "mx": -1,
            "className": pill.className
          })
        }, pill.id);
      })
    }), !condi && (0, _inferno.createComponentVNode)(2, PackagingControlsItem, {
      "label": "Pills",
      "amount": pillAmount,
      "amountUnit": "pills",
      "sideNote": "max 50u",
      "onChangeAmount": function () {
        function onChangeAmount(e, value) {
          return setPillAmount(value);
        }

        return onChangeAmount;
      }(),
      "onCreate": function () {
        function onCreate() {
          return act('create', {
            type: 'pill',
            amount: pillAmount,
            volume: 'auto'
          });
        }

        return onCreate;
      }()
    }), !condi && (0, _inferno.createComponentVNode)(2, PackagingControlsItem, {
      "label": "Patches",
      "amount": patchAmount,
      "amountUnit": "patches",
      "sideNote": "max 40u",
      "onChangeAmount": function () {
        function onChangeAmount(e, value) {
          return setPatchAmount(value);
        }

        return onChangeAmount;
      }(),
      "onCreate": function () {
        function onCreate() {
          return act('create', {
            type: 'patch',
            amount: patchAmount,
            volume: 'auto'
          });
        }

        return onCreate;
      }()
    }), !condi && (0, _inferno.createComponentVNode)(2, PackagingControlsItem, {
      "label": "Bottles",
      "amount": bottleAmount,
      "amountUnit": "bottles",
      "sideNote": "max 30u",
      "onChangeAmount": function () {
        function onChangeAmount(e, value) {
          return setBottleAmount(value);
        }

        return onChangeAmount;
      }(),
      "onCreate": function () {
        function onCreate() {
          return act('create', {
            type: 'bottle',
            amount: bottleAmount,
            volume: 'auto'
          });
        }

        return onCreate;
      }()
    }), !condi && (0, _inferno.createComponentVNode)(2, PackagingControlsItem, {
      "label": "Hypovials",
      "amount": vialAmount,
      "amountUnit": "vials",
      "sideNote": "max 60u",
      "onChangeAmount": function () {
        function onChangeAmount(e, value) {
          return setvialAmount(value);
        }

        return onChangeAmount;
      }(),
      "onCreate": function () {
        function onCreate() {
          return act('create', {
            type: 'hypoVial',
            amount: vialAmount,
            volume: 'auto'
          });
        }

        return onCreate;
      }()
    }), !condi && (0, _inferno.createComponentVNode)(2, PackagingControlsItem, {
      "label": "Smartdarts",
      "amount": dartAmount,
      "amountUnit": "darts",
      "sideNote": "max 20u",
      "onChangeAmount": function () {
        function onChangeAmount(e, value) {
          return setdartAmount(value);
        }

        return onChangeAmount;
      }(),
      "onCreate": function () {
        function onCreate() {
          return act('create', {
            type: 'smartDart',
            amount: dartAmount,
            volume: 'auto'
          });
        }

        return onCreate;
      }()
    }), !!condi && (0, _inferno.createComponentVNode)(2, PackagingControlsItem, {
      "label": "Packs",
      "amount": packAmount,
      "amountUnit": "packs",
      "sideNote": "max 10u",
      "onChangeAmount": function () {
        function onChangeAmount(e, value) {
          return setPackAmount(value);
        }

        return onChangeAmount;
      }(),
      "onCreate": function () {
        function onCreate() {
          return act('create', {
            type: 'condimentPack',
            amount: packAmount,
            volume: 'auto'
          });
        }

        return onCreate;
      }()
    }), !!condi && (0, _inferno.createComponentVNode)(2, PackagingControlsItem, {
      "label": "Bottles",
      "amount": bottleAmount,
      "amountUnit": "bottles",
      "sideNote": "max 50u",
      "onChangeAmount": function () {
        function onChangeAmount(e, value) {
          return setBottleAmount(value);
        }

        return onChangeAmount;
      }(),
      "onCreate": function () {
        function onCreate() {
          return act('create', {
            type: 'condimentBottle',
            amount: bottleAmount,
            volume: 'auto'
          });
        }

        return onCreate;
      }()
    })]
  });
};

var AnalysisResults = function AnalysisResults(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      act = _useBackend5.act,
      data = _useBackend5.data;

  var fermianalyze = props.fermianalyze;
  var analyzeVars = data.analyzeVars;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Analysis Results",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "arrow-left",
      "content": "Back",
      "onClick": function () {
        function onClick() {
          return act('goScreen', {
            screen: 'home'
          });
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Name",
        children: analyzeVars.name
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "State",
        children: analyzeVars.state
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Color",
        children: [(0, _inferno.createComponentVNode)(2, _components.ColorBox, {
          "color": analyzeVars.color,
          "mr": 1
        }), analyzeVars.color]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Description",
        children: analyzeVars.description
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Metabolization Rate",
        children: [analyzeVars.metaRate, " u/minute"]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Overdose Threshold",
        children: analyzeVars.overD
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Addiction Threshold",
        children: analyzeVars.addicD
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Purity",
        children: analyzeVars.purityF
      }), !!data.fermianalyze && // why did you do that before? it's bad.
      (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Inverse Ratio",
        children: analyzeVars.inverseRatioF
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Purity E",
        children: analyzeVars.purityE
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Lower Optimal Temperature",
        children: analyzeVars.minTemp
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Upper Optimal Temperature",
        children: analyzeVars.maxTemp
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Explosive Temperature",
        children: analyzeVars.eTemp
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "pH Peak",
        children: analyzeVars.pHpeak
      })], 4)]
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/ChemPress.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/ChemPress.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemPress = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemPress = function ChemPress(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var current_volume = data.current_volume,
      product_name = data.product_name,
      pill_style = data.pill_style,
      _data$pill_styles = data.pill_styles,
      pill_styles = _data$pill_styles === void 0 ? [] : _data$pill_styles,
      product = data.product,
      min_volume = data.min_volume,
      max_volume = data.max_volume;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 227,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Product",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "content": "Pills",
              "checked": product === "pill",
              "onClick": function () {
                function onClick() {
                  return act('change_product', {
                    product: "pill"
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "content": "Patches",
              "checked": product === "patch",
              "onClick": function () {
                function onClick() {
                  return act('change_product', {
                    product: "patch"
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "content": "Bottles",
              "checked": product === "bottle",
              "onClick": function () {
                function onClick() {
                  return act('change_product', {
                    product: "bottle"
                  });
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Volume",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": current_volume,
              "unit": "u",
              "width": "43px",
              "minValue": min_volume,
              "maxValue": max_volume,
              "step": 1,
              "stepPixelSize": 2,
              "onChange": function () {
                function onChange(e, value) {
                  return act('change_current_volume', {
                    volume: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Name",
            children: [(0, _inferno.createComponentVNode)(2, _components.Input, {
              "value": product_name,
              "placeholder": product_name,
              "onChange": function () {
                function onChange(e, value) {
                  return act('change_product_name', {
                    name: value
                  });
                }

                return onChange;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "as": "span",
              children: product
            })]
          }), product === "pill" && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Style",
            children: pill_styles.map(function (pill) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "width": "30px",
                "selected": pill.id === pill_style,
                "textAlign": "center",
                "color": "transparent",
                "onClick": function () {
                  function onClick() {
                    return act('change_pill_style', {
                      id: pill.id
                    });
                  }

                  return onClick;
                }(),
                children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                  "mx": -1,
                  "className": pill.class_name
                })
              }, pill.id);
            })
          })]
        })
      })
    })
  });
};

exports.ChemPress = ChemPress;

/***/ }),

/***/ "./packages/tgui/interfaces/ChemReactionChamber.js":
/*!*********************************************************!*\
  !*** ./packages/tgui/interfaces/ChemReactionChamber.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemReactionChamber = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemReactionChamber = function ChemReactionChamber(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _useLocalState = (0, _backend.useLocalState)(context, 'reagentName', ''),
      reagentName = _useLocalState[0],
      setReagentName = _useLocalState[1];

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'reagentQuantity', 1),
      reagentQuantity = _useLocalState2[0],
      setReagentQuantity = _useLocalState2[1];

  var emptying = data.emptying;
  var reagents = data.reagents || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 250,
    "height": 225,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Reagents",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "bold": true,
          "color": emptying ? "bad" : "good",
          children: emptying ? "Emptying" : "Filling"
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createVNode)(1, "tr", "LabledList__row", [(0, _inferno.createVNode)(1, "td", "LabeledList__cell", (0, _inferno.createComponentVNode)(2, _components.Input, {
            "fluid": true,
            "value": "",
            "placeholder": "Reagent Name",
            "onInput": function () {
              function onInput(e, value) {
                return setReagentName(value);
              }

              return onInput;
            }()
          }), 2, {
            "colSpan": "2"
          }), (0, _inferno.createVNode)(1, "td", (0, _react.classes)(["LabeledList__buttons", "LabeledList__cell"]), [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
            "value": reagentQuantity,
            "minValue": 1,
            "maxValue": 100,
            "step": 1,
            "stepPixelSize": 3,
            "width": "39px",
            "onDrag": function () {
              function onDrag(e, value) {
                return setReagentQuantity(value);
              }

              return onDrag;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "mr": 1
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "plus",
            "onClick": function () {
              function onClick() {
                return act('add', {
                  chem: reagentName,
                  amount: reagentQuantity
                });
              }

              return onClick;
            }()
          })], 4)], 4), (0, _collections.map)(function (amount, reagent) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": reagent,
              "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "minus",
                "color": "bad",
                "onClick": function () {
                  function onClick() {
                    return act('remove', {
                      chem: reagent
                    });
                  }

                  return onClick;
                }()
              }),
              children: amount
            }, reagent);
          })(reagents)]
        })
      })
    })
  });
};

exports.ChemReactionChamber = ChemReactionChamber;

/***/ }),

/***/ "./packages/tgui/interfaces/ChemSplitter.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/ChemSplitter.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemSplitter = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemSplitter = function ChemSplitter(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var straight = data.straight,
      side = data.side,
      max_transfer = data.max_transfer;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 220,
    "height": 105,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Straight",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": straight,
              "unit": "u",
              "width": "55px",
              "minValue": 1,
              "maxValue": max_transfer,
              "format": function () {
                function format(value) {
                  return (0, _math.toFixed)(value, 2);
                }

                return format;
              }(),
              "step": 0.05,
              "stepPixelSize": 4,
              "onChange": function () {
                function onChange(e, value) {
                  return act('set_amount', {
                    target: 'straight',
                    amount: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Side",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": side,
              "unit": "u",
              "width": "55px",
              "minValue": 1,
              "maxValue": max_transfer,
              "format": function () {
                function format(value) {
                  return (0, _math.toFixed)(value, 2);
                }

                return format;
              }(),
              "step": 0.05,
              "stepPixelSize": 4,
              "onChange": function () {
                function onChange(e, value) {
                  return act('set_amount', {
                    target: 'side',
                    amount: value
                  });
                }

                return onChange;
              }()
            })
          })]
        })
      })
    })
  });
};

exports.ChemSplitter = ChemSplitter;

/***/ }),

/***/ "./packages/tgui/interfaces/ChemSynthesizer.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/ChemSynthesizer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ChemSynthesizer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ChemSynthesizer = function ChemSynthesizer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var amount = data.amount,
      current_reagent = data.current_reagent,
      _data$chemicals = data.chemicals,
      chemicals = _data$chemicals === void 0 ? [] : _data$chemicals,
      _data$possible_amount = data.possible_amounts,
      possible_amounts = _data$possible_amount === void 0 ? [] : _data$possible_amount;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 375,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          children: possible_amounts.map(function (possible_amount) {
            return (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "plus",
              "content": (0, _math.toFixed)(possible_amount, 0),
              "selected": possible_amount === amount,
              "onClick": function () {
                function onClick() {
                  return act('amount', {
                    target: possible_amount
                  });
                }

                return onClick;
              }()
            }, (0, _math.toFixed)(possible_amount, 0));
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mt": 1,
          children: chemicals.map(function (chemical) {
            return (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "tint",
              "content": chemical.title,
              "width": "129px",
              "selected": chemical.id === current_reagent,
              "onClick": function () {
                function onClick() {
                  return act('select', {
                    reagent: chemical.id
                  });
                }

                return onClick;
              }()
            }, chemical.id);
          })
        })]
      })
    })
  });
};

exports.ChemSynthesizer = ChemSynthesizer;

/***/ }),

/***/ "./packages/tgui/interfaces/CivCargoHoldTerminal.js":
/*!**********************************************************!*\
  !*** ./packages/tgui/interfaces/CivCargoHoldTerminal.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CivCargoHoldTerminal = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var CivCargoHoldTerminal = function CivCargoHoldTerminal(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var pad = data.pad,
      sending = data.sending,
      status_report = data.status_report,
      id_inserted = data.id_inserted,
      id_bounty_info = data.id_bounty_info,
      id_bounty_value = data.id_bounty_value,
      id_bounty_num = data.id_bounty_num;
  var in_text = "Welcome valued employee.";
  var out_text = "To begin, insert your ID into the console.";
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    "width": 500,
    "height": 375,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: [(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
            "color": !id_inserted ? 'default' : 'blue',
            children: id_inserted ? in_text : out_text
          }), (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": "Cargo Pad",
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Status",
                "color": pad ? "good" : "bad",
                children: pad ? "Online" : "Not Found"
              }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Cargo Report",
                children: status_report
              })]
            })
          }), (0, _inferno.createComponentVNode)(2, BountyTextBox)]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "m": 1,
          children: (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "icon": "sync",
            "content": "Check Contents",
            "disabled": !pad || !id_inserted,
            "onClick": function () {
              function onClick() {
                return act('recalc');
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "icon": sending ? 'times' : 'arrow-up',
            "content": sending ? "Stop Sending" : "Send Goods",
            "selected": sending,
            "disabled": !pad || !id_inserted,
            "onClick": function () {
              function onClick() {
                return act(sending ? 'stop' : 'send');
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "icon": id_bounty_info ? 'recycle' : 'pen',
            "color": id_bounty_info ? 'green' : 'default',
            "content": id_bounty_info ? "Replace Bounty" : "New Bounty",
            "disabled": !id_inserted,
            "onClick": function () {
              function onClick() {
                return act('bounty');
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "icon": 'download',
            "content": "Eject",
            "disabled": !id_inserted,
            "onClick": function () {
              function onClick() {
                return act('eject');
              }

              return onClick;
            }()
          })], 4)
        })]
      })
    })
  });
};

exports.CivCargoHoldTerminal = CivCargoHoldTerminal;

var BountyTextBox = function BountyTextBox(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      data = _useBackend2.data;

  var id_bounty_info = data.id_bounty_info,
      id_bounty_value = data.id_bounty_value,
      id_bounty_num = data.id_bounty_num;
  var na_text = "N/A, please add a new bounty.";
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Bounty Info",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Description",
        children: id_bounty_info ? id_bounty_info : na_text
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Quantity",
        children: id_bounty_info ? id_bounty_num : "N/A"
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Value",
        children: id_bounty_info ? id_bounty_value : "N/A"
      })]
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/ClockworkSlab.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/ClockworkSlab.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ClockworkSlab = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var REC_RATVAR = ""; // You may ask "why is this not inside ClockworkSlab"
// It's because cslab gets called every time. Lag is bad.

for (var index = 0; index < Math.min(Math.random() * 100); index++) {
  REC_RATVAR += "HONOR RATVAR ";
}

var ClockworkSlab = function ClockworkSlab(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$recollection = data.recollection,
      recollection = _data$recollection === void 0 ? true : _data$recollection,
      _data$recollection_ca = data.recollection_categories,
      recollection_categories = _data$recollection_ca === void 0 ? [] : _data$recollection_ca,
      _data$rec_section = data.rec_section,
      rec_section = _data$rec_section === void 0 ? null : _data$rec_section,
      _data$rec_binds = data.rec_binds,
      rec_binds = _data$rec_binds === void 0 ? [] : _data$rec_binds,
      _data$scripture = data.scripture,
      scripture = _data$scripture === void 0 ? {} : _data$scripture,
      _data$tier_infos = data.tier_infos,
      tier_infos = _data$tier_infos === void 0 ? {} : _data$tier_infos,
      _data$power = data.power,
      power = _data$power === void 0 ? "0 W" : _data$power,
      _data$power_unformatt = data.power_unformatted,
      power_unformatted = _data$power_unformatt === void 0 ? 0 : _data$power_unformatt,
      _data$HONOR_RATVAR = data.HONOR_RATVAR,
      HONOR_RATVAR = _data$HONOR_RATVAR === void 0 ? false : _data$HONOR_RATVAR;

  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 'Application'),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  var scriptInTab = scripture && scripture[tab] || [];
  var tierInfo = tier_infos && tier_infos[tab] || {};
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "theme": "clockcult",
    "width": 800,
    "height": 420,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: recollection ? // tutorial
      (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Recollection",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "cog",
          "tooltipPosition": "left",
          "onClick": function () {
            function onClick() {
              return act('toggle');
            }

            return onClick;
          }(),
          children: "Recital"
        }),
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          children: HONOR_RATVAR ? (0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": "span",
            "textColor": "#BE8700",
            "fontSize": 2,
            "bold": true,
            children: REC_RATVAR
          }) : (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": "span",
            "textColor": "#BE8700",
            "fontSize": 2,
            "bold": true,
            children: "Chetr nyy hagehguf naq ubabe Ratvar."
          }), (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
            children: "NOTICE: This information is out of date. Read the Ark & You primer in your backpack or read the wiki page for current info."
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: ["These pages serve as the archives of Ratvar, the Clockwork Justiciar. This section of your slab has information on being as a Servant, advice for what to do next, and pointers for serving the master well. You should recommended that you check this area for help if you get stuck or need guidance on what to do next.", (0, _inferno.createVNode)(1, "br"), " ", (0, _inferno.createVNode)(1, "br"), "Disclaimer: Many objects, terms, and phrases, such as Servant, Cache, and Slab, are capitalized like proper nouns. This is a quirk of the Ratvarian language do not let it confuse you! You are free to use the names in pronoun form when speaking in normal languages."]
          })], 4)
        }), recollection_categories == null ? void 0 : recollection_categories.map(function (cat) {
          return (0, _inferno.createFragment)([(0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "tooltip": cat.desc,
            "tooltipPosition": 'right',
            "onClick": function () {
              function onClick() {
                return act('rec_category', {
                  "category": cat.name
                });
              }

              return onClick;
            }(),
            children: cat.name
          })], 4, cat.name);
        }), (0, _inferno.createComponentVNode)(2, _components.Divider), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "textColor": '#BE8700',
            "fontSize": 2.3,
            children: (rec_section == null ? void 0 : rec_section.title) ? rec_section.title : '500 Slab Internal archives not found.'
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "br"), (rec_section == null ? void 0 : rec_section.info) ? rec_section.info : "One of the cogscarabs must've misplaced this section."]
        }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Divider), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "textColor": '#BE8700',
            "fontSize": 2.3,
            children: "Quickbound Scripture"
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "italic": true,
            children: "You can have up to five scriptures bound to action buttons for easy use."
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "br"), rec_binds == null ? void 0 : rec_binds.map(function (bind) {
            return (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("A "), (0, _inferno.createVNode)(1, "b", null, "Quickbind", 16), (0, _inferno.createTextVNode)(" slot ("), rec_binds.indexOf(bind) + 1, (0, _inferno.createTextVNode)("), currently set to\xA0"), (0, _inferno.createVNode)(1, "span", null, (bind == null ? void 0 : bind.name) ? bind.name : "None", 0, {
              "style": "color:" + (bind ? bind.color : "#BE8700")
            }), (0, _inferno.createTextVNode)("."), (0, _inferno.createVNode)(1, "br")], 0, bind.name ? bind.name : "none");
          })]
        })]
      }) : (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Power",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "book",
          "tooltip": "Tutorial",
          "tooltipPosition": "left",
          "onClick": function () {
            function onClick() {
              return act('toggle');
            }

            return onClick;
          }(),
          children: "Recollection"
        }),
        children: [(0, _inferno.createVNode)(1, "b", null, power, 0), " power is available for scripture and other consumers.", (0, _inferno.createComponentVNode)(2, _components.Section, {
          "level": 2,
          children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
            children: (0, _collections.map)(function (scriptures, name) {
              return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
                "selected": tab === name,
                "onClick": function () {
                  function onClick() {
                    return setTab(name);
                  }

                  return onClick;
                }(),
                children: name
              }, name);
            })(scripture)
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "textColor": '#B18B25',
            "bold": !!tierInfo.ready,
            "italic": !tierInfo.ready,
            children: tierInfo.ready ? "These scriptures are permanently unlocked." : tierInfo.requirement
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "textColor": '#DAAA18',
            children: ["Scriptures in ", (0, _inferno.createVNode)(1, "b", null, "yellow", 16), " are related to construction and building."]
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "textColor": '#6E001A',
            children: ["Scriptures in ", (0, _inferno.createVNode)(1, "b", null, "red", 16), " are related to attacking and offense."]
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "textColor": '#1E8CE1',
            children: ["Scriptures in ", (0, _inferno.createVNode)(1, "b", null, "blue", 16), " are related to healing and defense."]
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "textColor": '#AF0AAF',
            children: ["Scriptures in ", (0, _inferno.createVNode)(1, "b", null, "purple", 16), " are niche but still important!"]
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "as": 'span',
            "textColor": '#DAAA18',
            "italic": true,
            children: "Scriptures with italicized names are important to success."
          }), (0, _inferno.createComponentVNode)(2, _components.Divider), (0, _inferno.createComponentVNode)(2, _components.Table, {
            children: scriptInTab == null ? void 0 : scriptInTab.map(function (script) {
              return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
                "className": "candystripe",
                children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                  "italic": !!script.important,
                  "color": script.fontcolor,
                  children: [(0, _inferno.createVNode)(1, "b", null, script.name, 0), "\n                          " + script.descname + "\n                          " + (script.invokers || '') + "\n                        "]
                }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                  "collapsing": true,
                  "textAlign": "right",
                  children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                    "disabled": script.required_unformatted >= power_unformatted,
                    "tooltip": script.tip,
                    "tooltipPosition": 'left',
                    "onClick": function () {
                      function onClick() {
                        return act('recite', {
                          'script': script.type
                        });
                      }

                      return onClick;
                    }(),
                    children: "Recite " + script.required
                  })
                }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                  "collapsing": true,
                  "textAlign": "center",
                  children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                    "fluid": true,
                    "disabled": !script.quickbind,
                    "onClick": function () {
                      function onClick() {
                        return act('bind', {
                          'script': script.type
                        });
                      }

                      return onClick;
                    }(),
                    children: ["content=", script.bound ? "Unbind " + script.bound : 'Quickbind']
                  })
                })]
              }, script.name);
            })
          })]
        })]
      })
    })
  });
};

exports.ClockworkSlab = ClockworkSlab;

/***/ }),

/***/ "./packages/tgui/interfaces/CodexGigas.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/CodexGigas.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CodexGigas = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var PREFIXES = ["Dark", "Hellish", "Fallen", "Fiery", "Sinful", "Blood", "Fluffy"];
var TITLES = ["Lord", "Prelate", "Count", "Viscount", "Vizier", "Elder", "Adept"];
var NAMES = ["hal", "ve", "odr", "neit", "ci", "quon", "mya", "folth", "wren", "geyr", "hil", "niet", "twou", "phi", "coa"];
var SUFFIXES = ["the Red", "the Soulless", "the Master", "the Lord of all things", "Jr."]; // TODO: refactor the backend of this it's a trainwreck

var CodexGigas = function CodexGigas(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 450,
    "height": 450,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [data.name, (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Prefix",
            children: PREFIXES.map(function (prefix) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": prefix,
                "disabled": data.currentSection !== 1,
                "onClick": function () {
                  function onClick() {
                    return act(prefix + ' ');
                  }

                  return onClick;
                }()
              }, prefix.toLowerCase());
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Title",
            children: TITLES.map(function (title) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": title,
                "disabled": data.currentSection > 2,
                "onClick": function () {
                  function onClick() {
                    return act(title + ' ');
                  }

                  return onClick;
                }()
              }, title.toLowerCase());
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Name",
            children: NAMES.map(function (name) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": name,
                "disabled": data.currentSection > 4,
                "onClick": function () {
                  function onClick() {
                    return act(name);
                  }

                  return onClick;
                }()
              }, name.toLowerCase());
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Suffix",
            children: SUFFIXES.map(function (suffix) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": suffix,
                "disabled": data.currentSection !== 4,
                "onClick": function () {
                  function onClick() {
                    return act(' ' + suffix);
                  }

                  return onClick;
                }()
              }, suffix.toLowerCase());
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Submit",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Search",
              "disabled": data.currentSection < 4,
              "onClick": function () {
                function onClick() {
                  return act('search');
                }

                return onClick;
              }()
            })
          })]
        })]
      })
    })
  });
};

exports.CodexGigas = CodexGigas;

/***/ }),

/***/ "./packages/tgui/interfaces/ComputerFabricator.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/ComputerFabricator.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ComputerFabricator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ComputerFabricator = function ComputerFabricator(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Personal Computer Vendor",
    "width": 500,
    "height": 400,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "italic": true,
        "fontSize": "20px",
        children: "Your perfect device, only three steps away..."
      }), data.state !== 0 && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "mb": 1,
        "icon": "circle",
        "content": "Clear Order",
        "onClick": function () {
          function onClick() {
            return act('clean_order');
          }

          return onClick;
        }()
      }), data.state === 0 && (0, _inferno.createComponentVNode)(2, CfStep1), data.state === 1 && (0, _inferno.createComponentVNode)(2, CfStep2), data.state === 2 && (0, _inferno.createComponentVNode)(2, CfStep3), data.state === 3 && (0, _inferno.createComponentVNode)(2, CfStep4)]
    })
  });
}; // This had a pretty gross backend so this was unfortunately one of the
// best ways of doing it.


exports.ComputerFabricator = ComputerFabricator;

var CfStep1 = function CfStep1(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Step 1",
    "minHeight": "306px",
    children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 5,
      "bold": true,
      "textAlign": "center",
      "fontSize": "40px",
      children: "Choose your Device"
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 3,
      children: (0, _inferno.createComponentVNode)(2, _components.Grid, {
        "width": "100%",
        children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "icon": "laptop",
            "content": "Laptop",
            "textAlign": "center",
            "fontSize": "30px",
            "lineHeight": 2,
            "onClick": function () {
              function onClick() {
                return act('pick_device', {
                  pick: '1'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "icon": "tablet-alt",
            "content": "Tablet",
            "textAlign": "center",
            "fontSize": "30px",
            "lineHeight": 2,
            "onClick": function () {
              function onClick() {
                return act('pick_device', {
                  pick: '2'
                });
              }

              return onClick;
            }()
          })
        })]
      })
    })]
  });
};

var CfStep2 = function CfStep2(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Step 2: Customize your device",
    "minHeight": "282px",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "color": "good",
      children: [data.totalprice, " cr"]
    }),
    children: [(0, _inferno.createComponentVNode)(2, _components.Table, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "bold": true,
          "position": "relative",
          children: ["Battery:", (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
            "content": "Allows your device to operate without external utility power\nsource. Advanced batteries increase battery life.",
            "position": "right"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Standard",
            "selected": data.hw_battery === 1,
            "onClick": function () {
              function onClick() {
                return act('hw_battery', {
                  battery: '1'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Upgraded",
            "selected": data.hw_battery === 2,
            "onClick": function () {
              function onClick() {
                return act('hw_battery', {
                  battery: '2'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Advanced",
            "selected": data.hw_battery === 3,
            "onClick": function () {
              function onClick() {
                return act('hw_battery', {
                  battery: '3'
                });
              }

              return onClick;
            }()
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "bold": true,
          "position": "relative",
          children: ["Hard Drive:", (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
            "content": "Stores file on your device. Advanced drives can store more\nfiles, but use more power, shortening battery life.",
            "position": "right"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Standard",
            "selected": data.hw_disk === 1,
            "onClick": function () {
              function onClick() {
                return act('hw_disk', {
                  disk: '1'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Upgraded",
            "selected": data.hw_disk === 2,
            "onClick": function () {
              function onClick() {
                return act('hw_disk', {
                  disk: '2'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Advanced",
            "selected": data.hw_disk === 3,
            "onClick": function () {
              function onClick() {
                return act('hw_disk', {
                  disk: '3'
                });
              }

              return onClick;
            }()
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "bold": true,
          "position": "relative",
          children: ["Network Card:", (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
            "content": "Allows your device to wirelessly connect to stationwide NTNet\nnetwork. Basic cards are limited to on-station use, while\nadvanced cards can operate anywhere near the station, which\nincludes asteroid outposts",
            "position": "right"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "None",
            "selected": data.hw_netcard === 0,
            "onClick": function () {
              function onClick() {
                return act('hw_netcard', {
                  netcard: '0'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Standard",
            "selected": data.hw_netcard === 1,
            "onClick": function () {
              function onClick() {
                return act('hw_netcard', {
                  netcard: '1'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Advanced",
            "selected": data.hw_netcard === 2,
            "onClick": function () {
              function onClick() {
                return act('hw_netcard', {
                  netcard: '2'
                });
              }

              return onClick;
            }()
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "bold": true,
          "position": "relative",
          children: ["Nano Printer:", (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
            "content": "A device that allows for various paperwork manipulations,\nsuch as, scanning of documents or printing new ones.\nThis device was certified EcoFriendlyPlus and is capable of\nrecycling existing paper for printing purposes.",
            "position": "right"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "None",
            "selected": data.hw_nanoprint === 0,
            "onClick": function () {
              function onClick() {
                return act('hw_nanoprint', {
                  print: '0'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Standard",
            "selected": data.hw_nanoprint === 1,
            "onClick": function () {
              function onClick() {
                return act('hw_nanoprint', {
                  print: '1'
                });
              }

              return onClick;
            }()
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "bold": true,
          "position": "relative",
          children: ["Secondary Card Reader:", (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
            "content": "Adds a secondary RFID card reader, for manipulating or\nreading from a second standard RFID card.\nPlease note that a primary card reader is necessary to\nallow the device to read your identification, but one\nis included in the base price.",
            "position": "right"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "None",
            "selected": data.hw_card === 0,
            "onClick": function () {
              function onClick() {
                return act('hw_card', {
                  card: '0'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Standard",
            "selected": data.hw_card === 1,
            "onClick": function () {
              function onClick() {
                return act('hw_card', {
                  card: '1'
                });
              }

              return onClick;
            }()
          })
        })]
      }), data.devtype !== 2 && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "bold": true,
          "position": "relative",
          children: ["Processor Unit:", (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
            "content": "A component critical for your device's functionality.\nIt allows you to run programs from your hard drive.\nAdvanced CPUs use more power, but allow you to run\nmore programs on background at once.",
            "position": "right"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Standard",
            "selected": data.hw_cpu === 1,
            "onClick": function () {
              function onClick() {
                return act('hw_cpu', {
                  cpu: '1'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Advanced",
            "selected": data.hw_cpu === 2,
            "onClick": function () {
              function onClick() {
                return act('hw_cpu', {
                  cpu: '2'
                });
              }

              return onClick;
            }()
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "bold": true,
          "position": "relative",
          children: ["Tesla Relay:", (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
            "content": "An advanced wireless power relay that allows your device\nto connect to nearby area power controller to provide\nalternative power source. This component is currently\nunavailable on tablet computers due to size restrictions.",
            "position": "right"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "None",
            "selected": data.hw_tesla === 0,
            "onClick": function () {
              function onClick() {
                return act('hw_tesla', {
                  tesla: '0'
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Standard",
            "selected": data.hw_tesla === 1,
            "onClick": function () {
              function onClick() {
                return act('hw_tesla', {
                  tesla: '1'
                });
              }

              return onClick;
            }()
          })
        })]
      })], 4)]
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "mt": 3,
      "content": "Confirm Order",
      "color": "good",
      "textAlign": "center",
      "fontSize": "18px",
      "lineHeight": 2,
      "onClick": function () {
        function onClick() {
          return act('confirm_order');
        }

        return onClick;
      }()
    })]
  });
};

var CfStep3 = function CfStep3(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act,
      data = _useBackend4.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Step 3: Payment",
    "minHeight": "282px",
    children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
      "italic": true,
      "textAlign": "center",
      "fontSize": "20px",
      children: "Your device is ready for fabrication..."
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "mt": 2,
      "textAlign": "center",
      "fontSize": "16px",
      children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        children: "Please insert the required"
      }), ' ', (0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "color": "good",
        children: [data.totalprice, " cr"]
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "mt": 1,
      "textAlign": "center",
      "fontSize": "18px",
      children: "Current:"
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "mt": 0.5,
      "textAlign": "center",
      "fontSize": "18px",
      "color": data.credits >= data.totalprice ? "good" : "bad",
      children: [data.credits, " cr"]
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "content": "Purchase",
      "disabled": data.credits < data.totalprice,
      "mt": 8,
      "color": "good",
      "textAlign": "center",
      "fontSize": "20px",
      "lineHeight": 2,
      "onClick": function () {
        function onClick() {
          return act('purchase');
        }

        return onClick;
      }()
    })]
  });
};

var CfStep4 = function CfStep4(props, context) {
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "minHeight": "282px",
    children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "textAlign": "center",
      "fontSize": "28px",
      "mt": 10,
      children: "Thank you for your purchase!"
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "italic": true,
      "mt": 1,
      "textAlign": "center",
      children: "If you experience any difficulties with your new device, please contact your local network administrator."
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Crayon.js":
/*!********************************************!*\
  !*** ./packages/tgui/interfaces/Crayon.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Crayon = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Crayon = function Crayon(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var capOrChanges = data.has_cap || data.can_change_colour;
  var drawables = data.drawables || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 600,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [!!capOrChanges && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Basic",
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Cap",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.is_capped ? 'power-off' : 'times',
              "content": data.is_capped ? 'On' : 'Off',
              "selected": data.is_capped,
              "onClick": function () {
                function onClick() {
                  return act('toggle_cap');
                }

                return onClick;
              }()
            })
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Select New Color",
          "onClick": function () {
            function onClick() {
              return act('select_colour');
            }

            return onClick;
          }()
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Stencil",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: drawables.map(function (drawable) {
            var items = drawable.items || [];
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": drawable.name,
              children: items.map(function (item) {
                return (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "content": item.item,
                  "selected": item.item === data.selected_stencil,
                  "onClick": function () {
                    function onClick() {
                      return act('select_stencil', {
                        item: item.item
                      });
                    }

                    return onClick;
                  }()
                }, item.item);
              })
            }, drawable.name);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Text",
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Buffer",
            children: data.text_buffer
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "New Text",
          "onClick": function () {
            function onClick() {
              return act('enter_text');
            }

            return onClick;
          }()
        })]
      })]
    })
  });
};

exports.Crayon = Crayon;

/***/ }),

/***/ "./packages/tgui/interfaces/CrewConsole.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/CrewConsole.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CrewConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var HEALTH_COLOR_BY_LEVEL = ['#17d568', '#2ecc71', '#e67e22', '#ed5100', '#e74c3c', '#ed2814'];

var jobIsHead = function jobIsHead(jobId) {
  return jobId % 10 === 0;
};

var jobToColor = function jobToColor(jobId) {
  if (jobId === 0) {
    return _constants.COLORS.department.captain;
  }

  if (jobId >= 10 && jobId < 20) {
    return _constants.COLORS.department.security;
  }

  if (jobId >= 20 && jobId < 30) {
    return _constants.COLORS.department.medbay;
  }

  if (jobId >= 30 && jobId < 40) {
    return _constants.COLORS.department.science;
  }

  if (jobId >= 40 && jobId < 50) {
    return _constants.COLORS.department.engineering;
  }

  if (jobId >= 50 && jobId < 60) {
    return _constants.COLORS.department.cargo;
  }

  if (jobId >= 200 && jobId < 230) {
    return _constants.COLORS.department.centcom;
  }

  return _constants.COLORS.department.other;
};

var healthToColor = function healthToColor(oxy, tox, burn, brute) {
  var healthSum = oxy + tox + burn + brute;
  var level = Math.min(Math.max(Math.ceil(healthSum / 25), 0), 5);
  return HEALTH_COLOR_BY_LEVEL[level];
};

var HealthStat = function HealthStat(props) {
  var type = props.type,
      value = props.value;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    "width": 2,
    "color": _constants.COLORS.damageType[type],
    "textAlign": "center",
    children: value
  });
};

var CrewConsole = function CrewConsole() {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Crew Monitor",
    "width": 800,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "minHeight": "540px",
        children: (0, _inferno.createComponentVNode)(2, CrewTable)
      })
    })
  });
};

exports.CrewConsole = CrewConsole;

var CrewTable = function CrewTable(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var sensors = data.sensors || [];
  return (0, _inferno.createComponentVNode)(2, _components.Table, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "bold": true,
        children: "Name"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "bold": true,
        "collapsing": true
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "bold": true,
        "collapsing": true,
        "textAlign": "center",
        children: "Vitals"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "bold": true,
        children: "Position"
      }), !!data.link_allowed && (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "bold": true,
        "collapsing": true,
        children: "Tracking"
      })]
    }), sensors.map(function (sensor) {
      return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "bold": jobIsHead(sensor.ijob),
          "color": jobToColor(sensor.ijob),
          children: [sensor.name, " (", sensor.assignment, ")"]
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          "textAlign": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.ColorBox, {
            "color": healthToColor(sensor.oxydam, sensor.toxdam, sensor.burndam, sensor.brutedam)
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          "textAlign": "center",
          children: sensor.oxydam !== null ? (0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            children: [(0, _inferno.createComponentVNode)(2, HealthStat, {
              "type": "oxy",
              "value": sensor.oxydam
            }), '/', (0, _inferno.createComponentVNode)(2, HealthStat, {
              "type": "toxin",
              "value": sensor.toxdam
            }), '/', (0, _inferno.createComponentVNode)(2, HealthStat, {
              "type": "burn",
              "value": sensor.burndam
            }), '/', (0, _inferno.createComponentVNode)(2, HealthStat, {
              "type": "brute",
              "value": sensor.brutedam
            })]
          }) : sensor.life_status ? 'Alive' : 'Dead'
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: sensor.pos_x !== null ? sensor.area : 'N/A'
        }), !!data.link_allowed && (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Track",
            "disabled": !sensor.can_track,
            "onClick": function () {
              function onClick() {
                return act('select_person', {
                  name: sensor.name
                });
              }

              return onClick;
            }()
          })
        })]
      }, sensor.name);
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Cryo.js":
/*!******************************************!*\
  !*** ./packages/tgui/interfaces/Cryo.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Cryo = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _BeakerContents = __webpack_require__(/*! ./common/BeakerContents */ "./packages/tgui/interfaces/common/BeakerContents.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var damageTypes = [{
  label: "Brute",
  type: "bruteLoss"
}, {
  label: "Respiratory",
  type: "oxyLoss"
}, {
  label: "Toxin",
  type: "toxLoss"
}, {
  label: "Burn",
  type: "fireLoss"
}];

var Cryo = function Cryo() {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 550,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, CryoContent)
    })
  });
};

exports.Cryo = Cryo;

var CryoContent = function CryoContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Occupant",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Occupant",
        children: data.occupant.name || 'No Occupant'
      }), !!data.hasOccupant && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "State",
        "color": data.occupant.statstate,
        children: data.occupant.stat
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Temperature",
        "color": data.occupant.temperaturestatus,
        children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
          "value": data.occupant.bodyTemperature
        }), ' K']
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Health",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": data.occupant.health / data.occupant.maxHealth,
          "color": data.occupant.health > 0 ? 'good' : 'average',
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": data.occupant.health
          })
        })
      }), damageTypes.map(function (damageType) {
        return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": damageType.label,
          children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
            "value": data.occupant[damageType.type] / 100,
            children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "value": data.occupant[damageType.type]
            })
          })
        }, damageType.id);
      })], 0)]
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Cell",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Power",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.isOperating ? "power-off" : "times",
          "disabled": data.isOpen,
          "onClick": function () {
            function onClick() {
              return act('power');
            }

            return onClick;
          }(),
          "color": data.isOperating && 'green',
          children: data.isOperating ? "On" : "Off"
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Temperature",
        children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
          "value": data.cellTemperature
        }), " K"]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Door",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.isOpen ? "unlock" : "lock",
          "onClick": function () {
            function onClick() {
              return act('door');
            }

            return onClick;
          }(),
          "content": data.isOpen ? "Open" : "Closed"
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.autoEject ? "sign-out-alt" : "sign-in-alt",
          "onClick": function () {
            function onClick() {
              return act('autoeject');
            }

            return onClick;
          }(),
          "content": data.autoEject ? "Auto" : "Manual"
        })]
      })]
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Beaker",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "disabled": !data.isBeakerLoaded,
      "onClick": function () {
        function onClick() {
          return act('ejectbeaker');
        }

        return onClick;
      }(),
      "content": "Eject"
    }),
    children: (0, _inferno.createComponentVNode)(2, _BeakerContents.BeakerContents, {
      "beakerLoaded": data.isBeakerLoaded,
      "beakerContents": data.beakerContents
    })
  })], 4);
};

/***/ }),

/***/ "./packages/tgui/interfaces/DecalPainter.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/DecalPainter.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.DecalPainter = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var DecalPainter = function DecalPainter(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var decal_list = data.decal_list || [];
  var color_list = data.color_list || [];
  var dir_list = data.dir_list || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 400,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Decal Type",
        children: decal_list.map(function (decal) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": decal.name,
            "selected": decal.decal === data.decal_style,
            "onClick": function () {
              function onClick() {
                return act('select decal', {
                  decals: decal.decal
                });
              }

              return onClick;
            }()
          }, decal.decal);
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Decal Color",
        children: color_list.map(function (color) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": color.colors === "red" ? "Red" : color.colors === "white" ? "White" : "Yellow",
            "selected": color.colors === data.decal_color,
            "onClick": function () {
              function onClick() {
                return act('select color', {
                  colors: color.colors
                });
              }

              return onClick;
            }()
          }, color.colors);
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Decal Direction",
        children: dir_list.map(function (dir) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": dir.dirs === 1 ? "North" : dir.dirs === 2 ? "South" : dir.dirs === 4 ? "East" : "West",
            "selected": dir.dirs === data.decal_direction,
            "onClick": function () {
              function onClick() {
                return act('selected direction', {
                  dirs: dir.dirs
                });
              }

              return onClick;
            }()
          }, dir.dirs);
        })
      })]
    })
  });
};

exports.DecalPainter = DecalPainter;

/***/ }),

/***/ "./packages/tgui/interfaces/DisposalUnit.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/DisposalUnit.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.DisposalUnit = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var DisposalUnit = function DisposalUnit(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var stateColor;
  var stateText;

  if (data.full_pressure) {
    stateColor = 'good';
    stateText = 'Ready';
  } else if (data.panel_open) {
    stateColor = 'bad';
    stateText = 'Power Disabled';
  } else if (data.pressure_charging) {
    stateColor = 'average';
    stateText = 'Pressurizing';
  } else {
    stateColor = 'bad';
    stateText = 'Off';
  }

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 180,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "State",
            "color": stateColor,
            children: stateText
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Pressure",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.per,
              "color": "good"
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Handle",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.flush ? 'toggle-on' : 'toggle-off',
              "disabled": data.isai || data.panel_open,
              "content": data.flush ? 'Disengage' : 'Engage',
              "onClick": function () {
                function onClick() {
                  return act(data.flush ? 'handle-0' : 'handle-1');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Eject",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sign-out-alt",
              "disabled": data.isai,
              "content": "Eject Contents",
              "onClick": function () {
                function onClick() {
                  return act('eject');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "power-off",
              "disabled": data.panel_open,
              "selected": data.pressure_charging,
              "onClick": function () {
                function onClick() {
                  return act(data.pressure_charging ? 'pump-0' : 'pump-1');
                }

                return onClick;
              }()
            })
          })]
        })
      })
    })
  });
};

exports.DisposalUnit = DisposalUnit;

/***/ }),

/***/ "./packages/tgui/interfaces/DnaConsole.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/DnaConsole.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.DnaConsoleCommands = exports.DnaConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _assets = __webpack_require__(/*! ../assets */ "./packages/tgui/assets.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var SUBJECT_CONCIOUS = 0;
var SUBJECT_SOFT_CRIT = 1;
var SUBJECT_UNCONSCIOUS = 2;
var SUBJECT_DEAD = 3;
var SUBJECT_TRANSFORMING = 4;
var GENES = ['A', 'T', 'C', 'G'];
var GENE_COLORS = {
  A: 'green',
  T: 'green',
  G: 'blue',
  C: 'blue',
  X: 'grey'
};
var CONSOLE_MODE_STORAGE = 'storage';
var CONSOLE_MODE_SEQUENCER = 'sequencer';
var CONSOLE_MODE_ENZYMES = 'enzymes';
var CONSOLE_MODE_INJECTORS = 'injectors';
var STORAGE_MODE_CONSOLE = 'console';
var STORAGE_MODE_DISK = 'disk';
var STORAGE_MODE_ADVINJ = 'injector';
var STORAGE_CONS_SUBMODE_MUTATIONS = 'mutations';
var STORAGE_CONS_SUBMODE_CHROMOSOMES = 'chromosomes';
var STORAGE_DISK_SUBMODE_MUTATIONS = 'mutations';
var STORAGE_DISK_SUBMODE_ENZYMES = 'diskenzymes';
var CHROMOSOME_NEVER = 0;
var CHROMOSOME_NONE = 1;
var CHROMOSOME_USED = 2;
var MUT_NORMAL = 1;
var MUT_EXTRA = 2;
var MUT_OTHER = 3; // __DEFINES/DNA.dm - Mutation "Quality"

var POSITIVE = 1;
var NEGATIVE = 2;
var MINOR_NEGATIVE = 4;
var MUT_COLORS = {
  1: 'good',
  2: 'bad',
  4: 'average'
};
var RADIATION_STRENGTH_MAX = 15;
var RADIATION_DURATION_MAX = 30;
/**
 * The following predicate tests if two mutations are functionally
 * the same on the basis of their metadata. Useful if your intent is
 * to prevent "true" duplicates - i.e. mutations with identical metadata.
 */

var isSameMutation = function isSameMutation(a, b) {
  return a.Alias === b.Alias && a.AppliedChromo === b.AppliedChromo;
};

var DnaConsole = function DnaConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data,
      act = _useBackend.act;

  var isPulsingRads = data.isPulsingRads,
      radPulseSeconds = data.radPulseSeconds;
  var consoleMode = data.view.consoleMode;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "DNA Console",
    "width": 539,
    "height": 710,
    "resizable": true,
    children: [!!isPulsingRads && (0, _inferno.createComponentVNode)(2, _components.Dimmer, {
      "fontSize": "14px",
      "textAlign": "center",
      children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
        "mr": 1,
        "name": "spinner",
        "spin": true
      }), "Radiation pulse in progress...", (0, _inferno.createComponentVNode)(2, _components.Box, {
        "mt": 1
      }), radPulseSeconds, "s"]
    }), (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, DnaScanner), (0, _inferno.createComponentVNode)(2, DnaConsoleCommands), consoleMode === CONSOLE_MODE_STORAGE && (0, _inferno.createComponentVNode)(2, DnaConsoleStorage), consoleMode === CONSOLE_MODE_SEQUENCER && (0, _inferno.createComponentVNode)(2, DnaConsoleSequencer), consoleMode === CONSOLE_MODE_ENZYMES && (0, _inferno.createComponentVNode)(2, DnaConsoleEnzymes)]
    })]
  });
};

exports.DnaConsole = DnaConsole;

var DnaScanner = function DnaScanner(props, context) {
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "DNA Scanner",
    "buttons": (0, _inferno.createComponentVNode)(2, DnaScannerButtons),
    children: (0, _inferno.createComponentVNode)(2, DnaScannerContent)
  });
};

var DnaScannerButtons = function DnaScannerButtons(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      data = _useBackend2.data,
      act = _useBackend2.act;

  var hasDelayedAction = data.hasDelayedAction,
      isPulsingRads = data.isPulsingRads,
      isScannerConnected = data.isScannerConnected,
      isScrambleReady = data.isScrambleReady,
      isViableSubject = data.isViableSubject,
      scannerLocked = data.scannerLocked,
      scannerOpen = data.scannerOpen,
      scrambleSeconds = data.scrambleSeconds;

  if (!isScannerConnected) {
    return (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Connect Scanner",
      "onClick": function () {
        function onClick() {
          return act('connect_scanner');
        }

        return onClick;
      }()
    });
  }

  return (0, _inferno.createFragment)([!!hasDelayedAction && (0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": "Cancel Delayed Action",
    "onClick": function () {
      function onClick() {
        return act('cancel_delay');
      }

      return onClick;
    }()
  }), !!isViableSubject && (0, _inferno.createComponentVNode)(2, _components.Button, {
    "disabled": !isScrambleReady || isPulsingRads,
    "onClick": function () {
      function onClick() {
        return act('scramble_dna');
      }

      return onClick;
    }(),
    children: ["Scramble DNA", !isScrambleReady && " (" + scrambleSeconds + "s)"]
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    "mr": 1
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": scannerLocked ? 'lock' : 'lock-open',
    "color": scannerLocked && 'bad',
    "disabled": scannerOpen,
    "content": scannerLocked ? 'Locked' : 'Unlocked',
    "onClick": function () {
      function onClick() {
        return act('toggle_lock');
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "disabled": scannerLocked,
    "content": scannerOpen ? 'Close' : 'Open',
    "onClick": function () {
      function onClick() {
        return act('toggle_door');
      }

      return onClick;
    }()
  })], 0);
};
/**
 * Displays subject status based on the value of the status prop.
 */


var SubjectStatus = function SubjectStatus(props, context) {
  var status = props.status;

  if (status === SUBJECT_CONCIOUS) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": "good",
      children: "Conscious"
    });
  }

  if (status === SUBJECT_UNCONSCIOUS) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": "average",
      children: "Unconscious"
    });
  }

  if (status === SUBJECT_SOFT_CRIT) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": "average",
      children: "Critical"
    });
  }

  if (status === SUBJECT_DEAD) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": "bad",
      children: "Dead"
    });
  }

  if (status === SUBJECT_TRANSFORMING) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": "bad",
      children: "Transforming"
    });
  }

  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    children: "Unknown"
  });
};

var DnaScannerContent = function DnaScannerContent(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      data = _useBackend3.data,
      act = _useBackend3.act;

  var subjectName = data.subjectName,
      isScannerConnected = data.isScannerConnected,
      isViableSubject = data.isViableSubject,
      subjectHealth = data.subjectHealth,
      subjectRads = data.subjectRads,
      subjectStatus = data.subjectStatus;

  if (!isScannerConnected) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "bad",
      children: "DNA Scanner is not connected."
    });
  }

  if (!isViableSubject) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "average",
      children: "No viable subject found in DNA Scanner."
    });
  }

  return (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
    children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Status",
      children: [subjectName, (0, _inferno.createComponentVNode)(2, _components.Icon, {
        "mx": 1,
        "color": "label",
        "name": "long-arrow-alt-right"
      }), (0, _inferno.createComponentVNode)(2, SubjectStatus, {
        "status": subjectStatus
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Health",
      children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
        "value": subjectHealth,
        "minValue": 0,
        "maxValue": 100,
        "ranges": {
          olive: [101, Infinity],
          good: [70, 101],
          average: [30, 70],
          bad: [-Infinity, 30]
        },
        children: [subjectHealth, "%"]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Radiation",
      children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
        "value": subjectRads,
        "minValue": 0,
        "maxValue": 100,
        "ranges": {
          bad: [71, Infinity],
          average: [30, 71],
          good: [0, 30],
          olive: [-Infinity, 0]
        },
        children: [subjectRads, "%"]
      })
    })]
  });
};

var DnaConsoleCommands = function DnaConsoleCommands(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      data = _useBackend4.data,
      act = _useBackend4.act;

  var hasDisk = data.hasDisk,
      isInjectorReady = data.isInjectorReady,
      injectorSeconds = data.injectorSeconds;
  var consoleMode = data.view.consoleMode;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "DNA Console",
    "buttons": !isInjectorReady && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "lineHeight": "20px",
      "color": "label",
      children: ["Injector on cooldown (", injectorSeconds, "s)"]
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Mode",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Storage",
          "selected": consoleMode === CONSOLE_MODE_STORAGE,
          "onClick": function () {
            function onClick() {
              return act('set_view', {
                consoleMode: CONSOLE_MODE_STORAGE
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Sequencer",
          "disabled": !data.isViableSubject,
          "selected": consoleMode === CONSOLE_MODE_SEQUENCER,
          "onClick": function () {
            function onClick() {
              return act('set_view', {
                consoleMode: CONSOLE_MODE_SEQUENCER
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Enzymes",
          "selected": consoleMode === CONSOLE_MODE_ENZYMES,
          "onClick": function () {
            function onClick() {
              return act('set_view', {
                consoleMode: CONSOLE_MODE_ENZYMES
              });
            }

            return onClick;
          }()
        })]
      }), !!hasDisk && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Disk",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject",
          "onClick": function () {
            function onClick() {
              act('eject_disk');
              act('set_view', {
                storageMode: STORAGE_MODE_CONSOLE
              });
            }

            return onClick;
          }()
        })
      })]
    })
  });
};

exports.DnaConsoleCommands = DnaConsoleCommands;

var StorageButtons = function StorageButtons(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      data = _useBackend5.data,
      act = _useBackend5.act;

  var hasDisk = data.hasDisk;
  var _data$view = data.view,
      storageMode = _data$view.storageMode,
      storageConsSubMode = _data$view.storageConsSubMode,
      storageDiskSubMode = _data$view.storageDiskSubMode;
  return (0, _inferno.createFragment)([storageMode === STORAGE_MODE_CONSOLE && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
    "selected": storageConsSubMode === STORAGE_CONS_SUBMODE_MUTATIONS,
    "content": "Mutations",
    "onClick": function () {
      function onClick() {
        return act('set_view', {
          storageConsSubMode: STORAGE_CONS_SUBMODE_MUTATIONS
        });
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "selected": storageConsSubMode === STORAGE_CONS_SUBMODE_CHROMOSOMES,
    "content": "Chromosomes",
    "onClick": function () {
      function onClick() {
        return act('set_view', {
          storageConsSubMode: STORAGE_CONS_SUBMODE_CHROMOSOMES
        });
      }

      return onClick;
    }()
  })], 4), storageMode === STORAGE_MODE_DISK && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
    "selected": storageDiskSubMode === STORAGE_CONS_SUBMODE_MUTATIONS,
    "content": "Mutations",
    "onClick": function () {
      function onClick() {
        return act('set_view', {
          storageDiskSubMode: STORAGE_CONS_SUBMODE_MUTATIONS
        });
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "selected": storageDiskSubMode === STORAGE_DISK_SUBMODE_ENZYMES,
    "content": "Enzymes",
    "onClick": function () {
      function onClick() {
        return act('set_view', {
          storageDiskSubMode: STORAGE_DISK_SUBMODE_ENZYMES
        });
      }

      return onClick;
    }()
  })], 4), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    "mr": 1
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": "Console",
    "selected": storageMode === STORAGE_MODE_CONSOLE,
    "onClick": function () {
      function onClick() {
        return act('set_view', {
          storageMode: STORAGE_MODE_CONSOLE,
          storageConsSubMode: STORAGE_CONS_SUBMODE_MUTATIONS != null ? STORAGE_CONS_SUBMODE_MUTATIONS : storageConsSubMode
        });
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": "Disk",
    "disabled": !hasDisk,
    "selected": storageMode === STORAGE_MODE_DISK,
    "onClick": function () {
      function onClick() {
        return act('set_view', {
          storageMode: STORAGE_MODE_DISK,
          storageDiskSubMode: STORAGE_DISK_SUBMODE_MUTATIONS != null ? STORAGE_DISK_SUBMODE_MUTATIONS : storageDiskSubMode
        });
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": "Adv. Injector",
    "selected": storageMode === STORAGE_MODE_ADVINJ,
    "onClick": function () {
      function onClick() {
        return act('set_view', {
          storageMode: STORAGE_MODE_ADVINJ
        });
      }

      return onClick;
    }()
  })], 0);
};

var DnaConsoleStorage = function DnaConsoleStorage(props, context) {
  var _useBackend6 = (0, _backend.useBackend)(context),
      data = _useBackend6.data,
      act = _useBackend6.act;

  var _data$view2 = data.view,
      storageMode = _data$view2.storageMode,
      storageConsSubMode = _data$view2.storageConsSubMode,
      storageDiskSubMode = _data$view2.storageDiskSubMode;
  var diskMakeupBuffer = data.diskMakeupBuffer,
      diskHasMakeup = data.diskHasMakeup;
  var mutations = data.storage[storageMode];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Storage",
    "buttons": (0, _inferno.createComponentVNode)(2, StorageButtons),
    children: [storageMode === STORAGE_MODE_CONSOLE && storageConsSubMode === STORAGE_CONS_SUBMODE_MUTATIONS && (0, _inferno.createComponentVNode)(2, StorageMutations, {
      "mutations": mutations
    }), storageMode === STORAGE_MODE_CONSOLE && storageConsSubMode === STORAGE_CONS_SUBMODE_CHROMOSOMES && (0, _inferno.createComponentVNode)(2, StorageChromosomes), storageMode === STORAGE_MODE_DISK && storageDiskSubMode === STORAGE_DISK_SUBMODE_MUTATIONS && (0, _inferno.createComponentVNode)(2, StorageMutations, {
      "mutations": mutations
    }), storageMode === STORAGE_MODE_DISK && storageDiskSubMode === STORAGE_DISK_SUBMODE_ENZYMES && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, GeneticMakeupInfo, {
      "makeup": diskMakeupBuffer
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "times",
      "color": "red",
      "disabled": !diskHasMakeup,
      "content": 'Delete',
      "onClick": function () {
        function onClick() {
          return act('del_makeup_disk');
        }

        return onClick;
      }()
    })], 4), storageMode === STORAGE_MODE_ADVINJ && (0, _inferno.createComponentVNode)(2, DnaConsoleAdvancedInjectors)]
  });
};

var StorageMutations = function StorageMutations(props, context) {
  var _props$customMode = props.customMode,
      customMode = _props$customMode === void 0 ? '' : _props$customMode;

  var _useBackend7 = (0, _backend.useBackend)(context),
      data = _useBackend7.data,
      act = _useBackend7.act;

  var mutations = props.mutations || [];
  var mode = data.view.storageMode + customMode;
  var mutationRef = data.view["storage" + mode + "MutationRef"];
  var mutation = mutations.find(function (mutation) {
    return mutation.ByondRef === mutationRef;
  }); // If no mutation is selected but there are stored mutations, pick the first
  // mutation and set that as the currently showed one.

  if (!mutation && mutations.length > 0) {
    mutation = mutations[0];
    mutationRef = mutation.ByondRef;
  }

  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "width": "140px",
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": (0, _string.capitalize)(data.view.storageMode) + " Storage",
        "level": 2,
        children: mutations.map(function (mutation) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "ellipsis": true,
            "color": "transparent",
            "selected": mutation.ByondRef === mutationRef,
            "content": mutation.Name,
            "onClick": function () {
              function onClick() {
                var _act;

                return act('set_view', (_act = {}, _act["storage" + mode + "MutationRef"] = mutation.ByondRef, _act));
              }

              return onClick;
            }()
          }, mutation.ByondRef);
        })
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Divider, {
        "vertical": true
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      "basis": 0,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Mutation Info",
        "level": 2,
        children: (0, _inferno.createComponentVNode)(2, MutationInfo, {
          "mutation": mutation
        })
      })
    })]
  });
};

var StorageChromosomes = function StorageChromosomes(props, context) {
  var _data$chromoStorage;

  var _useBackend8 = (0, _backend.useBackend)(context),
      data = _useBackend8.data,
      act = _useBackend8.act;

  var chromos = (_data$chromoStorage = data.chromoStorage) != null ? _data$chromoStorage : [];
  var uniqueChromos = (0, _collections.uniqBy)(function (chromo) {
    return chromo.Name;
  })(chromos);
  var chromoName = data.view.storageChromoName;
  var chromo = chromos.find(function (chromo) {
    return chromo.Name === chromoName;
  });
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "width": "140px",
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Console Storage",
        "level": 2,
        children: uniqueChromos.map(function (chromo) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "ellipsis": true,
            "color": "transparent",
            "selected": chromo.Name === chromoName,
            "content": chromo.Name,
            "onClick": function () {
              function onClick() {
                return act('set_view', {
                  storageChromoName: chromo.Name
                });
              }

              return onClick;
            }()
          }, chromo.Index);
        })
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Divider, {
        "vertical": true
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      "basis": 0,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Chromosome Info",
        "level": 2,
        children: !chromo && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "label",
          children: "Nothing to show."
        }) || (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Name",
            children: chromo.Name
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Description",
            children: chromo.Description
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Amount",
            children: chromos.filter(function (x) {
              return x.Name === chromo.Name;
            }).length
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "mt": 2,
          "icon": "eject",
          "content": "Eject Chromosome",
          "onClick": function () {
            function onClick() {
              return act('eject_chromo', {
                chromo: chromo.Name
              });
            }

            return onClick;
          }()
        })], 4)
      })
    })]
  });
};

var MutationInfo = function MutationInfo(props, context) {
  var _data$storage$disk, _data$storage$console, _data$storage$injecto;

  var mutation = props.mutation;

  var _useBackend9 = (0, _backend.useBackend)(context),
      data = _useBackend9.data,
      act = _useBackend9.act;

  var diskCapacity = data.diskCapacity,
      diskReadOnly = data.diskReadOnly,
      hasDisk = data.hasDisk,
      isInjectorReady = data.isInjectorReady;
  var diskMutations = (_data$storage$disk = data.storage.disk) != null ? _data$storage$disk : [];
  var mutationStorage = (_data$storage$console = data.storage.console) != null ? _data$storage$console : [];
  var advInjectors = (_data$storage$injecto = data.storage.injector) != null ? _data$storage$injecto : [];

  if (!mutation) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      children: "Nothing to show."
    });
  }

  if (mutation.Source === 'occupant' && !mutation.Discovered) {
    return (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Name",
        children: mutation.Alias
      })
    });
  }

  var savedToConsole = mutationStorage.find(function (x) {
    return isSameMutation(x, mutation);
  });
  var savedToDisk = diskMutations.find(function (x) {
    return isSameMutation(x, mutation);
  });
  var combinedMutations = (0, _fp.flow)([(0, _collections.uniqBy)(function (mutation) {
    return mutation.Name;
  }), (0, _collections.filter)(function (x) {
    return x.Name !== mutation.Name;
  })])([].concat(diskMutations, mutationStorage));
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
    children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Name",
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "color": MUT_COLORS[mutation.Quality],
        children: mutation.Name
      })
    }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Description",
      children: mutation.Description
    }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Instability",
      children: mutation.Instability
    })]
  }), (0, _inferno.createComponentVNode)(2, _components.Divider), (0, _inferno.createComponentVNode)(2, _components.Box, {
    children: [mutation.Source === 'disk' && (0, _inferno.createComponentVNode)(2, MutationCombiner, {
      "disabled": !hasDisk || diskCapacity <= 0 || diskReadOnly,
      "mutations": combinedMutations,
      "source": mutation
    }), mutation.Source === 'console' && (0, _inferno.createComponentVNode)(2, MutationCombiner, {
      "mutations": combinedMutations,
      "source": mutation
    }), ['occupant', 'disk', 'console'].includes(mutation.Source) && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Dropdown, {
      "width": "240px",
      "options": advInjectors.map(function (injector) {
        return injector.name;
      }),
      "disabled": advInjectors.length === 0 || !mutation.Active,
      "selected": "Add to advanced injector",
      "onSelected": function () {
        function onSelected(value) {
          return act('add_advinj_mut', {
            mutref: mutation.ByondRef,
            advinj: value,
            source: mutation.Source
          });
        }

        return onSelected;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "syringe",
      "disabled": !isInjectorReady || !mutation.Active,
      "content": "Print Activator",
      "onClick": function () {
        function onClick() {
          return act('print_injector', {
            mutref: mutation.ByondRef,
            is_activator: 1,
            source: mutation.Source
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "syringe",
      "disabled": !isInjectorReady || !mutation.Active,
      "content": "Print Mutator",
      "onClick": function () {
        function onClick() {
          return act('print_injector', {
            mutref: mutation.ByondRef,
            is_activator: 0,
            source: mutation.Source
          });
        }

        return onClick;
      }()
    })], 4)]
  }), ['disk', 'occupant'].includes(mutation.Source) && (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "save",
    "disabled": savedToConsole || !mutation.Active,
    "content": "Save to Console",
    "onClick": function () {
      function onClick() {
        return act('save_console', {
          mutref: mutation.ByondRef,
          source: mutation.Source
        });
      }

      return onClick;
    }()
  }), ['console', 'occupant'].includes(mutation.Source) && (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "save",
    "disabled": savedToDisk || !hasDisk || diskCapacity <= 0 || diskReadOnly || !mutation.Active,
    "content": "Save to Disk",
    "onClick": function () {
      function onClick() {
        return act('save_disk', {
          mutref: mutation.ByondRef,
          source: mutation.Source
        });
      }

      return onClick;
    }()
  }), ['console', 'disk', 'injector'].includes(mutation.Source) && (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "times",
    "color": "red",
    "content": "Delete from " + mutation.Source,
    "onClick": function () {
      function onClick() {
        return act("delete_" + mutation.Source + "_mut", {
          mutref: mutation.ByondRef
        });
      }

      return onClick;
    }()
  }), (mutation.Class === MUT_EXTRA || !!mutation.Scrambled && mutation.Source === 'occupant') && (0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": "Nullify",
    "onClick": function () {
      function onClick() {
        return act('nullify', {
          mutref: mutation.ByondRef
        });
      }

      return onClick;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Divider), (0, _inferno.createComponentVNode)(2, ChromosomeInfo, {
    "disabled": mutation.Source !== 'occupant',
    "mutation": mutation
  })], 0);
};

var ChromosomeInfo = function ChromosomeInfo(props, context) {
  var mutation = props.mutation,
      disabled = props.disabled;

  var _useBackend10 = (0, _backend.useBackend)(context),
      data = _useBackend10.data,
      act = _useBackend10.act;

  if (mutation.CanChromo === CHROMOSOME_NEVER) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      children: "No compatible chromosomes"
    });
  }

  if (mutation.CanChromo === CHROMOSOME_NONE) {
    if (disabled) {
      return (0, _inferno.createComponentVNode)(2, _components.Box, {
        "color": "label",
        children: "No chromosome applied."
      });
    }

    return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Dropdown, {
      "width": "240px",
      "options": mutation.ValidStoredChromos,
      "disabled": mutation.ValidStoredChromos.length === 0,
      "selected": mutation.ValidStoredChromos.length === 0 ? "No Suitable Chromosomes" : "Select a chromosome",
      "onSelected": function () {
        function onSelected(e) {
          return act('apply_chromo', {
            chromo: e,
            mutref: mutation.ByondRef
          });
        }

        return onSelected;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      "mt": 1,
      children: ["Compatible with: ", mutation.ValidChromos]
    })], 4);
  }

  if (mutation.CanChromo === CHROMOSOME_USED) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      children: ["Applied chromosome: ", mutation.AppliedChromo]
    });
  }

  return null;
};

var DnaConsoleSequencer = function DnaConsoleSequencer(props, context) {
  var _data$storage$occupan, _data$storage;

  var _useBackend11 = (0, _backend.useBackend)(context),
      data = _useBackend11.data,
      act = _useBackend11.act;

  var mutations = (_data$storage$occupan = (_data$storage = data.storage) == null ? void 0 : _data$storage.occupant) != null ? _data$storage$occupan : [];
  var isJokerReady = data.isJokerReady,
      isMonkey = data.isMonkey,
      jokerSeconds = data.jokerSeconds,
      subjectStatus = data.subjectStatus;
  var _data$view3 = data.view,
      sequencerMutation = _data$view3.sequencerMutation,
      jokerActive = _data$view3.jokerActive;
  var mutation = mutations.find(function (mutation) {
    return mutation.Alias === sequencerMutation;
  });
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Flex, {
    "spacing": 1,
    "mb": 1,
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "width": mutations.length <= 8 && "154px" || "174px",
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Sequences",
        "height": "214px",
        "overflowY": mutations.length > 8 && "scroll",
        children: mutations.map(function (mutation) {
          return (0, _inferno.createComponentVNode)(2, GenomeImage, {
            "url": (0, _assets.resolveAsset)(mutation.Image),
            "selected": mutation.Alias === sequencerMutation,
            "onClick": function () {
              function onClick() {
                act('set_view', {
                  sequencerMutation: mutation.Alias
                });
                act('check_discovery', {
                  alias: mutation.Alias
                });
              }

              return onClick;
            }()
          }, mutation.Alias);
        })
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      "basis": 0,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Sequence Info",
        "minHeight": "100%",
        children: (0, _inferno.createComponentVNode)(2, MutationInfo, {
          "mutation": mutation
        })
      })
    })]
  }), subjectStatus === SUBJECT_DEAD && (0, _inferno.createComponentVNode)(2, _components.Section, {
    "color": "bad",
    children: "Genetic sequence corrupted. Subject diagnostic report: DECEASED."
  }) || isMonkey && (mutation == null ? void 0 : mutation.Name) !== 'Monkified' && (0, _inferno.createComponentVNode)(2, _components.Section, {
    "color": "bad",
    children: "Genetic sequence corrupted. Subject diagnostic report: MONKEY."
  }) || subjectStatus === SUBJECT_TRANSFORMING && (0, _inferno.createComponentVNode)(2, _components.Section, {
    "color": "bad",
    children: "Genetic sequence corrupted. Subject diagnostic report: TRANSFORMING."
  }) || (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Genome Sequencer™",
    "buttons": !isJokerReady && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "lineHeight": "20px",
      "color": "label",
      children: ["Joker on cooldown (", jokerSeconds, "s)"]
    }) || jokerActive && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
      "mr": 1,
      "inline": true,
      "color": "label",
      children: "Click on a gene to reveal it."
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Cancel Joker",
      "onClick": function () {
        function onClick() {
          return act('set_view', {
            jokerActive: ''
          });
        }

        return onClick;
      }()
    })], 4) || (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "crown",
      "color": "purple",
      "content": "Use Joker",
      "onClick": function () {
        function onClick() {
          return act('set_view', {
            jokerActive: '1'
          });
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, GenomeSequencer, {
      "mutation": mutation
    })
  })], 0);
};

var GenomeImage = function GenomeImage(props, context) {
  var url = props.url,
      selected = props.selected,
      onClick = props.onClick;
  var outline;

  if (selected) {
    outline = '2px solid #22aa00';
  }

  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "as": "img",
    "src": url,
    "style": {
      width: '64px',
      margin: '2px',
      'margin-left': '4px',
      outline: outline
    },
    "onClick": onClick
  });
};

var GeneCycler = function GeneCycler(props, context) {
  var gene = props.gene,
      onChange = props.onChange,
      disabled = props.disabled,
      rest = _objectWithoutPropertiesLoose(props, ["gene", "onChange", "disabled"]);

  var length = GENES.length;
  var index = GENES.indexOf(gene);
  var color = disabled && GENE_COLORS['X'] || GENE_COLORS[gene];
  return (0, _inferno.normalizeProps)((0, _inferno.createComponentVNode)(2, _components.Button, Object.assign({}, rest, {
    "color": color,
    "onClick": function () {
      function onClick(e) {
        e.preventDefault();

        if (!onChange) {
          return;
        }

        if (index === -1) {
          onChange(e, GENES[0]);
          return;
        }

        var nextGene = GENES[(index + 1) % length];
        onChange(e, nextGene);
      }

      return onClick;
    }(),
    "oncontextmenu": function () {
      function oncontextmenu(e) {
        e.preventDefault();

        if (!onChange) {
          return;
        }

        if (index === -1) {
          onChange(e, GENES[length - 1]);
          return;
        }

        var prevGene = GENES[(index - 1 + length) % length];
        onChange(e, prevGene);
      }

      return oncontextmenu;
    }(),
    children: gene
  })));
};

var GenomeSequencer = function GenomeSequencer(props, context) {
  var mutation = props.mutation;

  var _useBackend12 = (0, _backend.useBackend)(context),
      data = _useBackend12.data,
      act = _useBackend12.act;

  var jokerActive = data.view.jokerActive;

  if (!mutation) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "average",
      children: "No genome selected for sequencing."
    });
  }

  if (mutation.Scrambled) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "average",
      children: "Sequence unreadable due to unpredictable mutation."
    });
  } // Create gene cycler buttons


  var sequence = mutation.Sequence;
  var defaultSeq = mutation.DefaultSeq;
  var buttons = [];

  var _loop = function _loop(i) {
    var gene = sequence.charAt(i);
    var button = (0, _inferno.createComponentVNode)(2, GeneCycler, {
      "width": "22px",
      "textAlign": "center",
      "disabled": !!mutation.Scrambled || mutation.Class !== MUT_NORMAL,
      "className": (defaultSeq == null ? void 0 : defaultSeq.charAt(i)) === 'X' && !mutation.Active ? (0, _react.classes)(["outline-solid", "outline-color-orange"]) : false,
      "gene": gene,
      "onChange": function () {
        function onChange(e, nextGene) {
          if (e.ctrlKey) {
            act('pulse_gene', {
              pos: i + 1,
              gene: 'X',
              alias: mutation.Alias
            });
            return;
          }

          if (jokerActive) {
            act('pulse_gene', {
              pos: i + 1,
              gene: 'J',
              alias: mutation.Alias
            });
            act('set_view', {
              jokerActive: ''
            });
            return;
          }

          act('pulse_gene', {
            pos: i + 1,
            gene: nextGene,
            alias: mutation.Alias
          });
        }

        return onChange;
      }()
    });
    buttons.push(button);
  };

  for (var i = 0; i < sequence.length; i++) {
    _loop(i);
  } // Render genome in two rows


  var pairs = [];

  for (var _i = 0; _i < buttons.length; _i += 2) {
    var pair = (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "m": 0.5,
      children: [buttons[_i], (0, _inferno.createComponentVNode)(2, _components.Box, {
        "mt": "-2px",
        "ml": "10px",
        "width": "2px",
        "height": "8px",
        "backgroundColor": "label"
      }), buttons[_i + 1]]
    }, _i);

    if (_i % 8 === 0 && _i !== 0) {
      pairs.push((0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "position": "relative",
        "top": "-17px",
        "left": "-1px",
        "width": "8px",
        "height": "2px",
        "backgroundColor": "label"
      }, _i + "_divider"));
    }

    pairs.push(pair);
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "m": -0.5,
    children: pairs
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "color": "label",
    "mt": 1,
    children: [(0, _inferno.createVNode)(1, "b", null, "Tip:", 16), " Ctrl+Click on the gene to set it to X. Right Click to cycle in reverse."]
  })], 4);
};

var DnaConsoleEnzymes = function DnaConsoleEnzymes(props, context) {
  var _useBackend13 = (0, _backend.useBackend)(context),
      data = _useBackend13.data,
      act = _useBackend13.act;

  var isScannerConnected = data.isScannerConnected,
      stdDevAcc = data.stdDevAcc,
      stdDevStr = data.stdDevStr;

  if (!isScannerConnected) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "color": "bad",
      children: "DNA Scanner is not connected."
    });
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Flex, {
    "spacing": 1,
    "mb": 1,
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "width": "155px",
      children: (0, _inferno.createComponentVNode)(2, RadiationEmitterSettings)
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "width": "140px",
      children: (0, _inferno.createComponentVNode)(2, RadiationEmitterProbs)
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      "basis": 0,
      children: (0, _inferno.createComponentVNode)(2, RadiationEmitterPulseBoard)
    })]
  }), (0, _inferno.createComponentVNode)(2, GeneticMakeupBuffers)], 4);
};

var RadiationEmitterSettings = function RadiationEmitterSettings(props, context) {
  var _useBackend14 = (0, _backend.useBackend)(context),
      data = _useBackend14.data,
      act = _useBackend14.act;

  var radStrength = data.radStrength,
      radDuration = data.radDuration;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Radiation Emitter",
    "minHeight": "100%",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Output level",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "animated": true,
          "width": "32px",
          "stepPixelSize": 10,
          "value": radStrength,
          "minValue": 1,
          "maxValue": RADIATION_STRENGTH_MAX,
          "onDrag": function () {
            function onDrag(e, value) {
              return act('set_pulse_strength', {
                val: value
              });
            }

            return onDrag;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Pulse duration",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "animated": true,
          "width": "32px",
          "stepPixelSize": 10,
          "value": radDuration,
          "minValue": 1,
          "maxValue": RADIATION_DURATION_MAX,
          "onDrag": function () {
            function onDrag(e, value) {
              return act('set_pulse_duration', {
                val: value
              });
            }

            return onDrag;
          }()
        })
      })]
    })
  });
};

var RadiationEmitterProbs = function RadiationEmitterProbs(props, context) {
  var _useBackend15 = (0, _backend.useBackend)(context),
      data = _useBackend15.data;

  var stdDevAcc = data.stdDevAcc,
      stdDevStr = data.stdDevStr;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Probabilities",
    "minHeight": "100%",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Accuracy",
        "textAlign": "right",
        children: stdDevAcc
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "P(\xB1" + stdDevStr + ")",
        "textAlign": "right",
        children: "68 %"
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "P(\xB1" + stdDevStr * 2 + ")",
        "textAlign": "right",
        children: "95 %"
      })]
    })
  });
};

var RadiationEmitterPulseBoard = function RadiationEmitterPulseBoard(props, context) {
  var _useBackend16 = (0, _backend.useBackend)(context),
      data = _useBackend16.data,
      act = _useBackend16.act;

  var _data$subjectUNI = data.subjectUNI,
      subjectUNI = _data$subjectUNI === void 0 ? [] : _data$subjectUNI; // Build blocks of buttons of unique enzymes

  var blocks = [];
  var buffer = [];

  var _loop2 = function _loop2(i) {
    var _char = subjectUNI.charAt(i); // Push a button into the buffer


    var button = (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "textAlign": "center",
      "content": _char,
      "onClick": function () {
        function onClick() {
          return act('makeup_pulse', {
            index: i + 1
          });
        }

        return onClick;
      }()
    }, i);
    buffer.push(button); // Create a block from the current buffer

    if (buffer.length >= 3) {
      var block = (0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "width": "22px",
        "mx": "1px",
        children: buffer
      });
      blocks.push(block); // Clear the buffer

      buffer = [];
    }
  };

  for (var i = 0; i < subjectUNI.length; i++) {
    _loop2(i);
  }

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Unique Enzymes",
    "minHeight": "100%",
    "position": "relative",
    children: (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mx": "-1px",
      children: blocks
    })
  });
};

var GeneticMakeupBuffers = function GeneticMakeupBuffers(props, context) {
  var _useBackend17 = (0, _backend.useBackend)(context),
      data = _useBackend17.data,
      act = _useBackend17.act;

  var diskHasMakeup = data.diskHasMakeup,
      hasDisk = data.hasDisk,
      isViableSubject = data.isViableSubject,
      _data$makeupCapacity = data.makeupCapacity,
      makeupCapacity = _data$makeupCapacity === void 0 ? 3 : _data$makeupCapacity,
      makeupStorage = data.makeupStorage;
  var elements = [];

  var _loop3 = function _loop3(i) {
    var makeup = makeupStorage[i];
    var element = (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
      "title": makeup ? makeup.label || makeup.name : "Slot " + i,
      "buttons": (0, _inferno.createFragment)([!!(hasDisk && diskHasMakeup) && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "mr": 1,
        "disabled": !hasDisk || !diskHasMakeup,
        "content": "Import from disk",
        "onClick": function () {
          function onClick() {
            return act('load_makeup_disk', {
              index: i
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "disabled": !isViableSubject,
        "content": "Save",
        "onClick": function () {
          function onClick() {
            return act('save_makeup_console', {
              index: i
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "ml": 1,
        "icon": "times",
        "color": "red",
        "disabled": !makeup,
        "onClick": function () {
          function onClick() {
            return act('del_makeup_console', {
              index: i
            });
          }

          return onClick;
        }()
      })], 0),
      children: (0, _inferno.createComponentVNode)(2, GeneticMakeupBufferInfo, {
        "index": i,
        "makeup": makeup
      })
    });
    elements.push(element);
  };

  for (var i = 1; i <= makeupCapacity; i++) {
    _loop3(i);
  }

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Genetic Makeup Buffers",
    children: elements
  });
};

var GeneticMakeupInfo = function GeneticMakeupInfo(props, context) {
  var makeup = props.makeup;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Enzyme Information",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Name",
        children: makeup.name || 'None'
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Blood Type",
        children: makeup.blood_type || 'None'
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Unique Enzyme",
        children: makeup.UE || 'None'
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Unique Identifier",
        children: makeup.UI || 'None'
      })]
    })
  });
};

var GeneticMakeupBufferInfo = function GeneticMakeupBufferInfo(props, context) {
  var index = props.index,
      makeup = props.makeup;

  var _useBackend18 = (0, _backend.useBackend)(context),
      act = _useBackend18.act,
      data = _useBackend18.data;

  var isViableSubject = data.isViableSubject,
      hasDisk = data.hasDisk,
      diskReadOnly = data.diskReadOnly,
      isInjectorReady = data.isInjectorReady; // Type of the action for applying makeup

  var ACTION_MAKEUP_APPLY = isViableSubject ? 'makeup_apply' : 'makeup_delay';

  if (!makeup) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "average",
      children: "No stored subject data."
    });
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, GeneticMakeupInfo, {
    "makeup": makeup
  }), (0, _inferno.createComponentVNode)(2, _components.Divider), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "bold": true,
    "color": "label",
    "mb": 1,
    children: "Makeup Actions"
  }), (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
    children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Enzymes",
      children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "syringe",
        "disabled": !isInjectorReady,
        "content": "Print",
        "onClick": function () {
          function onClick() {
            return act('makeup_injector', {
              index: index,
              type: 'ue'
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "exchange-alt",
        "onClick": function () {
          function onClick() {
            return act(ACTION_MAKEUP_APPLY, {
              index: index,
              type: 'ue'
            });
          }

          return onClick;
        }(),
        children: ["Transfer", !isViableSubject && ' (Delayed)']
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Identity",
      children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "syringe",
        "disabled": !isInjectorReady,
        "content": "Print",
        "onClick": function () {
          function onClick() {
            return act('makeup_injector', {
              index: index,
              type: 'ui'
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "exchange-alt",
        "onClick": function () {
          function onClick() {
            return act(ACTION_MAKEUP_APPLY, {
              index: index,
              type: 'ui'
            });
          }

          return onClick;
        }(),
        children: ["Transfer", !isViableSubject && ' (Delayed)']
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Full Makeup",
      children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "syringe",
        "disabled": !isInjectorReady,
        "content": "Print",
        "onClick": function () {
          function onClick() {
            return act('makeup_injector', {
              index: index,
              type: 'mixed'
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "exchange-alt",
        "onClick": function () {
          function onClick() {
            return act(ACTION_MAKEUP_APPLY, {
              index: index,
              type: 'mixed'
            });
          }

          return onClick;
        }(),
        children: ["Transfer", !isViableSubject && ' (Delayed)']
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "save",
        "disabled": !hasDisk || diskReadOnly,
        "content": "Export To Disk",
        "onClick": function () {
          function onClick() {
            return act('save_makeup_disk', {
              index: index
            });
          }

          return onClick;
        }()
      })
    })]
  })], 4);
};

var DnaConsoleAdvancedInjectors = function DnaConsoleAdvancedInjectors(props, context) {
  var _data$storage$injecto2;

  var _useBackend19 = (0, _backend.useBackend)(context),
      act = _useBackend19.act,
      data = _useBackend19.data;

  var maxAdvInjectors = data.maxAdvInjectors,
      isInjectorReady = data.isInjectorReady;
  var advInjectors = (_data$storage$injecto2 = data.storage.injector) != null ? _data$storage$injecto2 : [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Advanced Injectors",
    children: [advInjectors.map(function (injector) {
      return (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
        "title": injector.name,
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "syringe",
          "disabled": !isInjectorReady,
          "content": "Print",
          "onClick": function () {
            function onClick() {
              return act('print_adv_inj', {
                name: injector.name
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "ml": 1,
          "color": "red",
          "icon": "times",
          "onClick": function () {
            function onClick() {
              return act('del_adv_inj', {
                name: injector.name
              });
            }

            return onClick;
          }()
        })], 4),
        children: (0, _inferno.createComponentVNode)(2, StorageMutations, {
          "mutations": injector.mutations,
          "customMode": "advinj" + advInjectors.findIndex(function (e) {
            return injector.name === e.name;
          })
        })
      }, injector.name);
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 2,
      children: (0, _inferno.createComponentVNode)(2, _components.Button.Input, {
        "minWidth": "200px",
        "content": "Create new injector",
        "disabled": advInjectors.length >= maxAdvInjectors,
        "onCommit": function () {
          function onCommit(e, value) {
            return act('new_adv_inj', {
              name: value
            });
          }

          return onCommit;
        }()
      })
    })]
  });
};

var MutationCombiner = function MutationCombiner(props, context) {
  var _props$mutations = props.mutations,
      mutations = _props$mutations === void 0 ? [] : _props$mutations,
      source = props.source;

  var _useBackend20 = (0, _backend.useBackend)(context),
      act = _useBackend20.act,
      data = _useBackend20.data;

  var brefFromName = function brefFromName(name) {
    var _mutations$find;

    return (_mutations$find = mutations.find(function (mutation) {
      return mutation.Name === name;
    })) == null ? void 0 : _mutations$find.ByondRef;
  };

  return (0, _inferno.createComponentVNode)(2, _components.Dropdown, {
    "width": "240px",
    "options": mutations.map(function (mutation) {
      return mutation.Name;
    }),
    "disabled": mutations.length === 0,
    "selected": "Combine mutations",
    "onSelected": function () {
      function onSelected(value) {
        return act("combine_" + source.Source, {
          firstref: brefFromName(value),
          secondref: source.ByondRef
        });
      }

      return onSelected;
    }()
  }, source.ByondRef);
};

/***/ }),

/***/ "./packages/tgui/interfaces/DnaVault.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/DnaVault.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.DnaVault = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var DnaVault = function DnaVault(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var completed = data.completed,
      used = data.used,
      choiceA = data.choiceA,
      choiceB = data.choiceB,
      dna = data.dna,
      dna_max = data.dna_max,
      plants = data.plants,
      plants_max = data.plants_max,
      animals = data.animals,
      animals_max = data.animals_max;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 400,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "DNA Vault Database",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Human DNA",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": dna / dna_max,
              children: dna + ' / ' + dna_max + ' Samples'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Plant DNA",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": plants / plants_max,
              children: plants + ' / ' + plants_max + ' Samples'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Animal DNA",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": animals / animals,
              children: animals + ' / ' + animals_max + ' Samples'
            })
          })]
        })
      }), !!(completed && !used) && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Personal Gene Therapy",
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          "bold": true,
          "textAlign": "center",
          "mb": 1,
          children: "Applicable Gene Therapy Treatments"
        }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "bold": true,
              "content": choiceA,
              "textAlign": "center",
              "onClick": function () {
                function onClick() {
                  return act('gene', {
                    choice: choiceA
                  });
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "bold": true,
              "content": choiceB,
              "textAlign": "center",
              "onClick": function () {
                function onClick() {
                  return act('gene', {
                    choice: choiceB
                  });
                }

                return onClick;
              }()
            })
          })]
        })]
      })]
    })
  });
};

exports.DnaVault = DnaVault;

/***/ }),

/***/ "./packages/tgui/interfaces/EightBallVote.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/EightBallVote.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.EightBallVote = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var EightBallVote = function EightBallVote(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var shaking = data.shaking;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 600,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: !shaking && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No question is currently being asked."
      }) || (0, _inferno.createComponentVNode)(2, EightBallVoteQuestion)
    })
  });
};

exports.EightBallVote = EightBallVote;

var EightBallVoteQuestion = function EightBallVoteQuestion(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var question = data.question,
      _data$answers = data.answers,
      answers = _data$answers === void 0 ? [] : _data$answers;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "textAlign": "center",
      "fontSize": "16px",
      "m": 1,
      children: ["\"", question, "\""]
    }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
      children: answers.map(function (answer) {
        return (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "bold": true,
            "content": (0, _string.toTitleCase)(answer.answer),
            "selected": answer.selected,
            "fontSize": "16px",
            "lineHeight": "24px",
            "textAlign": "center",
            "mb": 1,
            "onClick": function () {
              function onClick() {
                return act('vote', {
                  answer: answer.answer
                });
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "bold": true,
            "textAlign": "center",
            "fontSize": "30px",
            children: answer.amount
          })]
        }, answer.answer);
      })
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Electrolyzer.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/Electrolyzer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Electrolyzer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Electrolyzer = function Electrolyzer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 305,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Power",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject Cell",
          "disabled": !data.hasPowercell || !data.open,
          "onClick": function () {
            function onClick() {
              return act('eject');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.on ? 'power-off' : 'times',
          "content": data.on ? 'On' : 'Off',
          "selected": data.on,
          "disabled": !data.hasPowercell,
          "onClick": function () {
            function onClick() {
              return act('power');
            }

            return onClick;
          }()
        })], 4),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Cell",
            "color": !data.hasPowercell && 'bad',
            children: data.hasPowercell && (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.powerLevel / 100,
              "content": data.powerLevel + '%',
              "ranges": {
                good: [0.6, Infinity],
                average: [0.3, 0.6],
                bad: [-Infinity, 0.3]
              }
            }) || 'None'
          })
        })
      })
    })
  });
};

exports.Electrolyzer = Electrolyzer;

/***/ }),

/***/ "./packages/tgui/interfaces/Electropack.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/Electropack.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Electropack = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Electropack = function Electropack(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var power = data.power,
      code = data.code,
      frequency = data.frequency,
      minFrequency = data.minFrequency,
      maxFrequency = data.maxFrequency;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 260,
    "height": 137,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": power ? 'power-off' : 'times',
              "content": power ? 'On' : 'Off',
              "selected": power,
              "onClick": function () {
                function onClick() {
                  return act('power');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Frequency",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "content": "Reset",
              "onClick": function () {
                function onClick() {
                  return act('reset', {
                    reset: "freq"
                  });
                }

                return onClick;
              }()
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animate": true,
              "unit": "kHz",
              "step": 0.2,
              "stepPixelSize": 6,
              "minValue": minFrequency / 10,
              "maxValue": maxFrequency / 10,
              "value": frequency / 10,
              "format": function () {
                function format(value) {
                  return (0, _math.toFixed)(value, 1);
                }

                return format;
              }(),
              "width": "80px",
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('freq', {
                    freq: value
                  });
                }

                return onDrag;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Code",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "content": "Reset",
              "onClick": function () {
                function onClick() {
                  return act('reset', {
                    reset: "code"
                  });
                }

                return onClick;
              }()
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animate": true,
              "step": 1,
              "stepPixelSize": 6,
              "minValue": 1,
              "maxValue": 100,
              "value": code,
              "width": "80px",
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('code', {
                    code: value
                  });
                }

                return onDrag;
              }()
            })
          })]
        })
      })
    })
  });
};

exports.Electropack = Electropack;

/***/ }),

/***/ "./packages/tgui/interfaces/EmergencyShuttleConsole.js":
/*!*************************************************************!*\
  !*** ./packages/tgui/interfaces/EmergencyShuttleConsole.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.EmergencyShuttleConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var EmergencyShuttleConsole = function EmergencyShuttleConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var timer_str = data.timer_str,
      enabled = data.enabled,
      emagged = data.emagged,
      engines_started = data.engines_started,
      authorizations_remaining = data.authorizations_remaining,
      _data$authorizations = data.authorizations,
      authorizations = _data$authorizations === void 0 ? [] : _data$authorizations;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 350,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          "bold": true,
          "fontSize": "40px",
          "textAlign": "center",
          "fontFamily": "monospace",
          children: timer_str
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "textAlign": "center",
          "fontSize": "16px",
          "mb": 1,
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "bold": true,
            children: "ENGINES:"
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "color": engines_started ? 'good' : 'average',
            "ml": 1,
            children: engines_started ? 'Online' : 'Idle'
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Early Launch Authorization",
          "level": 2,
          "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "times",
            "content": "Repeal All",
            "color": "bad",
            "disabled": !enabled,
            "onClick": function () {
              function onClick() {
                return act('abort');
              }

              return onClick;
            }()
          }),
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
              children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "icon": "exclamation-triangle",
                "color": "good",
                "content": "AUTHORIZE",
                "disabled": !enabled,
                "onClick": function () {
                  function onClick() {
                    return act('authorize');
                  }

                  return onClick;
                }()
              })
            }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
              children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "icon": "minus",
                "content": "REPEAL",
                "disabled": !enabled,
                "onClick": function () {
                  function onClick() {
                    return act('repeal');
                  }

                  return onClick;
                }()
              })
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": "Authorizations",
            "level": 3,
            "minHeight": "150px",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "bold": true,
              "color": emagged ? 'bad' : 'good',
              children: emagged ? 'ERROR' : 'Remaining: ' + authorizations_remaining
            }),
            children: authorizations.length > 0 ? authorizations.map(function (authorization) {
              return (0, _inferno.createComponentVNode)(2, _components.Box, {
                "bold": true,
                "fontSize": "16px",
                "className": "candystripe",
                children: [authorization.name, " (", authorization.job, ")"]
              }, authorization.name);
            }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
              "bold": true,
              "textAlign": "center",
              "fontSize": "16px",
              "color": "average",
              children: "No Active Authorizations"
            })
          })]
        })]
      })
    })
  });
};

exports.EmergencyShuttleConsole = EmergencyShuttleConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/EngravedMessage.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/EngravedMessage.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.EngravedMessage = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var EngravedMessage = function EngravedMessage(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var admin_mode = data.admin_mode,
      creator_key = data.creator_key,
      creator_name = data.creator_name,
      has_liked = data.has_liked,
      has_disliked = data.has_disliked,
      hidden_message = data.hidden_message,
      is_creator = data.is_creator,
      num_likes = data.num_likes,
      num_dislikes = data.num_dislikes,
      realdate = data.realdate;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 600,
    "height": 300,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          "bold": true,
          "textAlign": "center",
          "fontSize": "20px",
          "mb": 2,
          children: (0, _string.decodeHtmlEntities)(hidden_message)
        }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "icon": "arrow-up",
              "content": " " + num_likes,
              "disabled": is_creator,
              "selected": has_liked,
              "textAlign": "center",
              "fontSize": "16px",
              "lineHeight": "24px",
              "onClick": function () {
                function onClick() {
                  return act('like');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "icon": "circle",
              "disabled": is_creator,
              "selected": !has_disliked && !has_liked,
              "textAlign": "center",
              "fontSize": "16px",
              "lineHeight": "24px",
              "onClick": function () {
                function onClick() {
                  return act('neutral');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "icon": "arrow-down",
              "content": " " + num_dislikes,
              "disabled": is_creator,
              "selected": has_disliked,
              "textAlign": "center",
              "fontSize": "16px",
              "lineHeight": "24px",
              "onClick": function () {
                function onClick() {
                  return act('dislike');
                }

                return onClick;
              }()
            })
          })]
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Created On",
            children: realdate
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section), !!admin_mode && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Admin Panel",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "times",
          "content": "Delete",
          "color": "bad",
          "onClick": function () {
            function onClick() {
              return act('delete');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Creator Ckey",
            children: creator_key
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Creator Character Name",
            children: creator_name
          })]
        })
      })]
    })
  });
};

exports.EngravedMessage = EngravedMessage;

/***/ }),

/***/ "./packages/tgui/interfaces/ExosuitControlConsole.js":
/*!***********************************************************!*\
  !*** ./packages/tgui/interfaces/ExosuitControlConsole.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ExosuitControlConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ExosuitControlConsole = function ExosuitControlConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$mechs = data.mechs,
      mechs = _data$mechs === void 0 ? [] : _data$mechs;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [mechs.length === 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No exosuits detected"
      }), mechs.map(function (mech) {
        return (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": mech.name,
          "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "envelope",
            "content": "Send Message",
            "disabled": !mech.pilot,
            "onClick": function () {
              function onClick() {
                return act('send_message', {
                  tracker_ref: mech.tracker_ref
                });
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "wifi",
            "content": mech.emp_recharging ? 'Recharging...' : 'EMP Burst',
            "color": "bad",
            "disabled": mech.emp_recharging,
            "onClick": function () {
              function onClick() {
                return act('shock', {
                  tracker_ref: mech.tracker_ref
                });
              }

              return onClick;
            }()
          })], 4),
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Integrity",
              children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                "color": mech.integrity <= 30 && 'bad' || mech.integrity <= 70 && 'average' || 'good',
                children: [mech.integrity, "%"]
              })
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Charge",
              children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                "color": mech.charge <= 30 && 'bad' || mech.charge <= 70 && 'average' || 'good',
                children: typeof mech.charge === 'number' && mech.charge + '%' || 'Not Found'
              })
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Airtank",
              children: typeof mech.airtank === 'number' && (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
                "value": mech.airtank,
                "format": function () {
                  function format(value) {
                    return (0, _math.toFixed)(value, 2) + ' kPa';
                  }

                  return format;
                }()
              }) || 'Not Equipped'
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Pilot",
              children: mech.pilot || 'None'
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Location",
              children: mech.location || 'Unknown'
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Active Equipment",
              children: mech.active_equipment || 'None'
            }), mech.cargo_space >= 0 && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Used Cargo Space",
              children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                "color": mech.cargo_space <= 30 && 'good' || mech.cargo_space <= 70 && 'average' || 'bad',
                children: [mech.cargo_space, "%"]
              })
            })]
          })
        }, mech.tracker_ref);
      })]
    })
  });
};

exports.ExosuitControlConsole = ExosuitControlConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/ExosuitFabricator.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/ExosuitFabricator.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ExosuitFabricator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _COLOR_KEYS;

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var MATERIAL_KEYS = {
  "iron": "sheet-metal_3",
  "glass": "sheet-glass_3",
  "silver": "sheet-silver_3",
  "gold": "sheet-gold_3",
  "diamond": "sheet-diamond",
  "plasma": "sheet-plasma_3",
  "uranium": "sheet-uranium",
  "bananium": "sheet-bananium",
  "titanium": "sheet-titanium_3",
  "bluespace crystal": "polycrystal",
  "plastic": "sheet-plastic_3"
};
var COLOR_NONE = 0;
var COLOR_AVERAGE = 1;
var COLOR_BAD = 2;
var COLOR_KEYS = (_COLOR_KEYS = {}, _COLOR_KEYS[COLOR_NONE] = false, _COLOR_KEYS[COLOR_AVERAGE] = "average", _COLOR_KEYS[COLOR_BAD] = "bad", _COLOR_KEYS);

var materialArrayToObj = function materialArrayToObj(materials) {
  var materialObj = {};
  materials.forEach(function (m) {
    materialObj[m.name] = m.amount;
  });
  return materialObj;
};

var partBuildColor = function partBuildColor(cost, tally, material) {
  if (cost > material) {
    return {
      color: COLOR_BAD,
      deficit: cost - material
    };
  }

  if (tally > material) {
    return {
      color: COLOR_AVERAGE,
      deficit: cost
    };
  }

  if (cost + tally > material) {
    return {
      color: COLOR_AVERAGE,
      deficit: cost + tally - material
    };
  }

  return {
    color: COLOR_NONE,
    deficit: 0
  };
};

var partCondFormat = function partCondFormat(materials, tally, part) {
  var format = {
    "textColor": COLOR_NONE
  };
  Object.keys(part.cost).forEach(function (mat) {
    format[mat] = partBuildColor(part.cost[mat], tally[mat], materials[mat]);

    if (format[mat].color > format["textColor"]) {
      format["textColor"] = format[mat].color;
    }
  });
  return format;
};

var queueCondFormat = function queueCondFormat(materials, queue) {
  var materialTally = {};
  var matFormat = {};
  var missingMatTally = {};
  var textColors = {};
  queue.forEach(function (part, i) {
    textColors[i] = COLOR_NONE;
    Object.keys(part.cost).forEach(function (mat) {
      materialTally[mat] = materialTally[mat] || 0;
      missingMatTally[mat] = missingMatTally[mat] || 0;
      matFormat[mat] = partBuildColor(part.cost[mat], materialTally[mat], materials[mat]);

      if (matFormat[mat].color !== COLOR_NONE) {
        if (textColors[i] < matFormat[mat].color) {
          textColors[i] = matFormat[mat].color;
        }
      } else {
        materialTally[mat] += part.cost[mat];
      }

      missingMatTally[mat] += matFormat[mat].deficit;
    });
  });
  return {
    materialTally: materialTally,
    missingMatTally: missingMatTally,
    textColors: textColors,
    matFormat: matFormat
  };
};

var searchFilter = function searchFilter(search, allparts) {
  var searchResults = [];

  if (!search.length) {
    return;
  }

  var resultFilter = (0, _string.createSearch)(search, function (part) {
    return (part.name || "") + (part.desc || "") + (part.searchMeta || "");
  });
  Object.keys(allparts).forEach(function (category) {
    allparts[category].filter(resultFilter).forEach(function (e) {
      searchResults.push(e);
    });
  });
  searchResults = (0, _collections.uniqBy)(function (part) {
    return part.name;
  })(searchResults);
  return searchResults;
};

var ExosuitFabricator = function ExosuitFabricator(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var queue = data.queue || [];
  var materialAsObj = materialArrayToObj(data.materials || []);

  var _queueCondFormat = queueCondFormat(materialAsObj, queue),
      materialTally = _queueCondFormat.materialTally,
      missingMatTally = _queueCondFormat.missingMatTally,
      textColors = _queueCondFormat.textColors;

  var _useSharedState = (0, _backend.useSharedState)(context, "display_mats", false),
      displayMatCost = _useSharedState[0],
      setDisplayMatCost = _useSharedState[1];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    "title": "Exosuit Fabricator",
    "width": 1100,
    "height": 640,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "fillPositionedParent": true,
        "direction": "column",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "ml": 1,
            "mr": 1,
            "mt": 1,
            "basis": "content",
            "grow": 1,
            children: (0, _inferno.createComponentVNode)(2, _components.Section, {
              "title": "Materials",
              children: (0, _inferno.createComponentVNode)(2, Materials)
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "mt": 1,
            "mr": 1,
            children: (0, _inferno.createComponentVNode)(2, _components.Section, {
              "title": "Settings",
              "height": "100%",
              children: (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
                "onClick": function () {
                  function onClick() {
                    return setDisplayMatCost(!displayMatCost);
                  }

                  return onClick;
                }(),
                "checked": displayMatCost,
                children: "Display Material Costs"
              })
            })
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          "m": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
            "spacing": 1,
            "height": "100%",
            "overflowY": "hide",
            children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
              "position": "relative",
              "basis": "content",
              children: (0, _inferno.createComponentVNode)(2, _components.Section, {
                "height": "100%",
                "overflowY": "auto",
                "title": "Categories",
                "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "content": "R&D Sync",
                  "onClick": function () {
                    function onClick() {
                      return act("sync_rnd");
                    }

                    return onClick;
                  }()
                }),
                children: (0, _inferno.createComponentVNode)(2, PartSets)
              })
            }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
              "position": "relative",
              "grow": 1,
              children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                "fillPositionedParent": true,
                "overflowY": "auto",
                children: (0, _inferno.createComponentVNode)(2, PartLists, {
                  "queueMaterials": materialTally,
                  "materials": materialAsObj
                })
              })
            }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
              "width": "420px",
              "position": "relative",
              children: (0, _inferno.createComponentVNode)(2, Queue, {
                "queueMaterials": materialTally,
                "missingMaterials": missingMatTally,
                "textColors": textColors
              })
            })]
          })
        })]
      })
    })
  });
};

exports.ExosuitFabricator = ExosuitFabricator;

var EjectMaterial = function EjectMaterial(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act;

  var material = props.material;
  var name = material.name,
      removable = material.removable,
      sheets = material.sheets,
      ref = material.ref;

  var _useSharedState2 = (0, _backend.useSharedState)(context, "remove_mats_" + name, 1),
      removeMaterials = _useSharedState2[0],
      setRemoveMaterials = _useSharedState2[1];

  if (removeMaterials > 1 && sheets < removeMaterials) {
    setRemoveMaterials(sheets || 1);
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
    "width": "30px",
    "animated": true,
    "value": removeMaterials,
    "minValue": 1,
    "maxValue": sheets || 1,
    "initial": 1,
    "onDrag": function () {
      function onDrag(e, val) {
        var newVal = parseInt(val, 10);

        if (Number.isInteger(newVal)) {
          setRemoveMaterials(newVal);
        }
      }

      return onDrag;
    }()
  }), (0, _inferno.createComponentVNode)(2, _components.Button, {
    "icon": "eject",
    "disabled": !removable,
    "onClick": function () {
      function onClick() {
        return act("remove_mat", {
          ref: ref,
          amount: removeMaterials
        });
      }

      return onClick;
    }()
  })], 4);
};

var Materials = function Materials(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      data = _useBackend3.data;

  var materials = data.materials || [];
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "wrap": "wrap",
    children: materials.map(function (material) {
      return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "width": "80px",
        children: [(0, _inferno.createComponentVNode)(2, MaterialAmount, {
          "name": material.name,
          "amount": material.amount,
          "formatsi": true
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mt": 1,
          "style": {
            "text-align": "center"
          },
          children: (0, _inferno.createComponentVNode)(2, EjectMaterial, {
            "material": material
          })
        })]
      }, material.name);
    })
  });
};

var MaterialAmount = function MaterialAmount(props, context) {
  var name = props.name,
      amount = props.amount,
      formatsi = props.formatsi,
      formatmoney = props.formatmoney,
      color = props.color,
      style = props.style;
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "direction": "column",
    "align": "center",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "className": (0, _react.classes)(['sheetmaterials32x32', MATERIAL_KEYS[name]]),
        "style": style
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "textColor": color,
        "style": {
          "text-align": "center"
        },
        children: formatsi && (0, _format.formatSiUnit)(amount, 0) || formatmoney && (0, _format.formatMoney)(amount) || amount
      })
    })]
  });
};

var PartSets = function PartSets(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      data = _useBackend4.data;

  var partSets = data.partSets || [];
  var buildableParts = data.buildableParts || {};

  var _useSharedState3 = (0, _backend.useSharedState)(context, "part_tab", partSets.length ? buildableParts[0] : ""),
      selectedPartTab = _useSharedState3[0],
      setSelectedPartTab = _useSharedState3[1];

  return (0, _inferno.createComponentVNode)(2, _components.Tabs, {
    "vertical": true,
    children: partSets.map(function (set) {
      return !!buildableParts[set] && (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
        "selected": set === selectedPartTab,
        "disabled": !buildableParts[set],
        "onClick": function () {
          function onClick() {
            return setSelectedPartTab(set);
          }

          return onClick;
        }(),
        children: set
      }, set);
    })
  });
};

var PartLists = function PartLists(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      data = _useBackend5.data;

  var getFirstValidPartSet = function getFirstValidPartSet(sets) {
    for (var _iterator = _createForOfIteratorHelperLoose(sets), _step; !(_step = _iterator()).done;) {
      var set = _step.value;

      if (buildableParts[set]) {
        return set;
      }
    }

    return null;
  };

  var partSets = data.partSets || [];
  var buildableParts = data.buildableParts || [];
  var queueMaterials = props.queueMaterials,
      materials = props.materials;

  var _useSharedState4 = (0, _backend.useSharedState)(context, "part_tab", getFirstValidPartSet(partSets)),
      selectedPartTab = _useSharedState4[0],
      setSelectedPartTab = _useSharedState4[1];

  var _useSharedState5 = (0, _backend.useSharedState)(context, "search_text", ""),
      searchText = _useSharedState5[0],
      setSearchText = _useSharedState5[1];

  if (!selectedPartTab || !buildableParts[selectedPartTab]) {
    var validSet = getFirstValidPartSet(partSets);

    if (validSet) {
      setSelectedPartTab(validSet);
    } else {
      return;
    }
  }

  var partsList; // Build list of sub-categories if not using a search filter.

  if (!searchText) {
    partsList = {
      "Parts": []
    };
    buildableParts[selectedPartTab].forEach(function (part) {
      part["format"] = partCondFormat(materials, queueMaterials, part);

      if (!part.subCategory) {
        partsList["Parts"].push(part);
        return;
      }

      if (!(part.subCategory in partsList)) {
        partsList[part.subCategory] = [];
      }

      partsList[part.subCategory].push(part);
    });
  } else {
    partsList = [];
    searchFilter(searchText, buildableParts).forEach(function (part) {
      part["format"] = partCondFormat(materials, queueMaterials, part);
      partsList.push(part);
    });
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "mr": 1,
        children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
          "name": "search"
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        children: (0, _inferno.createComponentVNode)(2, _components.Input, {
          "fluid": true,
          "placeholder": "Search for...",
          "onInput": function () {
            function onInput(e, v) {
              return setSearchText(v);
            }

            return onInput;
          }()
        })
      })]
    })
  }), !!searchText && (0, _inferno.createComponentVNode)(2, PartCategory, {
    "name": "Search Results",
    "parts": partsList,
    "forceShow": true,
    "placeholder": "No matching results..."
  }) || Object.keys(partsList).map(function (category) {
    return (0, _inferno.createComponentVNode)(2, PartCategory, {
      "name": category,
      "parts": partsList[category]
    }, category);
  })], 0);
};

var PartCategory = function PartCategory(props, context) {
  var _useBackend6 = (0, _backend.useBackend)(context),
      act = _useBackend6.act,
      data = _useBackend6.data;

  var buildingPart = data.buildingPart;
  var parts = props.parts,
      name = props.name,
      forceShow = props.forceShow,
      placeholder = props.placeholder;

  var _useSharedState6 = (0, _backend.useSharedState)(context, "display_mats", false),
      displayMatCost = _useSharedState6[0];

  return (!!parts.length || forceShow) && (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": name,
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "disabled": !parts.length,
      "color": "good",
      "content": "Queue All",
      "icon": "plus-circle",
      "onClick": function () {
        function onClick() {
          return act("add_queue_set", {
            part_list: parts.map(function (part) {
              return part.id;
            })
          });
        }

        return onClick;
      }()
    }),
    children: [!parts.length && placeholder, parts.map(function (part) {
      return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Flex, {
        "align": "center",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "disabled": buildingPart || part.format.textColor === COLOR_BAD,
            "color": "good",
            "height": "20px",
            "mr": 1,
            "icon": "play",
            "onClick": function () {
              function onClick() {
                return act("build_part", {
                  id: part.id
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "average",
            "height": "20px",
            "mr": 1,
            "icon": "plus-circle",
            "onClick": function () {
              function onClick() {
                return act("add_queue_part", {
                  id: part.id
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "textColor": COLOR_KEYS[part.format.textColor],
            children: part.name
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "question-circle",
            "transparent": true,
            "height": "20px",
            "tooltip": "Build Time: " + part.printTime + "s. " + (part.desc || ""),
            "tooltipPosition": "left"
          })
        })]
      }), displayMatCost && (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "mb": 2,
        children: Object.keys(part.cost).map(function (material) {
          return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "width": "50px",
            "color": COLOR_KEYS[part.format[material].color],
            children: (0, _inferno.createComponentVNode)(2, MaterialAmount, {
              "formatmoney": true,
              "style": {
                transform: 'scale(0.75) translate(0%, 10%)'
              },
              "name": material,
              "amount": part.cost[material]
            })
          }, material);
        })
      })], 0, part.name);
    })]
  });
};

var Queue = function Queue(props, context) {
  var _useBackend7 = (0, _backend.useBackend)(context),
      act = _useBackend7.act,
      data = _useBackend7.data;

  var isProcessingQueue = data.isProcessingQueue;
  var queue = data.queue || [];
  var queueMaterials = props.queueMaterials,
      missingMaterials = props.missingMaterials,
      textColors = props.textColors;
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "height": "100%",
    "width": "100%",
    "direction": "column",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "height": 0,
      "grow": 1,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "height": "100%",
        "title": "Queue",
        "overflowY": "auto",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
          "disabled": !queue.length,
          "color": "bad",
          "icon": "minus-circle",
          "content": "Clear Queue",
          "onClick": function () {
            function onClick() {
              return act("clear_queue");
            }

            return onClick;
          }()
        }), !!isProcessingQueue && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "disabled": !queue.length,
          "content": "Stop",
          "icon": "stop",
          "onClick": function () {
            function onClick() {
              return act("stop_queue");
            }

            return onClick;
          }()
        }) || (0, _inferno.createComponentVNode)(2, _components.Button, {
          "disabled": !queue.length,
          "content": "Build Queue",
          "icon": "play",
          "onClick": function () {
            function onClick() {
              return act("build_queue");
            }

            return onClick;
          }()
        })], 0),
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "direction": "column",
          "height": "100%",
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, BeingBuilt)
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, QueueList, {
              "textColors": textColors
            })
          })]
        })
      })
    }), !!queue.length && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "mt": 1,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Material Cost",
        children: (0, _inferno.createComponentVNode)(2, QueueMaterials, {
          "queueMaterials": queueMaterials,
          "missingMaterials": missingMaterials
        })
      })
    })]
  });
};

var QueueMaterials = function QueueMaterials(props, context) {
  var queueMaterials = props.queueMaterials,
      missingMaterials = props.missingMaterials;
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "wrap": "wrap",
    children: Object.keys(queueMaterials).map(function (material) {
      return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "width": "12%",
        children: [(0, _inferno.createComponentVNode)(2, MaterialAmount, {
          "formatmoney": true,
          "name": material,
          "amount": queueMaterials[material]
        }), !!missingMaterials[material] && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "textColor": "bad",
          "style": {
            "text-align": "center"
          },
          children: (0, _format.formatMoney)(missingMaterials[material])
        })]
      }, material);
    })
  });
};

var QueueList = function QueueList(props, context) {
  var _useBackend8 = (0, _backend.useBackend)(context),
      act = _useBackend8.act,
      data = _useBackend8.data;

  var textColors = props.textColors;
  var queue = data.queue || [];

  if (!queue.length) {
    return (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("No parts in queue.")], 4);
  }

  return queue.map(function (part, index) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "mb": 0.5,
        "direction": "column",
        "justify": "center",
        "wrap": "wrap",
        "height": "20px",
        "inline": true,
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "basis": "content",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "height": "20px",
            "mr": 1,
            "icon": "minus-circle",
            "color": "bad",
            "onClick": function () {
              function onClick() {
                return act("del_queue_part", {
                  index: index + 1
                });
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "textColor": COLOR_KEYS[textColors[index]],
            children: part.name
          })
        })]
      })
    }, part.name);
  });
};

var BeingBuilt = function BeingBuilt(props, context) {
  var _useBackend9 = (0, _backend.useBackend)(context),
      data = _useBackend9.data;

  var buildingPart = data.buildingPart,
      storedPart = data.storedPart;

  if (storedPart) {
    var name = storedPart.name;
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
        "minValue": 0,
        "maxValue": 1,
        "value": 1,
        "color": "average",
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: name
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: "Fabricator outlet obstructed..."
          })]
        })
      })
    });
  }

  if (buildingPart) {
    var _name = buildingPart.name,
        duration = buildingPart.duration,
        printTime = buildingPart.printTime;
    var timeLeft = Math.ceil(duration / 10);
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
        "minValue": 0,
        "maxValue": printTime,
        "value": duration,
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: _name
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: timeLeft >= 0 && timeLeft + "s" || "Dispensing..."
          })]
        })
      })
    });
  }
};

/***/ }),

/***/ "./packages/tgui/interfaces/ExperimentConfigure.js":
/*!*********************************************************!*\
  !*** ./packages/tgui/interfaces/ExperimentConfigure.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Experiment = exports.ExperimentConfigure = exports.TechwebServer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var ExperimentStages = function ExperimentStages(props) {
  return (0, _inferno.createComponentVNode)(2, _components.Table, {
    "ml": 2,
    "className": "ExperimentStage__Table",
    children: props.children.map(function (stage, idx) {
      return (0, _inferno.normalizeProps)((0, _inferno.createComponentVNode)(2, ExperimentStageRow, Object.assign({}, stage), idx));
    })
  });
};

var ExperimentStageRow = function ExperimentStageRow(props) {
  var type = props[0],
      description = props[1],
      value = props[2],
      altValue = props[3]; // Determine completion based on type of stage

  var completion = false;

  switch (type) {
    case "bool":
    case "detail":
      completion = value;
      break;

    case "integer":
      completion = value === altValue;
      break;

    case "float":
      completion = value >= 1;
      break;
  }

  return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
    "className": "ExperimentStage__StageContainer\n        " + (completion ? "complete" : "incomplete"),
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      "className": "ExperimentStage__Indicator " + type,
      "color": completion ? "good" : "bad",
      children: type === "bool" && (0, _inferno.createComponentVNode)(2, _components.Icon, {
        "name": value ? "check" : "times"
      }) || type === "integer" && value + "/" + altValue || type === "float" && value * 100 + "%" || type === "detail" && "⤷"
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "className": "ExperimentStage__Description",
      children: description
    })]
  });
};

var TechwebServer = function TechwebServer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var servers = props.servers;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "m": 1,
    "className": "ExperimentTechwebServer__Web",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
      "align": "center",
      "justify": "space-between",
      "className": "ExperimentTechwebServer__WebHeader",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "className": "ExperimentTechwebServer__WebName",
        children: [servers[0].web_id, " / ", servers[0].web_org]
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "onClick": function () {
            function onClick() {
              return servers[0].selected ? act("clear_server") : act("select_server", {
                "ref": servers[0].ref
              });
            }

            return onClick;
          }(),
          "content": servers[0].selected ? "Disconnect" : "Connect",
          "backgroundColor": servers[0].selected ? "good" : "rgba(0, 0, 0, 0.4)",
          "className": "ExperimentTechwebServer__ConnectButton"
        })
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "className": "ExperimentTechwebServer__WebContent",
      children: [(0, _inferno.createVNode)(1, "span", null, "Connectivity to this web is maintained by the following servers...", 16), (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: servers.map(function (server, index) {
          return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": server.name,
            children: (0, _inferno.createVNode)(1, "i", null, [(0, _inferno.createTextVNode)("Located in "), server.location], 0)
          }, index);
        })
      })]
    })]
  });
};

exports.TechwebServer = TechwebServer;

var ExperimentConfigure = function ExperimentConfigure(props, context) {
  var _data$servers, _data$experiments;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var always_active = data.always_active,
      has_start_callback = data.has_start_callback;
  var servers = (_data$servers = data.servers) != null ? _data$servers : [];
  var experiments = (0, _collections.sortBy)(function (exp) {
    return exp.name;
  })((_data$experiments = data.experiments) != null ? _data$experiments : []); // Group servers together by web

  var webs = new Map();
  servers.forEach(function (x) {
    if (x.web_id !== null) {
      if (!webs.has(x.web_id)) {
        webs.set(x.web_id, []);
      }

      webs.get(x.web_id).push(x);
    }
  });
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    "width": 600,
    "height": 735,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "direction": "column",
        "height": "100%",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mb": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": "Servers",
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              children: webs.size > 0 ? "Please select a techweb to connect to..." : "Found no available techwebs!"
            }), webs.size > 0 && Array.from(webs, function (_ref) {
              var techweb = _ref[0],
                  servers = _ref[1];
              return (0, _inferno.createComponentVNode)(2, TechwebServer, {
                "servers": servers
              }, techweb);
            })]
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mb": has_start_callback ? 1 : 0,
          "grow": 1,
          children: servers.some(function (e) {
            return e.selected;
          }) && (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": "Experiments",
            "className": "ExperimentConfigure__ExperimentsContainer",
            children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
              "mb": 1,
              children: experiments.length && always_active && "This device is configured to attempt to perform all available" + " experiments, so no further configuration is necessary." || experiments.length && "Select one of the following experiments..." || "No experiments found on this web"
            }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
              children: experiments.map(function (exp, i) {
                return (0, _inferno.createComponentVNode)(2, Experiment, {
                  "exp": exp,
                  "controllable": true
                }, i);
              })
            })]
          })
        }), !!has_start_callback && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "className": "ExperimentConfigure__PerformExperiment",
            "onClick": function () {
              function onClick() {
                return act("start_experiment_callback");
              }

              return onClick;
            }(),
            "icon": "flask",
            children: "Perform Experiment"
          })
        })]
      })
    })
  });
};

exports.ExperimentConfigure = ExperimentConfigure;

var Experiment = function Experiment(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var exp = props.exp,
      controllable = props.controllable;
  var name = exp.name,
      description = exp.description,
      tag = exp.tag,
      selectable = exp.selectable,
      selected = exp.selected,
      progress = exp.progress,
      performance_hint = exp.performance_hint,
      ref = exp.ref;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "m": 1,
    "className": "ExperimentConfigure__ExperimentPanel",
    children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "onClick": function () {
        function onClick() {
          return controllable && (selected ? act("clear_experiment") : act("select_experiment", {
            "ref": ref
          }));
        }

        return onClick;
      }(),
      "backgroundColor": selected ? "good" : "#40628a",
      "className": "ExperimentConfigure__ExperimentName",
      "disabled": controllable && !selectable,
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "align": "center",
        "justify": "space-between",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "color": !controllable || selectable ? "white" : "rgba(0, 0, 0, 0.6)",
          children: name
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "color": !controllable || selectable ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.5)",
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "className": "ExperimentConfigure__TagContainer",
            children: [tag, (0, _inferno.createComponentVNode)(2, _components.Icon, {
              "name": "question-circle",
              "mx": 0.5
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "className": "ExperimentConfigure__PerformanceHint",
              children: (0, _inferno.createComponentVNode)(2, _components.Tooltip, {
                "content": performance_hint,
                "position": "bottom-left"
              })
            })]
          })
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "className": "ExperimentConfigure__ExperimentContent",
      children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
        "mb": 1,
        children: description
      }), props.children, (0, _inferno.createComponentVNode)(2, ExperimentStages, {
        children: progress
      })]
    })]
  }, ref);
};

exports.Experiment = Experiment;

/***/ }),

/***/ "./packages/tgui/interfaces/ForbiddenLore.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/ForbiddenLore.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ForbiddenLore = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ForbiddenLore = function ForbiddenLore(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var charges = data.charges;
  var to_know = (0, _fp.flow)([(0, _collections.sortBy)(function (to_know) {
    return to_know.state !== "Research";
  }, function (to_know) {
    return to_know.path === "Side";
  })])(data.to_know || []);
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 900,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Research Eldritch Knowledge",
        children: ["Charges left : ", charges, to_know !== null ? to_know.map(function (knowledge) {
          return (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": knowledge.name,
            "level": 2,
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "bold": true,
              "my": 1,
              children: [knowledge.path, " path"]
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "my": 1,
              children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": knowledge.state,
                "disabled": knowledge.disabled,
                "onClick": function () {
                  function onClick() {
                    return act('research', {
                      name: knowledge.name,
                      cost: knowledge.cost
                    });
                  }

                  return onClick;
                }()
              }), ' ', "Cost : ", knowledge.cost]
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "italic": true,
              "my": 1,
              children: knowledge.flavour
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "my": 1,
              children: knowledge.desc
            })]
          }, knowledge.name);
        }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: "No more knowledge can be found"
        })]
      })
    })
  });
};

exports.ForbiddenLore = ForbiddenLore;

/***/ }),

/***/ "./packages/tgui/interfaces/Gateway.js":
/*!*********************************************!*\
  !*** ./packages/tgui/interfaces/Gateway.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Gateway = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Gateway = function Gateway() {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, GatewayContent)
    })
  });
};

exports.Gateway = Gateway;

var GatewayContent = function GatewayContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$gateway_present = data.gateway_present,
      gateway_present = _data$gateway_present === void 0 ? false : _data$gateway_present,
      _data$gateway_status = data.gateway_status,
      gateway_status = _data$gateway_status === void 0 ? false : _data$gateway_status,
      _data$current_target = data.current_target,
      current_target = _data$current_target === void 0 ? null : _data$current_target,
      _data$destinations = data.destinations,
      destinations = _data$destinations === void 0 ? [] : _data$destinations;

  if (!gateway_present) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      children: [(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No linked gateway"
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "onClick": function () {
          function onClick() {
            return act('linkup');
          }

          return onClick;
        }(),
        children: "Linkup"
      })]
    });
  }

  if (current_target) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": current_target.name,
      children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
        "name": "rainbow",
        "size": 4,
        "color": "green"
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "onClick": function () {
          function onClick() {
            return act("deactivate");
          }

          return onClick;
        }(),
        children: "Deactivate"
      })]
    });
  }

  if (!destinations.length) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      children: "No gateway nodes detected."
    });
  }

  return (0, _inferno.createFragment)([!gateway_status && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
    children: "Gateway Unpowered"
  }), destinations.map(function (dest) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": dest.name,
      children: dest.available && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "onClick": function () {
          function onClick() {
            return act('activate', {
              destination: dest.ref
            });
          }

          return onClick;
        }(),
        children: "Activate"
      }) || (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
        "m": 1,
        "textColor": "bad",
        children: dest.reason
      }), !!dest.timeout && (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
        "value": dest.timeout,
        children: "Calibrating..."
      })], 0)
    }, dest.ref);
  })], 0);
};

/***/ }),

/***/ "./packages/tgui/interfaces/GhostPoolProtection.js":
/*!*********************************************************!*\
  !*** ./packages/tgui/interfaces/GhostPoolProtection.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.GhostPoolProtection = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var GhostPoolProtection = function GhostPoolProtection(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var events_or_midrounds = data.events_or_midrounds,
      spawners = data.spawners,
      station_sentience = data.station_sentience,
      silicons = data.silicons,
      minigames = data.minigames;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Ghost Pool Protection",
    "width": 400,
    "height": 270,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "grow": 1,
        "height": "100%",
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Options",
          "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "good",
            "icon": "plus-circle",
            "content": "Enable Everything",
            "onClick": function () {
              function onClick() {
                return act("all_roles");
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "bad",
            "icon": "minus-circle",
            "content": "Disable Everything",
            "onClick": function () {
              function onClick() {
                return act("no_roles");
              }

              return onClick;
            }()
          })], 4),
          children: [(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
            "danger": true,
            children: "For people creating a sneaky event: If you toggle Station Created Sentience, people may catch on that admins have disabled roles for your event..."
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "textAlign": "center",
              "color": events_or_midrounds ? "good" : "bad",
              "icon": "meteor",
              "content": "Events and Midround Rulesets",
              "onClick": function () {
                function onClick() {
                  return act("toggle_events_or_midrounds");
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "textAlign": "center",
              "color": spawners ? "good" : "bad",
              "icon": "pastafarianism",
              "content": "Ghost Role Spawners",
              "onClick": function () {
                function onClick() {
                  return act("toggle_spawners");
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "textAlign": "center",
              "color": station_sentience ? "good" : "bad",
              "icon": "user-astronaut",
              "content": "Station Created Sentience",
              "onClick": function () {
                function onClick() {
                  return act("toggle_station_sentience");
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "textAlign": "center",
              "color": silicons ? "good" : "bad",
              "icon": "robot",
              "content": "Silicons",
              "onClick": function () {
                function onClick() {
                  return act("toggle_silicons");
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "textAlign": "center",
              "color": minigames ? "good" : "bad",
              "icon": "gamepad",
              "content": "Minigames",
              "onClick": function () {
                function onClick() {
                  return act("toggle_minigames");
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "textAlign": "center",
              "color": "orange",
              "icon": "check",
              "content": "Apply Changes",
              "onClick": function () {
                function onClick() {
                  return act("apply_settings");
                }

                return onClick;
              }()
            })
          })]
        })
      })
    })
  });
};

exports.GhostPoolProtection = GhostPoolProtection;

/***/ }),

/***/ "./packages/tgui/interfaces/GlandDispenser.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/GlandDispenser.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.GlandDispenser = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var GlandDispenser = function GlandDispenser(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$glands = data.glands,
      glands = _data$glands === void 0 ? [] : _data$glands;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 338,
    "theme": "abductor",
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: glands.map(function (gland) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "width": "60px",
            "height": "60px",
            "m": 0.75,
            "textAlign": "center",
            "lineHeight": "55px",
            "icon": "eject",
            "backgroundColor": gland.color,
            "content": gland.amount || "0",
            "disabled": !gland.amount,
            "onClick": function () {
              function onClick() {
                return act('dispense', {
                  gland_id: gland.id
                });
              }

              return onClick;
            }()
          }, gland.id);
        })
      })
    })
  });
};

exports.GlandDispenser = GlandDispenser;

/***/ }),

/***/ "./packages/tgui/interfaces/Gps.js":
/*!*****************************************!*\
  !*** ./packages/tgui/interfaces/Gps.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Gps = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _vector = __webpack_require__(/*! common/vector */ "./packages/common/vector.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var coordsToVec = function coordsToVec(coords) {
  return (0, _collections.map)(parseFloat)(coords.split(', '));
};

var Gps = function Gps(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var currentArea = data.currentArea,
      currentCoords = data.currentCoords,
      globalmode = data.globalmode,
      power = data.power,
      tag = data.tag,
      updating = data.updating;
  var signals = (0, _fp.flow)([(0, _collections.map)(function (signal, index) {
    // Calculate distance to the target. BYOND distance is capped to 127,
    // that's why we roll our own calculations here.
    var dist = signal.dist && Math.round((0, _vector.vecLength)((0, _vector.vecSubtract)(coordsToVec(currentCoords), coordsToVec(signal.coords))));
    return Object.assign({}, signal, {
      dist: dist,
      index: index
    });
  }), (0, _collections.sortBy)( // Signals with distance metric go first
  function (signal) {
    return signal.dist === undefined;
  }, // Sort alphabetically
  function (signal) {
    return signal.entrytag;
  })])(data.signals || []);
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Global Positioning System",
    "width": 470,
    "height": 700,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Control",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "power-off",
          "content": power ? "On" : "Off",
          "selected": power,
          "onClick": function () {
            function onClick() {
              return act('power');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Tag",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "pencil-alt",
              "content": tag,
              "onClick": function () {
                function onClick() {
                  return act('rename');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Scan Mode",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": updating ? "unlock" : "lock",
              "content": updating ? "AUTO" : "MANUAL",
              "color": !updating && "bad",
              "onClick": function () {
                function onClick() {
                  return act('updating');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Range",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "content": globalmode ? "MAXIMUM" : "LOCAL",
              "selected": !globalmode,
              "onClick": function () {
                function onClick() {
                  return act('globalmode');
                }

                return onClick;
              }()
            })
          })]
        })
      }), !!power && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Current Location",
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "fontSize": "18px",
          children: [currentArea, " (", currentCoords, ")"]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Detected Signals",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            "bold": true,
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "content": "Name"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "collapsing": true,
              "content": "Direction"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "collapsing": true,
              "content": "Coordinates"
            })]
          }), signals.map(function (signal) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              "className": "candystripe",
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "color": "label",
                children: signal.entrytag
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                "opacity": signal.dist !== undefined && (0, _math.clamp)(1.2 / Math.log(Math.E + signal.dist / 20), 0.4, 1),
                children: [signal.degrees !== undefined && (0, _inferno.createComponentVNode)(2, _components.Icon, {
                  "mr": 1,
                  "size": 1.2,
                  "name": "arrow-up",
                  "rotation": signal.degrees
                }), signal.dist !== undefined && signal.dist + 'm']
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                children: signal.coords
              })]
            }, signal.entrytag + signal.coords + signal.index);
          })]
        })
      })], 4)]
    })
  });
};

exports.Gps = Gps;

/***/ }),

/***/ "./packages/tgui/interfaces/GravityGenerator.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/GravityGenerator.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.GravityGenerator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var GravityGenerator = function GravityGenerator(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var charging_state = data.charging_state,
      operational = data.operational;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 155,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [!operational && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No data available"
      }), !!operational && charging_state !== 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        "danger": true,
        children: "WARNING - Radiation detected"
      }), !!operational && charging_state === 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        "success": true,
        children: "No radiation detected"
      }), !!operational && (0, _inferno.createComponentVNode)(2, GravityGeneratorContent)]
    })
  });
};

exports.GravityGenerator = GravityGenerator;

var GravityGeneratorContent = function GravityGeneratorContent(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var breaker = data.breaker,
      charge_count = data.charge_count,
      charging_state = data.charging_state,
      on = data.on,
      operational = data.operational;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Power",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": breaker ? 'power-off' : 'times',
          "content": breaker ? 'On' : 'Off',
          "selected": breaker,
          "disabled": !operational,
          "onClick": function () {
            function onClick() {
              return act('gentoggle');
            }

            return onClick;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Gravity Charge",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": charge_count / 100,
          "ranges": {
            good: [0.7, Infinity],
            average: [0.3, 0.7],
            bad: [-Infinity, 0.3]
          }
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Charge Mode",
        children: [charging_state === 0 && (on && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "good",
          children: "Fully Charged"
        }) || (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "bad",
          children: "Not Charging"
        })), charging_state === 1 && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "average",
          children: "Charging"
        }), charging_state === 2 && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "average",
          children: "Discharging"
        })]
      })]
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/GulagItemReclaimer.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/GulagItemReclaimer.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.GulagItemReclaimer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var GulagItemReclaimer = function GulagItemReclaimer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$mobs = data.mobs,
      mobs = _data$mobs === void 0 ? [] : _data$mobs;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 325,
    "height": 400,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [mobs.length === 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No stored items"
      }), mobs.length > 0 && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Stored Items",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: mobs.map(function (mob) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: mob.name
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "textAlign": "right",
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "content": "Retrieve Items",
                  "disabled": !data.can_reclaim,
                  "onClick": function () {
                    function onClick() {
                      return act('release_items', {
                        mobref: mob.mob
                      });
                    }

                    return onClick;
                  }()
                })
              })]
            }, mob.mob);
          })
        })
      })]
    })
  });
};

exports.GulagItemReclaimer = GulagItemReclaimer;

/***/ }),

/***/ "./packages/tgui/interfaces/GulagTeleporterConsole.js":
/*!************************************************************!*\
  !*** ./packages/tgui/interfaces/GulagTeleporterConsole.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.GulagTeleporterConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var GulagTeleporterConsole = function GulagTeleporterConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var teleporter = data.teleporter,
      teleporter_lock = data.teleporter_lock,
      teleporter_state_open = data.teleporter_state_open,
      teleporter_location = data.teleporter_location,
      beacon = data.beacon,
      beacon_location = data.beacon_location,
      id = data.id,
      id_name = data.id_name,
      can_teleport = data.can_teleport,
      _data$goal = data.goal,
      goal = _data$goal === void 0 ? 0 : _data$goal,
      _data$prisoner = data.prisoner,
      prisoner = _data$prisoner === void 0 ? {} : _data$prisoner;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 295,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Teleporter Console",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": teleporter_state_open ? 'Open' : 'Closed',
          "disabled": teleporter_lock,
          "selected": teleporter_state_open,
          "onClick": function () {
            function onClick() {
              return act('toggle_open');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": teleporter_lock ? 'lock' : 'unlock',
          "content": teleporter_lock ? 'Locked' : 'Unlocked',
          "selected": teleporter_lock,
          "disabled": teleporter_state_open,
          "onClick": function () {
            function onClick() {
              return act('teleporter_lock');
            }

            return onClick;
          }()
        })], 4),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Teleporter Unit",
            "color": teleporter ? 'good' : 'bad',
            "buttons": !teleporter && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Reconnect",
              "onClick": function () {
                function onClick() {
                  return act('scan_teleporter');
                }

                return onClick;
              }()
            }),
            children: teleporter ? teleporter_location : 'Not Connected'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Receiver Beacon",
            "color": beacon ? 'good' : 'bad',
            "buttons": !beacon && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Reconnect",
              "onClick": function () {
                function onClick() {
                  return act('scan_beacon');
                }

                return onClick;
              }()
            }),
            children: beacon ? beacon_location : 'Not Connected'
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Prisoner Details",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Prisoner ID",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "content": id ? id_name : 'No ID',
              "onClick": function () {
                function onClick() {
                  return act('handle_id');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Point Goal",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": goal,
              "width": "48px",
              "minValue": 1,
              "maxValue": 1000,
              "onChange": function () {
                function onChange(e, value) {
                  return act('set_goal', {
                    value: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Occupant",
            children: prisoner.name || 'No Occupant'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Criminal Status",
            children: prisoner.crimstat || 'No Status'
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "content": "Process Prisoner",
        "disabled": !can_teleport,
        "textAlign": "center",
        "color": "bad",
        "onClick": function () {
          function onClick() {
            return act('teleport');
          }

          return onClick;
        }()
      })]
    })
  });
};

exports.GulagTeleporterConsole = GulagTeleporterConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/Holodeck.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/Holodeck.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Holodeck = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Holodeck = function Holodeck(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var can_toggle_safety = data.can_toggle_safety,
      _data$default_program = data.default_programs,
      default_programs = _data$default_program === void 0 ? [] : _data$default_program,
      _data$emag_programs = data.emag_programs,
      emag_programs = _data$emag_programs === void 0 ? [] : _data$emag_programs,
      emagged = data.emagged,
      program = data.program;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Default Programs",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": emagged ? "unlock" : "lock",
          "content": "Safeties",
          "color": "bad",
          "disabled": !can_toggle_safety,
          "selected": !emagged,
          "onClick": function () {
            function onClick() {
              return act('safety');
            }

            return onClick;
          }()
        }),
        children: default_programs.map(function (def_program) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "content": def_program.name.substring(11),
            "textAlign": "center",
            "selected": def_program.type === program,
            "onClick": function () {
              function onClick() {
                return act('load_program', {
                  type: def_program.type
                });
              }

              return onClick;
            }()
          }, def_program.type);
        })
      }), !!emagged && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Dangerous Programs",
        children: emag_programs.map(function (emag_program) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "content": emag_program.name.substring(11),
            "color": "bad",
            "textAlign": "center",
            "selected": emag_program.type === program,
            "onClick": function () {
              function onClick() {
                return act('load_program', {
                  type: emag_program.type
                });
              }

              return onClick;
            }()
          }, emag_program.type);
        })
      })]
    })
  });
};

exports.Holodeck = Holodeck;

/***/ }),

/***/ "./packages/tgui/interfaces/Holopad.js":
/*!*********************************************!*\
  !*** ./packages/tgui/interfaces/Holopad.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Holopad = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Holopad = function Holopad(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var calling = data.calling;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 440,
    "height": 245,
    "resizable": true,
    children: [!!calling && (0, _inferno.createComponentVNode)(2, _components.Modal, {
      "fontSize": "36px",
      "fontFamily": "monospace",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
        "align": "center",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mr": 2,
          "mt": 2,
          children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
            "name": "phone-alt",
            "rotation": 25
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mr": 2,
          children: 'Dialing...'
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Box, {
        "mt": 2,
        "textAlign": "center",
        "fontSize": "24px",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "lineHeight": "40px",
          "icon": "times",
          "content": "Hang Up",
          "color": "bad",
          "onClick": function () {
            function onClick() {
              return act('hang_up');
            }

            return onClick;
          }()
        })
      })]
    }), (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, HolopadContent)
    })]
  });
};

exports.Holopad = Holopad;

var HolopadContent = function HolopadContent(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var on_network = data.on_network,
      on_cooldown = data.on_cooldown,
      allowed = data.allowed,
      disk = data.disk,
      disk_record = data.disk_record,
      replay_mode = data.replay_mode,
      loop_mode = data.loop_mode,
      record_mode = data.record_mode,
      _data$holo_calls = data.holo_calls,
      holo_calls = _data$holo_calls === void 0 ? [] : _data$holo_calls;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Holopad",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "bell",
      "content": on_cooldown ? "AI Presence Requested" : "Request AI Presence",
      "disabled": !on_network || on_cooldown,
      "onClick": function () {
        function onClick() {
          return act('AIrequest');
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Communicator",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "phone-alt",
          "content": allowed ? "Connect To Holopad" : "Call Holopad",
          "disabled": !on_network,
          "onClick": function () {
            function onClick() {
              return act('holocall', {
                headcall: allowed
              });
            }

            return onClick;
          }()
        })
      }), holo_calls.map(function (call) {
        return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": call.connected ? "Current Call" : "Incoming Call",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": call.connected ? 'phone-slash' : 'phone-alt',
            "content": call.connected ? "Disconnect call from " + call.caller : "Answer call from " + call.caller,
            "color": call.connected ? 'bad' : 'good',
            "disabled": !on_network,
            "onClick": function () {
              function onClick() {
                return act(call.connected ? 'disconnectcall' : 'connectcall', {
                  holopad: call.ref
                });
              }

              return onClick;
            }()
          })
        }, call.ref);
      })]
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Holodisk",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "content": "Eject",
      "disabled": !disk || replay_mode || record_mode,
      "onClick": function () {
        function onClick() {
          return act('disk_eject');
        }

        return onClick;
      }()
    }),
    children: !disk && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No holodisk"
    }) || (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Disk Player",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": replay_mode ? 'pause' : 'play',
          "content": replay_mode ? 'Stop' : 'Replay',
          "selected": replay_mode,
          "disabled": record_mode || !disk_record,
          "onClick": function () {
            function onClick() {
              return act('replay_mode');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": 'sync',
          "content": loop_mode ? 'Looping' : 'Loop',
          "selected": loop_mode,
          "disabled": record_mode || !disk_record,
          "onClick": function () {
            function onClick() {
              return act('loop_mode');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "exchange-alt",
          "content": "Change Offset",
          "disabled": !replay_mode,
          "onClick": function () {
            function onClick() {
              return act('offset');
            }

            return onClick;
          }()
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Recorder",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": record_mode ? 'pause' : 'video',
          "content": record_mode ? 'End Recording' : 'Record',
          "selected": record_mode,
          "disabled": disk_record && !record_mode || replay_mode,
          "onClick": function () {
            function onClick() {
              return act('record_mode');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "trash",
          "content": "Clear Recording",
          "color": "bad",
          "disabled": !disk_record || replay_mode || record_mode,
          "onClick": function () {
            function onClick() {
              return act('record_clear');
            }

            return onClick;
          }()
        })]
      })]
    })
  })], 4);
};

/***/ }),

/***/ "./packages/tgui/interfaces/HypnoChair.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/HypnoChair.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.HypnoChair = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var HypnoChair = function HypnoChair(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 375,
    "height": 480,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Information",
        "backgroundColor": "#450F44",
        children: "The Enhanced Interrogation Chamber is designed to induce a deep-rooted trance trigger into the subject. Once the procedure is complete, by using the implanted trigger phrase, the authorities are able to ensure immediate and complete obedience and truthfulness."
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Occupant Information",
        "textAlign": "center",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Name",
            children: data.occupant.name ? data.occupant.name : 'No Occupant'
          }), !!data.occupied && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            "color": data.occupant.stat === 0 ? 'good' : data.occupant.stat === 1 ? 'average' : 'bad',
            children: data.occupant.stat === 0 ? 'Conscious' : data.occupant.stat === 1 ? 'Unconcious' : 'Dead'
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Operations",
        "textAlign": "center",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Door",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.open ? 'unlock' : 'lock',
              "color": data.open ? 'default' : 'red',
              "content": data.open ? 'Open' : 'Closed',
              "onClick": function () {
                function onClick() {
                  return act('door');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Trigger Phrase",
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "value": data.trigger,
              "onChange": function () {
                function onChange(e, value) {
                  return act('set_phrase', {
                    phrase: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Interrogate Occupant",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "code-branch",
              "content": data.interrogating ? "Interrupt Interrogation" : 'Begin Enhanced Interrogation',
              "onClick": function () {
                function onClick() {
                  return act('interrogate');
                }

                return onClick;
              }()
            }), data.interrogating === 1 && (0, _inferno.createComponentVNode)(2, _components.Icon, {
              "name": "cog",
              "color": "orange",
              "spin": true
            })]
          })]
        })
      })]
    })
  });
};

exports.HypnoChair = HypnoChair;

/***/ }),

/***/ "./packages/tgui/interfaces/ImplantChair.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/ImplantChair.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ImplantChair = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ImplantChair = function ImplantChair(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 375,
    "height": 280,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Occupant Information",
        "textAlign": "center",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Name",
            children: data.occupant.name || 'No Occupant'
          }), !!data.occupied && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            "color": data.occupant.stat === 0 ? 'good' : data.occupant.stat === 1 ? 'average' : 'bad',
            children: data.occupant.stat === 0 ? 'Conscious' : data.occupant.stat === 1 ? 'Unconcious' : 'Dead'
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Operations",
        "textAlign": "center",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Door",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.open ? 'unlock' : 'lock',
              "color": data.open ? 'default' : 'red',
              "content": data.open ? 'Open' : 'Closed',
              "onClick": function () {
                function onClick() {
                  return act('door');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Implant Occupant",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "code-branch",
              "content": data.ready ? data.special_name || 'Implant' : 'Recharging',
              "onClick": function () {
                function onClick() {
                  return act('implant');
                }

                return onClick;
              }()
            }), data.ready === 0 && (0, _inferno.createComponentVNode)(2, _components.Icon, {
              "name": "cog",
              "color": "orange",
              "spin": true
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Implants Remaining",
            children: [data.ready_implants, data.replenishing === 1 && (0, _inferno.createComponentVNode)(2, _components.Icon, {
              "name": "sync",
              "color": "red",
              "spin": true
            })]
          })]
        })
      })]
    })
  });
};

exports.ImplantChair = ImplantChair;

/***/ }),

/***/ "./packages/tgui/interfaces/InfraredEmitter.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/InfraredEmitter.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.InfraredEmitter = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var InfraredEmitter = function InfraredEmitter(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var on = data.on,
      visible = data.visible;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 225,
    "height": 110,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": on ? 'power-off' : 'times',
              "content": on ? 'On' : 'Off',
              "selected": on,
              "onClick": function () {
                function onClick() {
                  return act('power');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Visibility",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": visible ? 'eye' : 'eye-slash',
              "content": visible ? 'Visible' : 'Invisible',
              "selected": visible,
              "onClick": function () {
                function onClick() {
                  return act('visibility');
                }

                return onClick;
              }()
            })
          })]
        })
      })
    })
  });
};

exports.InfraredEmitter = InfraredEmitter;

/***/ }),

/***/ "./packages/tgui/interfaces/Intellicard.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/Intellicard.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Intellicard = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Intellicard = function Intellicard(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var name = data.name,
      isDead = data.isDead,
      isBraindead = data.isBraindead,
      health = data.health,
      wireless = data.wireless,
      radio = data.radio,
      wiping = data.wiping,
      _data$laws = data.laws,
      laws = _data$laws === void 0 ? [] : _data$laws;
  var offline = isDead || isBraindead;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": name || "Empty Card",
        "buttons": !!name && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "trash",
          "content": wiping ? 'Stop Wiping' : 'Wipe',
          "disabled": isDead,
          "onClick": function () {
            function onClick() {
              return act('wipe');
            }

            return onClick;
          }()
        }),
        children: !!name && (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            "color": offline ? 'bad' : 'good',
            children: offline ? 'Offline' : 'Operation'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Software Integrity",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": health,
              "minValue": 0,
              "maxValue": 100,
              "ranges": {
                good: [70, Infinity],
                average: [50, 70],
                bad: [-Infinity, 50]
              }
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Settings",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "signal",
              "content": "Wireless Activity",
              "selected": wireless,
              "onClick": function () {
                function onClick() {
                  return act('wireless');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "microphone",
              "content": "Subspace Radio",
              "selected": radio,
              "onClick": function () {
                function onClick() {
                  return act('radio');
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Laws",
            children: laws.map(function (law) {
              return (0, _inferno.createComponentVNode)(2, _components.BlockQuote, {
                children: law
              }, law);
            })
          })]
        })
      })
    })
  });
};

exports.Intellicard = Intellicard;

/***/ }),

/***/ "./packages/tgui/interfaces/Jukebox.js":
/*!*********************************************!*\
  !*** ./packages/tgui/interfaces/Jukebox.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Jukebox = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Jukebox = function Jukebox(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var active = data.active,
      track_selected = data.track_selected,
      track_length = data.track_length,
      track_beat = data.track_beat,
      volume = data.volume;
  var songs = (0, _fp.flow)([(0, _collections.sortBy)(function (song) {
    return song.name;
  })])(data.songs || []);
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 370,
    "height": 313,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Song Player",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": active ? 'pause' : 'play',
          "content": active ? 'Stop' : 'Play',
          "selected": active,
          "onClick": function () {
            function onClick() {
              return act('toggle');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Track Selected",
            children: (0, _inferno.createComponentVNode)(2, _components.Dropdown, {
              "overflow-y": "scroll",
              "width": "240px",
              "options": songs.map(function (song) {
                return song.name;
              }),
              "disabled": active,
              "selected": track_selected || "Select a Track",
              "onSelected": function () {
                function onSelected(value) {
                  return act('select_track', {
                    track: value
                  });
                }

                return onSelected;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Track Length",
            children: track_selected ? track_length : "No Track Selected"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Track Beat",
            children: [track_selected ? track_beat : "No Track Selected", track_beat === 1 ? " beat" : " beats"]
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Machine Settings",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledControls, {
          "justify": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledControls.Item, {
            "label": "Volume",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "position": "relative",
              children: [(0, _inferno.createComponentVNode)(2, _components.Knob, {
                "size": 3.2,
                "color": volume >= 50 ? 'red' : 'green',
                "value": volume,
                "unit": "%",
                "minValue": 0,
                "maxValue": 100,
                "step": 1,
                "stepPixelSize": 1,
                "disabled": active,
                "onDrag": function () {
                  function onDrag(e, value) {
                    return act('set_volume', {
                      volume: value
                    });
                  }

                  return onDrag;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "position": "absolute",
                "top": "-2px",
                "right": "-22px",
                "color": "transparent",
                "icon": "fast-backward",
                "onClick": function () {
                  function onClick() {
                    return act('set_volume', {
                      volume: "min"
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "position": "absolute",
                "top": "16px",
                "right": "-22px",
                "color": "transparent",
                "icon": "fast-forward",
                "onClick": function () {
                  function onClick() {
                    return act('set_volume', {
                      volume: "max"
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "position": "absolute",
                "top": "34px",
                "right": "-22px",
                "color": "transparent",
                "icon": "undo",
                "onClick": function () {
                  function onClick() {
                    return act('set_volume', {
                      volume: "reset"
                    });
                  }

                  return onClick;
                }()
              })]
            })
          })
        })
      })]
    })
  });
};

exports.Jukebox = Jukebox;

/***/ }),

/***/ "./packages/tgui/interfaces/KeycardAuth.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/KeycardAuth.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.KeycardAuth = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var KeycardAuth = function KeycardAuth(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 375,
    "height": 125,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          children: data.waiting === 1 && (0, _inferno.createVNode)(1, "span", null, "Waiting for another device to confirm your request...", 16)
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: data.waiting === 0 && (0, _inferno.createFragment)([!!data.auth_required && (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "check-square",
            "color": "red",
            "textAlign": "center",
            "lineHeight": "60px",
            "fluid": true,
            "onClick": function () {
              function onClick() {
                return act('auth_swipe');
              }

              return onClick;
            }(),
            "content": "Authorize"
          }), data.auth_required === 0 && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "exclamation-triangle",
            "fluid": true,
            "onClick": function () {
              function onClick() {
                return act('red_alert');
              }

              return onClick;
            }(),
            "content": "Red Alert"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "wrench",
            "fluid": true,
            "onClick": function () {
              function onClick() {
                return act('emergency_maint');
              }

              return onClick;
            }(),
            "content": "Emergency Maintenance Access"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "meteor",
            "fluid": true,
            "onClick": function () {
              function onClick() {
                return act('bsa_unlock');
              }

              return onClick;
            }(),
            "content": "Bluespace Artillery Unlock"
          })], 4)], 0)
        })]
      })
    })
  });
};

exports.KeycardAuth = KeycardAuth;

/***/ }),

/***/ "./packages/tgui/interfaces/LaborClaimConsole.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/LaborClaimConsole.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.LaborClaimConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var LaborClaimConsole = function LaborClaimConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var can_go_home = data.can_go_home,
      id_points = data.id_points,
      ores = data.ores,
      status_info = data.status_info,
      unclaimed_points = data.unclaimed_points;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 315,
    "height": 440,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            children: status_info
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Shuttle controls",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Move shuttle",
              "disabled": !can_go_home,
              "onClick": function () {
                function onClick() {
                  return act('move_shuttle');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Points",
            children: id_points
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Unclaimed points",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Claim points",
              "disabled": !unclaimed_points,
              "onClick": function () {
                function onClick() {
                  return act('claim_points');
                }

                return onClick;
              }()
            }),
            children: unclaimed_points
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Material values",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            "header": true,
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Material"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "collapsing": true,
              "textAlign": "right",
              children: "Value"
            })]
          }), ores.map(function (ore) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: (0, _string.toTitleCase)(ore.ore)
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                "textAlign": "right",
                children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                  "color": "label",
                  "inline": true,
                  children: ore.value
                })
              })]
            }, ore.ore);
          })]
        })
      })]
    })
  });
};

exports.LaborClaimConsole = LaborClaimConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/LanguageMenu.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/LanguageMenu.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.LanguageMenu = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var LanguageMenu = function LanguageMenu(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var admin_mode = data.admin_mode,
      is_living = data.is_living,
      omnitongue = data.omnitongue,
      _data$languages = data.languages,
      languages = _data$languages === void 0 ? [] : _data$languages,
      _data$unknown_languag = data.unknown_languages,
      unknown_languages = _data$unknown_languag === void 0 ? [] : _data$unknown_languag;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Language Menu",
    "width": 700,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Known Languages",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: languages.map(function (language) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": language.name,
              "buttons": (0, _inferno.createFragment)([!!is_living && (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": language.is_default ? 'Default Language' : 'Select as Default',
                "disabled": !language.can_speak,
                "selected": language.is_default,
                "onClick": function () {
                  function onClick() {
                    return act('select_default', {
                      language_name: language.name
                    });
                  }

                  return onClick;
                }()
              }), !!admin_mode && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": "Grant",
                "onClick": function () {
                  function onClick() {
                    return act('grant_language', {
                      language_name: language.name
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": "Remove",
                "onClick": function () {
                  function onClick() {
                    return act('remove_language', {
                      language_name: language.name
                    });
                  }

                  return onClick;
                }()
              })], 4)], 0),
              children: [language.desc, ' ', "Key: ,", language.key, ' ', language.can_understand ? 'Can understand.' : 'Cannot understand.', ' ', language.can_speak ? 'Can speak.' : 'Cannot speak.']
            }, language.name);
          })
        })
      }), !!admin_mode && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Unknown Languages",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": 'Omnitongue ' + (omnitongue ? 'Enabled' : 'Disabled'),
          "selected": omnitongue,
          "onClick": function () {
            function onClick() {
              return act('toggle_omnitongue');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: unknown_languages.map(function (language) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": language.name,
              "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": "Grant",
                "onClick": function () {
                  function onClick() {
                    return act('grant_language', {
                      language_name: language.name
                    });
                  }

                  return onClick;
                }()
              }),
              children: [language.desc, ' ', "Key: ,", language.key, ' ', !!language.shadow && '(gained from mob)', ' ', language.can_speak ? 'Can speak.' : 'Cannot speak.']
            }, language.name);
          })
        })
      })]
    })
  });
};

exports.LanguageMenu = LanguageMenu;

/***/ }),

/***/ "./packages/tgui/interfaces/LaunchpadConsole.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/LaunchpadConsole.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.LaunchpadConsole = exports.LaunchpadControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var LaunchpadButtonPad = function LaunchpadButtonPad(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act;

  return (0, _inferno.createComponentVNode)(2, _components.Grid, {
    "width": "1px",
    children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "arrow-left",
        "iconRotation": 45,
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('move_pos', {
              x: -1,
              y: 1
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "arrow-left",
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('move_pos', {
              x: -1
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "arrow-down",
        "iconRotation": 45,
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('move_pos', {
              x: -1,
              y: -1
            });
          }

          return onClick;
        }()
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "arrow-up",
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('move_pos', {
              y: 1
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "content": "R",
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('set_pos', {
              x: 0,
              y: 0
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "arrow-down",
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('move_pos', {
              y: -1
            });
          }

          return onClick;
        }()
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "arrow-up",
        "iconRotation": 45,
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('move_pos', {
              x: 1,
              y: 1
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "arrow-right",
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('move_pos', {
              x: 1
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "arrow-right",
        "iconRotation": 45,
        "mb": 1,
        "onClick": function () {
          function onClick() {
            return act('move_pos', {
              x: 1,
              y: -1
            });
          }

          return onClick;
        }()
      })]
    })]
  });
};

var LaunchpadControl = function LaunchpadControl(props, context) {
  var topLevel = props.topLevel;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var x = data.x,
      y = data.y,
      pad_name = data.pad_name,
      range = data.range;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": (0, _inferno.createComponentVNode)(2, _components.Input, {
      "value": pad_name,
      "width": "170px",
      "onChange": function () {
        function onChange(e, value) {
          return act('rename', {
            name: value
          });
        }

        return onChange;
      }()
    }),
    "level": topLevel ? 1 : 2,
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "times",
      "content": "Remove",
      "color": "bad",
      "onClick": function () {
        function onClick() {
          return act('remove');
        }

        return onClick;
      }()
    }),
    children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Controls",
          "level": 2,
          children: (0, _inferno.createComponentVNode)(2, LaunchpadButtonPad)
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Target",
          "level": 2,
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "fontSize": "26px",
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "mb": 1,
              children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
                "inline": true,
                "bold": true,
                "mr": 1,
                children: "X:"
              }), (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
                "value": x,
                "minValue": -range,
                "maxValue": range,
                "lineHeight": "30px",
                "fontSize": "26px",
                "width": "90px",
                "height": "30px",
                "stepPixelSize": 10,
                "onChange": function () {
                  function onChange(e, value) {
                    return act('set_pos', {
                      x: value
                    });
                  }

                  return onChange;
                }()
              })]
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
                "inline": true,
                "bold": true,
                "mr": 1,
                children: "Y:"
              }), (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
                "value": y,
                "minValue": -range,
                "maxValue": range,
                "stepPixelSize": 10,
                "lineHeight": "30px",
                "fontSize": "26px",
                "width": "90px",
                "height": "30px",
                "onChange": function () {
                  function onChange(e, value) {
                    return act('set_pos', {
                      y: value
                    });
                  }

                  return onChange;
                }()
              })]
            })]
          })
        })
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "icon": "upload",
          "content": "Launch",
          "textAlign": "center",
          "onClick": function () {
            function onClick() {
              return act('launch');
            }

            return onClick;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "icon": "download",
          "content": "Pull",
          "textAlign": "center",
          "onClick": function () {
            function onClick() {
              return act('pull');
            }

            return onClick;
          }()
        })
      })]
    })]
  });
};

exports.LaunchpadControl = LaunchpadControl;

var LaunchpadConsole = function LaunchpadConsole(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var _data$launchpads = data.launchpads,
      launchpads = _data$launchpads === void 0 ? [] : _data$launchpads,
      selected_id = data.selected_id;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 475,
    "height": 260,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: launchpads.length === 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No Pads Connected"
      }) || (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "minHeight": "190px",
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "width": "140px",
            "minHeight": "190px",
            children: launchpads.map(function (launchpad) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "ellipsis": true,
                "content": launchpad.name,
                "selected": selected_id === launchpad.id,
                "color": "transparent",
                "onClick": function () {
                  function onClick() {
                    return act('select_pad', {
                      id: launchpad.id
                    });
                  }

                  return onClick;
                }()
              }, launchpad.name);
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "minHeight": "100%",
            children: (0, _inferno.createComponentVNode)(2, _components.Divider, {
              "vertical": true
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            "basis": 0,
            "minHeight": "100%",
            children: selected_id && (0, _inferno.createComponentVNode)(2, LaunchpadControl) || (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: "Please select a pad"
            })
          })]
        })
      })
    })
  });
};

exports.LaunchpadConsole = LaunchpadConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/LaunchpadRemote.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/LaunchpadRemote.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.LaunchpadRemote = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _LaunchpadConsole = __webpack_require__(/*! ./LaunchpadConsole */ "./packages/tgui/interfaces/LaunchpadConsole.js");

var LaunchpadRemote = function LaunchpadRemote(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var has_pad = data.has_pad,
      pad_closed = data.pad_closed;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Briefcase Launchpad Remote",
    "width": 300,
    "height": 240,
    "theme": "syndicate",
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: !has_pad && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No Launchpad Connected"
      }) || pad_closed && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "Launchpad Closed"
      }) || (0, _inferno.createComponentVNode)(2, _LaunchpadConsole.LaunchpadControl, {
        "topLevel": true
      })
    })
  });
};

exports.LaunchpadRemote = LaunchpadRemote;

/***/ }),

/***/ "./packages/tgui/interfaces/MafiaPanel.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/MafiaPanel.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.MafiaPanel = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var MafiaPanel = function MafiaPanel(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var lobbydata = data.lobbydata,
      players = data.players,
      actions = data.actions,
      phase = data.phase,
      roleinfo = data.roleinfo,
      role_theme = data.role_theme,
      admin_controls = data.admin_controls,
      judgement_phase = data.judgement_phase,
      timeleft = data.timeleft,
      all_roles = data.all_roles;
  var playerAddedHeight = roleinfo ? players.length * 30 : 7;
  var readyGhosts = lobbydata ? lobbydata.filter(function (player) {
    return player.status === "Ready";
  }) : null;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Mafia",
    "theme": role_theme,
    "width": 650,
    "height": 293 + playerAddedHeight,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": admin_controls,
      children: [!roleinfo && (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "scrollable": true,
        "overflowY": "scroll",
        "direction": "column",
        "height": "100%",
        "grow": 1,
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Lobby",
          "mb": 1,
          "buttons": (0, _inferno.createComponentVNode)(2, LobbyDisplay, {
            "phase": phase,
            "timeleft": timeleft,
            "admin_controls": admin_controls
          }),
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "textAlign": "center",
            children: [(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
              "info": true,
              children: ["The lobby currently has ", readyGhosts.length, "/12 valid players signed up."]
            }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
              "direction": "column",
              children: !!lobbydata && lobbydata.map(function (lobbyist) {
                return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                  "basis": 2,
                  "className": "Section__title candystripe",
                  children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
                    "height": 2,
                    "align": "center",
                    "justify": "space-between",
                    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                      "basis": 0,
                      children: lobbyist.name
                    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                      children: "STATUS:"
                    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                      "width": "30%",
                      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
                        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                          "color": lobbyist.status === "Ready" ? "green" : "red",
                          "textAlign": "center",
                          children: [lobbyist.status, " ", lobbyist.spectating]
                        })
                      })
                    })]
                  })
                }, lobbyist);
              })
            })]
          })
        })
      }), !!roleinfo && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": phase,
        "minHeight": "100px",
        "maxHeight": "50px",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: [!!admin_controls && (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "red",
            "icon": "gavel",
            "tooltipPosition": "bottom-left",
            "tooltip": "Hello admin! If it is the admin controls you seek,\nplease notice the extra scrollbar you have that players\ndo not!"
          }), " ", (0, _inferno.createComponentVNode)(2, _components.TimeDisplay, {
            "auto": "down",
            "value": timeleft
          })]
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "justify": "space-between",
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "align": "center",
            "textAlign": "center",
            "maxWidth": "500px",
            children: [(0, _inferno.createVNode)(1, "b", null, [(0, _inferno.createTextVNode)("You are the "), roleinfo.role], 0), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "b", null, roleinfo.desc, 0)]
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "className": (0, _react.classes)(['mafia32x32', roleinfo.revealed_icon]),
              "style": {
                'transform': 'scale(2) translate(0px, 10%)',
                'vertical-align': 'middle'
              }
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "className": (0, _react.classes)(['mafia32x32', roleinfo.hud_icon]),
              "style": {
                'transform': 'scale(2) translate(-5px, -5px)',
                'vertical-align': 'middle'
              }
            })]
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
        children: !!actions && actions.map(function (action) {
          return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "onClick": function () {
                function onClick() {
                  return act("mf_action", {
                    atype: action
                  });
                }

                return onClick;
              }(),
              children: action
            })
          }, action);
        })
      }), !!roleinfo && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Judgement",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "color": "transparent",
          "icon": "info",
          "tooltipPosition": "left",
          "tooltip": "When someone is on trial, you are in charge of their fate.\nInnocent winning means the person on trial can live to see\nanother day... and in losing they do not. You can go back\nto abstaining with the middle button if you reconsider."
        }),
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
          "justify": "space-around",
          children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "smile-beam",
            "content": "INNOCENT!",
            "color": "good",
            "disabled": !judgement_phase,
            "onClick": function () {
              function onClick() {
                return act("vote_innocent");
              }

              return onClick;
            }()
          }), !judgement_phase && (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: "There is nobody on trial at the moment."
          }), !!judgement_phase && (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: "It is now time to vote, vote the accused innocent or guilty!"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "angry",
            "content": "GUILTY!",
            "color": "bad",
            "disabled": !judgement_phase,
            "onClick": function () {
              function onClick() {
                return act("vote_guilty");
              }

              return onClick;
            }()
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "justify": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "meh",
            "content": "Abstain",
            "color": "white",
            "disabled": !judgement_phase,
            "onClick": function () {
              function onClick() {
                return act("vote_abstain");
              }

              return onClick;
            }()
          })
        })]
      }), phase !== "No Game" && (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "spacing": 1,
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 2,
          children: (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": "Players",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "color": "transparent",
              "icon": "info",
              "tooltip": "This is the list of all the players in\nthe game, during the day phase you may vote on them and,\ndepending on your role, select players\nat certain phases to use your ability."
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
              "direction": "column",
              children: !!players && players.map(function (player) {
                return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                  "height": "30px",
                  "className": "Section__title candystripe",
                  children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
                    "height": "18px",
                    "justify": "space-between",
                    "align": "center",
                    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                      "basis": 16,
                      children: [!!player.alive && (0, _inferno.createComponentVNode)(2, _components.Box, {
                        children: player.name
                      }), !player.alive && (0, _inferno.createComponentVNode)(2, _components.Box, {
                        "color": "red",
                        children: player.name
                      })]
                    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                      children: !player.alive && (0, _inferno.createComponentVNode)(2, _components.Box, {
                        "color": "red",
                        children: "DEAD"
                      })
                    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                      children: player.votes !== undefined && !!player.alive && (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("Votes : "), player.votes, (0, _inferno.createTextVNode)(" ")], 0)
                    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                      "grow": 1
                    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                      children: !!player.actions && player.actions.map(function (action) {
                        return (0, _inferno.createComponentVNode)(2, _components.Button, {
                          "onClick": function () {
                            function onClick() {
                              return act('mf_targ_action', {
                                atype: action,
                                target: player.ref
                              });
                            }

                            return onClick;
                          }(),
                          children: action
                        }, action);
                      })
                    })]
                  })
                }, player.ref);
              })
            })
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 2,
          children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
            "direction": "column",
            "height": "100%",
            children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
              "title": "Roles and Notes",
              "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
                "color": "transparent",
                "icon": "address-book",
                "tooltipPosition": "bottom-left",
                "tooltip": "The top section is the roles in the game. You can\npress the question mark to get a quick blurb\nabout the role itself."
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "color": "transparent",
                "icon": "edit",
                "tooltipPosition": "bottom-left",
                "tooltip": "The bottom section are your notes. on some roles this\nwill just be an empty box, but on others it records the\nactions of your abilities (so for example, your\ndetective work revealing a changeling)."
              })], 4),
              children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
                "direction": "column",
                children: !!all_roles && all_roles.map(function (r) {
                  return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                    "height": "30px",
                    "className": "Section__title candystripe",
                    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
                      "height": "18px",
                      "align": "center",
                      "justify": "space-between",
                      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                        children: r
                      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                        "textAlign": "right",
                        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                          "color": "transparent",
                          "icon": "question",
                          "onClick": function () {
                            function onClick() {
                              return act("mf_lookup", {
                                atype: r.slice(0, -3)
                              });
                            }

                            return onClick;
                          }()
                        })
                      })]
                    })
                  }, r);
                })
              })
            }), !!roleinfo && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
              "height": 0,
              "grow": 1,
              children: (0, _inferno.createComponentVNode)(2, _components.Section, {
                "scrollable": true,
                "fill": true,
                "overflowY": "scroll",
                children: roleinfo !== undefined && !!roleinfo.action_log && roleinfo.action_log.map(function (log_line) {
                  return (0, _inferno.createComponentVNode)(2, _components.Box, {
                    children: log_line
                  }, log_line);
                })
              })
            })]
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "mt": 1,
        "direction": "column",
        children: (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: !!admin_controls && (0, _inferno.createComponentVNode)(2, _components.Section, {
            "textAlign": "center",
            children: (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
              "title": "ADMIN CONTROLS",
              "color": "red",
              children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "exclamation-triangle",
                "color": "black",
                "tooltipPosition": "top",
                "tooltip": "Almost all of these are all built to help me debug\nthe game (ow, debugging a 12 player game!) So they are\nrudamentary and prone to breaking at the drop of a hat.\nMake sure you know what you're doing when you press one.\nAlso because an admin did it: do not gib/delete/dust\nanyone! It will runtime the game to death!",
                "content": "A Kind, Coder Warning",
                "onClick": function () {
                  function onClick() {
                    return act("next_phase");
                  }

                  return onClick;
                }()
              }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "arrow-right",
                "tooltipPosition": "top",
                "tooltip": "This will advance the game to the next phase\n(day talk > day voting, day voting > night/trial)\npretty fun to just spam this and freak people out,\ntry that roundend!",
                "content": "Next Phase",
                "onClick": function () {
                  function onClick() {
                    return act("next_phase");
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "home",
                "tooltipPosition": "top",
                "tooltip": "Hopefully you won't use this button\noften, it's a safety net just in case\nmafia players somehow escape (nullspace\nredirects to the error room then station)\nEither way, VERY BAD IF THAT HAPPENS as\ngodmoded assistants will run free. Use\nthis to recollect them then make a bug report.",
                "content": "Send All Players Home",
                "onClick": function () {
                  function onClick() {
                    return act("players_home");
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "sync-alt",
                "tooltipPosition": "top",
                "tooltip": "This immediately ends the game, and attempts to start\nanother. Nothing will happen if another\ngame fails to start!",
                "content": "New Game",
                "onClick": function () {
                  function onClick() {
                    return act("new_game");
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "skull",
                "tooltipPosition": "top",
                "tooltip": "Deletes the datum, clears all landmarks, makes mafia\nas it was roundstart: nonexistant. Use this if you\nreally mess things up. You did mess things up, didn't you.",
                "content": "Nuke",
                "onClick": function () {
                  function onClick() {
                    return act("nuke");
                  }

                  return onClick;
                }()
              }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "paint-brush",
                "tooltipPosition": "top",
                "tooltip": "This is the custom game creator, it is... simple.\nYou put in roles and until you press CANCEL or FINISH\nit will keep letting you add more roles. Assitants\non the bottom because of pathing stuff. Resets after\nthe round finishes back to 12 player random setups.",
                "content": "Create Custom Setup",
                "onClick": function () {
                  function onClick() {
                    return act("debug_setup");
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "paint-roller",
                "tooltipPosition": "top",
                "tooltip": "If you messed up and accidently didn't make it how\nyou wanted, simply just press this to reset it. The game\nwill auto reset after each game as well.",
                "content": "Reset Custom Setup",
                "onClick": function () {
                  function onClick() {
                    return act("cancel_setup");
                  }

                  return onClick;
                }()
              })]
            })
          })
        })
      })]
    })
  });
};

exports.MafiaPanel = MafiaPanel;

var LobbyDisplay = function LobbyDisplay(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var phase = data.phase,
      timeleft = data.timeleft,
      admin_controls = data.admin_controls;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    children: ["[Phase = ", phase, " | ", (0, _inferno.createComponentVNode)(2, _components.TimeDisplay, {
      "auto": "down",
      "value": timeleft
    }), "]", ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "clipboard-check",
      "tooltipPosition": "bottom-left",
      "tooltip": "Signs you up for the next game. If there\nis an ongoing one, you will be signed up\nfor the next.",
      "content": "Sign Up",
      "onClick": function () {
        function onClick() {
          return act("mf_signup");
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eye",
      "tooltipPosition": "bottom-left",
      "tooltip": "Spectates games until you turn it off.\nAutomatically enabled when you die in game,\nbecause I assumed you would want to see the\nconclusion. You won't get messages if you\nrejoin SS13.",
      "content": "Spectate",
      "onClick": function () {
        function onClick() {
          return act("mf_spectate");
        }

        return onClick;
      }()
    }), !!admin_controls && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "color": "red",
      "icon": "gavel",
      "tooltipPosition": "bottom-left",
      "tooltip": "Hello admin! If it is the admin controls you seek,\nplease notice the scrollbar you have that players\ndo not!"
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/MalfunctionModulePicker.js":
/*!*************************************************************!*\
  !*** ./packages/tgui/interfaces/MalfunctionModulePicker.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.MalfunctionModulePicker = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _Uplink = __webpack_require__(/*! ./Uplink */ "./packages/tgui/interfaces/Uplink.js");

var MalfunctionModulePicker = function MalfunctionModulePicker(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var processingTime = data.processingTime;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 620,
    "height": 525,
    "theme": "malfunction",
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _Uplink.GenericUplink, {
        "currencyAmount": processingTime,
        "currencySymbol": "PT"
      })
    })
  });
};

exports.MalfunctionModulePicker = MalfunctionModulePicker;

/***/ }),

/***/ "./packages/tgui/interfaces/MechBayPowerConsole.js":
/*!*********************************************************!*\
  !*** ./packages/tgui/interfaces/MechBayPowerConsole.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.MechBayPowerConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var MechBayPowerConsole = function MechBayPowerConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var recharge_port = data.recharge_port;
  var mech = recharge_port && recharge_port.mech;
  var cell = mech && mech.cell;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 200,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Mech status",
        "textAlign": "center",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "sync",
          "content": "Sync",
          "onClick": function () {
            function onClick() {
              return act('reconnect');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Integrity",
            children: !recharge_port && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
              children: "No power port detected. Please re-sync."
            }) || !mech && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
              children: "No mech detected."
            }) || (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": mech.health / mech.maxhealth,
              "ranges": {
                good: [0.7, Infinity],
                average: [0.3, 0.7],
                bad: [-Infinity, 0.3]
              }
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            children: !recharge_port && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
              children: "No power port detected. Please re-sync."
            }) || !mech && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
              children: "No mech detected."
            }) || !cell && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
              children: "No cell is installed."
            }) || (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": cell.charge / cell.maxcharge,
              "ranges": {
                good: [0.7, Infinity],
                average: [0.3, 0.7],
                bad: [-Infinity, 0.3]
              },
              children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
                "value": cell.charge
              }), ' / ' + cell.maxcharge]
            })
          })]
        })
      })
    })
  });
};

exports.MechBayPowerConsole = MechBayPowerConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/MechpadConsole.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/MechpadConsole.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.MechpadConsole = exports.MechpadControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var MechpadControl = function MechpadControl(props, context) {
  var topLevel = props.topLevel;

  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var pad_name = data.pad_name,
      connected_mechpad = data.connected_mechpad;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": (0, _inferno.createComponentVNode)(2, _components.Input, {
      "value": pad_name,
      "width": "170px",
      "onChange": function () {
        function onChange(e, value) {
          return act('rename', {
            name: value
          });
        }

        return onChange;
      }()
    }),
    "level": topLevel ? 1 : 2,
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "times",
      "content": "Remove",
      "color": "bad",
      "onClick": function () {
        function onClick() {
          return act('remove');
        }

        return onClick;
      }()
    }),
    children: !connected_mechpad && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "bad",
      "textAlign": "center",
      children: "No Pad Connected."
    }) || (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "icon": "upload",
      "content": "Launch",
      "textAlign": "center",
      "onClick": function () {
        function onClick() {
          return act('launch');
        }

        return onClick;
      }()
    })
  });
};

exports.MechpadControl = MechpadControl;

var MechpadConsole = function MechpadConsole(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _data$mechpads = data.mechpads,
      mechpads = _data$mechpads === void 0 ? [] : _data$mechpads,
      selected_id = data.selected_id;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 475,
    "height": 130,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: mechpads.length === 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "No Pads Connected"
      }) || (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "minHeight": "70px",
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "width": "140px",
            "minHeight": "70px",
            children: mechpads.map(function (mechpad) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "ellipsis": true,
                "content": mechpad.name,
                "selected": selected_id === mechpad.id,
                "color": "transparent",
                "onClick": function () {
                  function onClick() {
                    return act('select_pad', {
                      id: mechpad.id
                    });
                  }

                  return onClick;
                }()
              }, mechpad.name);
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "minHeight": "100%",
            children: (0, _inferno.createComponentVNode)(2, _components.Divider, {
              "vertical": true
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            "basis": 0,
            "minHeight": "100%",
            children: selected_id && (0, _inferno.createComponentVNode)(2, MechpadControl) || (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: "Please select a pad"
            })
          })]
        })
      })
    })
  });
};

exports.MechpadConsole = MechpadConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/MedicalKiosk.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/MedicalKiosk.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.MedicalKiosk = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var MedicalKiosk = function MedicalKiosk(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _useSharedState = (0, _backend.useSharedState)(context, 'scanIndex'),
      scanIndex = _useSharedState[0];

  var active_status_1 = data.active_status_1,
      active_status_2 = data.active_status_2,
      active_status_3 = data.active_status_3,
      active_status_4 = data.active_status_4;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 575,
    "height": 420,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
        "mb": 1,
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mr": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Section, {
            "minHeight": "100%",
            children: [(0, _inferno.createComponentVNode)(2, MedicalKioskScanButton, {
              "index": 1,
              "icon": "procedures",
              "name": "General Health Scan",
              "description": "Reads back exact values of your general health scan."
            }), (0, _inferno.createComponentVNode)(2, MedicalKioskScanButton, {
              "index": 2,
              "icon": "heartbeat",
              "name": "Symptom Based Checkup",
              "description": "Provides information based on various non-obvious symptoms,\nlike blood levels or disease status."
            }), (0, _inferno.createComponentVNode)(2, MedicalKioskScanButton, {
              "index": 3,
              "icon": "radiation-alt",
              "name": "Neurological/Radiological Scan",
              "description": "Provides information about brain trauma and radiation."
            }), (0, _inferno.createComponentVNode)(2, MedicalKioskScanButton, {
              "index": 4,
              "icon": "mortar-pestle",
              "name": "Chemical and Psychoactive Scan",
              "description": "Provides a list of consumed chemicals, as well as potential\nside effects."
            })]
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          "basis": 0,
          children: (0, _inferno.createComponentVNode)(2, MedicalKioskInstructions)
        })]
      }), !!active_status_1 && scanIndex === 1 && (0, _inferno.createComponentVNode)(2, MedicalKioskScanResults1), !!active_status_2 && scanIndex === 2 && (0, _inferno.createComponentVNode)(2, MedicalKioskScanResults2), !!active_status_3 && scanIndex === 3 && (0, _inferno.createComponentVNode)(2, MedicalKioskScanResults3), !!active_status_4 && scanIndex === 4 && (0, _inferno.createComponentVNode)(2, MedicalKioskScanResults4)]
    })
  });
};

exports.MedicalKiosk = MedicalKiosk;

var MedicalKioskScanButton = function MedicalKioskScanButton(props, context) {
  var index = props.index,
      name = props.name,
      description = props.description,
      icon = props.icon;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _useSharedState2 = (0, _backend.useSharedState)(context, 'scanIndex'),
      scanIndex = _useSharedState2[0],
      setScanIndex = _useSharedState2[1];

  var paid = data["active_status_" + index];
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "spacing": 1,
    "align": "baseline",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "width": "16px",
      "textAlign": "center",
      children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
        "name": paid ? 'check' : 'dollar-sign',
        "color": paid ? 'green' : 'grey'
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      children: (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": icon,
        "selected": paid && scanIndex === index,
        "tooltip": description,
        "tooltipPosition": "right",
        "content": name,
        "onClick": function () {
          function onClick() {
            if (!paid) {
              act("beginScan_" + index);
            }

            setScanIndex(index);
          }

          return onClick;
        }()
      })
    })]
  });
};

var MedicalKioskInstructions = function MedicalKioskInstructions(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var kiosk_cost = data.kiosk_cost,
      patient_name = data.patient_name;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "minHeight": "100%",
    children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
      "italic": true,
      children: ["Greetings Valued Employee! Please select a desired automatic health check procedure. Diagnosis costs ", (0, _inferno.createVNode)(1, "b", null, [kiosk_cost, (0, _inferno.createTextVNode)(" credits.")], 0)]
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 1,
      children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "color": "label",
        "mr": 1,
        children: "Patient:"
      }), patient_name]
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "mt": 1,
      "tooltip": "Resets the current scanning target, cancelling current scans.",
      "icon": "sync",
      "color": "average",
      "onClick": function () {
        function onClick() {
          return act('clearTarget');
        }

        return onClick;
      }(),
      "content": "Reset Scanner"
    })]
  });
};

var MedicalKioskScanResults1 = function MedicalKioskScanResults1(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      data = _useBackend4.data;

  var patient_health = data.patient_health,
      brute_health = data.brute_health,
      burn_health = data.burn_health,
      suffocation_health = data.suffocation_health,
      toxin_health = data.toxin_health;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Patient Health",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Total Health",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": patient_health / 100,
          children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": patient_health
          }), "%"]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Divider), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Brute Damage",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": brute_health / 100,
          "color": "bad",
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": brute_health
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Burn Damage",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": burn_health / 100,
          "color": "bad",
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": burn_health
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Oxygen Damage",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": suffocation_health / 100,
          "color": "bad",
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": suffocation_health
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Toxin Damage",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": toxin_health / 100,
          "color": "bad",
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": toxin_health
          })
        })
      })]
    })
  });
};

var MedicalKioskScanResults2 = function MedicalKioskScanResults2(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      data = _useBackend5.data;

  var patient_status = data.patient_status,
      patient_illness = data.patient_illness,
      illness_info = data.illness_info,
      bleed_status = data.bleed_status,
      blood_levels = data.blood_levels,
      blood_status = data.blood_status;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Symptom Based Checkup",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Patient Status",
        "color": "good",
        children: patient_status
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Divider), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Disease Status",
        children: patient_illness
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Disease information",
        children: illness_info
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Divider), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Blood Levels",
        children: [(0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": blood_levels / 100,
          "color": "bad",
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": blood_levels
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mt": 1,
          "color": "label",
          children: bleed_status
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Blood Information",
        children: blood_status
      })]
    })
  });
};

var MedicalKioskScanResults3 = function MedicalKioskScanResults3(props, context) {
  var _useBackend6 = (0, _backend.useBackend)(context),
      data = _useBackend6.data;

  var clone_health = data.clone_health,
      brain_damage = data.brain_damage,
      brain_health = data.brain_health,
      rad_contamination_status = data.rad_contamination_status,
      rad_contamination_value = data.rad_contamination_value,
      rad_sickness_status = data.rad_sickness_status,
      rad_sickness_value = data.rad_sickness_value,
      trauma_status = data.trauma_status;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Patient Neurological and Radiological Health",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Cellular Damage",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": clone_health / 100,
          "color": "good",
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": clone_health
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Divider), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Brain Damage",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": brain_damage / 100,
          "color": "good",
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": brain_damage
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Brain Status",
        "color": "health-0",
        children: brain_health
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Brain Trauma Status",
        children: trauma_status
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Divider), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Radiation Sickness Status",
        children: rad_sickness_status
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Radiation Sickness Percentage",
        children: [rad_sickness_value, "%"]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Radiation Contamination Status",
        children: rad_contamination_status
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Radiation Contamination Percentage",
        children: [rad_contamination_value, "%"]
      })]
    })
  });
};

var MedicalKioskScanResults4 = function MedicalKioskScanResults4(props, context) {
  var _useBackend7 = (0, _backend.useBackend)(context),
      data = _useBackend7.data;

  var _data$chemical_list = data.chemical_list,
      chemical_list = _data$chemical_list === void 0 ? [] : _data$chemical_list,
      _data$overdose_list = data.overdose_list,
      overdose_list = _data$overdose_list === void 0 ? [] : _data$overdose_list,
      _data$addict_list = data.addict_list,
      addict_list = _data$addict_list === void 0 ? [] : _data$addict_list,
      hallucinating_status = data.hallucinating_status;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Chemical and Psychoactive Analysis",
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Chemical Contents",
        children: [chemical_list.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "average",
          children: "No reagents detected."
        }), chemical_list.map(function (chem) {
          return (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": "good",
            children: [chem.volume, " units of ", chem.name]
          }, chem.id);
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Overdose Status",
        "color": "bad",
        children: [overdose_list.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "good",
          children: "Patient is not overdosing."
        }), overdose_list.map(function (chem) {
          return (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: ["Overdosing on ", chem.name]
          }, chem.id);
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Addiction Status",
        "color": "bad",
        children: [addict_list.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "good",
          children: "Patient has no addictions."
        }), addict_list.map(function (chem) {
          return (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: ["Addicted to ", chem.name]
          }, chem.id);
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Psychoactive Status",
        children: hallucinating_status
      })]
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Microscope.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/Microscope.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Microscope = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Microscope = function Microscope(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 1),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  var has_dish = data.has_dish,
      _data$cell_lines = data.cell_lines,
      cell_lines = _data$cell_lines === void 0 ? [] : _data$cell_lines,
      _data$viruses = data.viruses,
      viruses = _data$viruses === void 0 ? [] : _data$viruses;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Dish Sample",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "eject",
              "content": "Eject",
              "disabled": !has_dish,
              "onClick": function () {
                function onClick() {
                  return act('eject_petridish');
                }

                return onClick;
              }()
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "icon": "microscope",
          "lineHeight": "23px",
          "selected": tab === 1,
          "onClick": function () {
            function onClick() {
              return setTab(1);
            }

            return onClick;
          }(),
          children: ["Micro-Organisms (", cell_lines.length, ")"]
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "icon": "microscope",
          "lineHeight": "23px",
          "selected": tab === 2,
          "onClick": function () {
            function onClick() {
              return setTab(2);
            }

            return onClick;
          }(),
          children: ["Viruses (", viruses.length, ")"]
        })]
      }), tab === 1 && (0, _inferno.createComponentVNode)(2, Organisms, {
        "cell_lines": cell_lines
      }), tab === 2 && (0, _inferno.createComponentVNode)(2, Viruses, {
        "viruses": viruses
      })]
    })
  });
};

exports.Microscope = Microscope;

var Organisms = function Organisms(props, context) {
  var cell_lines = props.cell_lines;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  if (!cell_lines.length) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No micro-organisms found"
    });
  }

  return cell_lines.map(function (cell_line) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": cell_line.desc,
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Growth Rate",
          children: cell_line.growth_rate
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Virus Suspectibility",
          children: cell_line.suspectibility
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Required Reagents",
          children: cell_line.requireds
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Supplementary Reagents",
          children: cell_line.supplementaries
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Suppresive reagents",
          children: cell_line.suppressives
        })]
      })
    }, cell_line.desc);
  });
};

var Viruses = function Viruses(props, context) {
  var viruses = props.viruses;

  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act;

  if (!viruses.length) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No viruses found"
    });
  }

  return viruses.map(function (virus) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": virus.desc
    }, virus.desc);
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/MiningVendor.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/MiningVendor.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.MiningVendor = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var MiningVendor = function MiningVendor(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var inventory = [].concat(data.product_records);
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 425,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "User",
        children: data.user && (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: ["Welcome, ", (0, _inferno.createVNode)(1, "b", null, data.user.name || "Unknown", 0), ",", ' ', (0, _inferno.createVNode)(1, "b", null, data.user.job || "Unemployed", 0), "!", (0, _inferno.createVNode)(1, "br"), "Your balance is ", (0, _inferno.createVNode)(1, "b", null, [data.user.points, (0, _inferno.createTextVNode)(" mining points")], 0), "."]
        }) || (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "light-gray",
          children: ["No registered ID card!", (0, _inferno.createVNode)(1, "br"), "Please contact your local HoP!"]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Equipment",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: inventory.map(function (product) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: [(0, _inferno.createVNode)(1, "span", (0, _react.classes)(['vending32x32', product.path]), null, 1, {
                  "style": {
                    'vertical-align': 'middle'
                  }
                }), ' ', (0, _inferno.createVNode)(1, "b", null, product.name, 0)]
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "style": {
                    'min-width': '95px',
                    'text-align': 'center'
                  },
                  "disabled": !data.user || product.price > data.user.points,
                  "content": product.price + ' points',
                  "onClick": function () {
                    function onClick() {
                      return act('purchase', {
                        'ref': product.ref
                      });
                    }

                    return onClick;
                  }()
                })
              })]
            }, product.name);
          })
        })
      })]
    })
  });
};

exports.MiningVendor = MiningVendor;

/***/ }),

/***/ "./packages/tgui/interfaces/Mint.js":
/*!******************************************!*\
  !*** ./packages/tgui/interfaces/Mint.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Mint = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Mint = function Mint(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var inserted_materials = data.inserted_materials || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Materials",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.processing ? 'times' : 'power-off',
          "content": data.processing ? 'Stop' : 'Start',
          "selected": data.processing,
          "onClick": function () {
            function onClick() {
              return act(data.processing ? 'stoppress' : 'startpress');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: inserted_materials.map(function (material) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": material.material,
              "buttons": (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
                "checked": data.chosen_material === material.material,
                "onClick": function () {
                  function onClick() {
                    return act('changematerial', {
                      material_name: material.material
                    });
                  }

                  return onClick;
                }()
              }),
              children: [material.amount, " cm\xB3"]
            }, material.material);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: ["Pressed ", data.produced_coins, " coins this cycle."]
      })]
    })
  });
};

exports.Mint = Mint;

/***/ }),

/***/ "./packages/tgui/interfaces/Mule.js":
/*!******************************************!*\
  !*** ./packages/tgui/interfaces/Mule.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Mule = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _InterfaceLockNoticeBox = __webpack_require__(/*! ./common/InterfaceLockNoticeBox */ "./packages/tgui/interfaces/common/InterfaceLockNoticeBox.js");

var Mule = function Mule(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var on = data.on,
      cell = data.cell,
      cellPercent = data.cellPercent,
      load = data.load,
      mode = data.mode,
      modeStatus = data.modeStatus,
      haspai = data.haspai,
      autoReturn = data.autoReturn,
      autoPickup = data.autoPickup,
      reportDelivery = data.reportDelivery,
      destination = data.destination,
      home = data.home,
      id = data.id,
      _data$destinations = data.destinations,
      destinations = _data$destinations === void 0 ? [] : _data$destinations;
  var locked = data.locked && !data.siliconUser;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 425,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _InterfaceLockNoticeBox.InterfaceLockNoticeBox), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Status",
        "minHeight": "110px",
        "buttons": !locked && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": on ? 'power-off' : 'times',
          "content": on ? 'On' : 'Off',
          "selected": on,
          "onClick": function () {
            function onClick() {
              return act('power');
            }

            return onClick;
          }()
        }),
        children: [(0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": cell ? cellPercent / 100 : 0,
          "color": cell ? 'good' : 'bad'
        }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "mt": 1,
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            "basis": 0,
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Mode",
                "color": modeStatus,
                children: mode
              })
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            "basis": 0,
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Load",
                "color": load ? 'good' : 'average',
                children: load || 'None'
              })
            })
          })]
        })]
      }), !locked && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Controls",
        "buttons": (0, _inferno.createFragment)([!!load && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Unload",
          "onClick": function () {
            function onClick() {
              return act('unload');
            }

            return onClick;
          }()
        }), !!haspai && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject PAI",
          "onClick": function () {
            function onClick() {
              return act('ejectpai');
            }

            return onClick;
          }()
        })], 0),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "ID",
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "value": id,
              "onChange": function () {
                function onChange(e, value) {
                  return act('setid', {
                    value: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Destination",
            children: [(0, _inferno.createComponentVNode)(2, _components.Dropdown, {
              "over": true,
              "selected": destination || 'None',
              "options": destinations,
              "width": "150px",
              "onSelected": function () {
                function onSelected(value) {
                  return act('destination', {
                    value: value
                  });
                }

                return onSelected;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "stop",
              "content": "Stop",
              "onClick": function () {
                function onClick() {
                  return act('stop');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "play",
              "content": "Go",
              "onClick": function () {
                function onClick() {
                  return act('go');
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Home",
            children: [(0, _inferno.createComponentVNode)(2, _components.Dropdown, {
              "over": true,
              "selected": home,
              "options": destinations,
              "width": "150px",
              "onSelected": function () {
                function onSelected(value) {
                  return act('destination', {
                    value: value
                  });
                }

                return onSelected;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "home",
              "content": "Go Home",
              "onClick": function () {
                function onClick() {
                  return act('home');
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Settings",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "checked": autoReturn,
              "content": "Auto-Return",
              "onClick": function () {
                function onClick() {
                  return act('autored');
                }

                return onClick;
              }()
            }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "checked": autoPickup,
              "content": "Auto-Pickup",
              "onClick": function () {
                function onClick() {
                  return act('autopick');
                }

                return onClick;
              }()
            }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "checked": reportDelivery,
              "content": "Report Delivery",
              "onClick": function () {
                function onClick() {
                  return act('report');
                }

                return onClick;
              }()
            })]
          })]
        })
      })]
    })
  });
};

exports.Mule = Mule;

/***/ }),

/***/ "./packages/tgui/interfaces/NaniteChamberControl.js":
/*!**********************************************************!*\
  !*** ./packages/tgui/interfaces/NaniteChamberControl.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NaniteChamberControlContent = exports.NaniteChamberControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NaniteChamberControl = function NaniteChamberControl(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 380,
    "height": 570,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, NaniteChamberControlContent)
    })
  });
};

exports.NaniteChamberControl = NaniteChamberControl;

var NaniteChamberControlContent = function NaniteChamberControlContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var status_msg = data.status_msg,
      locked = data.locked,
      occupant_name = data.occupant_name,
      has_nanites = data.has_nanites,
      nanite_volume = data.nanite_volume,
      regen_rate = data.regen_rate,
      safety_threshold = data.safety_threshold,
      cloud_id = data.cloud_id,
      scan_level = data.scan_level;

  if (status_msg) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      "textAlign": "center",
      children: status_msg
    });
  }

  var mob_programs = data.mob_programs || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": 'Chamber: ' + occupant_name,
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": locked ? 'lock' : 'lock-open',
      "content": locked ? 'Locked' : 'Unlocked',
      "color": locked ? 'bad' : 'default',
      "onClick": function () {
        function onClick() {
          return act('toggle_lock');
        }

        return onClick;
      }()
    }),
    children: !has_nanites ? (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "color": "bad",
      "textAlign": "center",
      "fontSize": "30px",
      "mb": 1,
      children: "No Nanites Detected"
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "bold": true,
      "icon": "syringe",
      "content": " Implant Nanites",
      "color": "green",
      "textAlign": "center",
      "fontSize": "30px",
      "lineHeight": "50px",
      "onClick": function () {
        function onClick() {
          return act('nanite_injection');
        }

        return onClick;
      }()
    })], 4) : (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Status",
      "level": 2,
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "exclamation-triangle",
        "content": "Destroy Nanites",
        "color": "bad",
        "onClick": function () {
          function onClick() {
            return act('remove_nanites');
          }

          return onClick;
        }()
      }),
      children: (0, _inferno.createComponentVNode)(2, _components.Grid, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Nanite Volume",
              children: nanite_volume
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Growth Rate",
              children: regen_rate
            })]
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Safety Threshold",
              children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
                "value": safety_threshold,
                "minValue": 0,
                "maxValue": 500,
                "width": "39px",
                "onChange": function () {
                  function onChange(e, value) {
                    return act('set_safety', {
                      value: value
                    });
                  }

                  return onChange;
                }()
              })
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Cloud ID",
              children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
                "value": cloud_id,
                "minValue": 0,
                "maxValue": 100,
                "step": 1,
                "stepPixelSize": 3,
                "width": "39px",
                "onChange": function () {
                  function onChange(e, value) {
                    return act('set_cloud', {
                      value: value
                    });
                  }

                  return onChange;
                }()
              })
            })]
          })
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Programs",
      "level": 2,
      children: mob_programs.map(function (program) {
        var extra_settings = program.extra_settings || [];
        var rules = program.rules || [];
        return (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
          "title": program.name,
          children: (0, _inferno.createComponentVNode)(2, _components.Section, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
                children: program.desc
              }), scan_level >= 2 && (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
                "size": 0.6,
                children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
                  children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                    "label": "Activation Status",
                    children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                      "color": program.activated ? 'good' : 'bad',
                      children: program.activated ? 'Active' : 'Inactive'
                    })
                  }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                    "label": "Nanites Consumed",
                    children: [program.use_rate, "/s"]
                  })]
                })
              })]
            }), scan_level >= 2 && (0, _inferno.createComponentVNode)(2, _components.Grid, {
              children: [!!program.can_trigger && (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
                children: (0, _inferno.createComponentVNode)(2, _components.Section, {
                  "title": "Triggers",
                  "level": 2,
                  children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
                    children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Trigger Cost",
                      children: program.trigger_cost
                    }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Trigger Cooldown",
                      children: program.trigger_cooldown
                    }), !!program.timer_trigger_delay && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Trigger Delay",
                      children: [program.timer_trigger_delay, " s"]
                    }), !!program.timer_trigger && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Trigger Repeat Timer",
                      children: [program.timer_trigger, " s"]
                    })]
                  })
                })
              }), !!(program.timer_restart || program.timer_shutdown) && (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
                children: (0, _inferno.createComponentVNode)(2, _components.Section, {
                  children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
                    children: [program.timer_restart && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Restart Timer",
                      children: [program.timer_restart, " s"]
                    }), program.timer_shutdown && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Shutdown Timer",
                      children: [program.timer_shutdown, " s"]
                    })]
                  })
                })
              })]
            }), scan_level >= 3 && !!program.has_extra_settings && (0, _inferno.createComponentVNode)(2, _components.Section, {
              "title": "Extra Settings",
              "level": 2,
              children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
                children: extra_settings.map(function (extra_setting) {
                  return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                    "label": extra_setting.name,
                    children: extra_setting.value
                  }, extra_setting.name);
                })
              })
            }), scan_level >= 4 && (0, _inferno.createComponentVNode)(2, _components.Grid, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
                children: (0, _inferno.createComponentVNode)(2, _components.Section, {
                  "title": "Codes",
                  "level": 2,
                  children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
                    children: [!!program.activation_code && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Activation",
                      children: program.activation_code
                    }), !!program.deactivation_code && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Deactivation",
                      children: program.deactivation_code
                    }), !!program.kill_code && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Kill",
                      children: program.kill_code
                    }), !!program.can_trigger && !!program.trigger_code && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                      "label": "Trigger",
                      children: program.trigger_code
                    })]
                  })
                })
              }), program.has_rules && (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
                children: (0, _inferno.createComponentVNode)(2, _components.Section, {
                  "title": "Rules",
                  "level": 2,
                  children: rules.map(function (rule) {
                    return (0, _inferno.createFragment)([rule.display, (0, _inferno.createVNode)(1, "br")], 0, rule.display);
                  })
                })
              })]
            })]
          })
        }, program.name);
      })
    })], 4)
  });
};

exports.NaniteChamberControlContent = NaniteChamberControlContent;

/***/ }),

/***/ "./packages/tgui/interfaces/NaniteCloudControl.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/NaniteCloudControl.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NaniteCloudControl = exports.NaniteCloudBackupDetails = exports.NaniteCloudBackupList = exports.NaniteInfoBox = exports.NaniteDiskBox = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NaniteDiskBox = function NaniteDiskBox(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var has_disk = data.has_disk,
      has_program = data.has_program,
      disk = data.disk;

  if (!has_disk) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No disk inserted"
    });
  }

  if (!has_program) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "Inserted disk has no program"
    });
  }

  return (0, _inferno.createComponentVNode)(2, NaniteInfoBox, {
    "program": disk
  });
};

exports.NaniteDiskBox = NaniteDiskBox;

var NaniteInfoBox = function NaniteInfoBox(props, context) {
  var program = props.program;
  var name = program.name,
      desc = program.desc,
      activated = program.activated,
      use_rate = program.use_rate,
      can_trigger = program.can_trigger,
      trigger_cost = program.trigger_cost,
      trigger_cooldown = program.trigger_cooldown,
      activation_code = program.activation_code,
      deactivation_code = program.deactivation_code,
      kill_code = program.kill_code,
      trigger_code = program.trigger_code,
      timer_restart = program.timer_restart,
      timer_shutdown = program.timer_shutdown,
      timer_trigger = program.timer_trigger,
      timer_trigger_delay = program.timer_trigger_delay;
  var extra_settings = program.extra_settings || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": name,
    "level": 2,
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "bold": true,
      "color": activated ? 'good' : 'bad',
      children: activated ? 'Activated' : 'Deactivated'
    }),
    children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        "mr": 1,
        children: desc
      }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        "size": 0.5,
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Use Rate",
            children: use_rate
          }), !!can_trigger && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Trigger Cost",
            children: trigger_cost
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Trigger Cooldown",
            children: trigger_cooldown
          })], 4)]
        })
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Codes",
          "level": 3,
          "mr": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Activation",
              children: activation_code
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Deactivation",
              children: deactivation_code
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Kill",
              children: kill_code
            }), !!can_trigger && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Trigger",
              children: trigger_code
            })]
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Delays",
          "level": 3,
          "mr": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Restart",
              children: [timer_restart, " s"]
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Shutdown",
              children: [timer_shutdown, " s"]
            }), !!can_trigger && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Trigger",
              children: [timer_trigger, " s"]
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Trigger Delay",
              children: [timer_trigger_delay, " s"]
            })], 4)]
          })
        })
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Extra Settings",
      "level": 3,
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: extra_settings.map(function (setting) {
          var naniteTypesDisplayMap = {
            number: (0, _inferno.createFragment)([setting.value, setting.unit], 0),
            text: setting.value,
            type: setting.value,
            "boolean": setting.value ? setting.true_text : setting.false_text
          };
          return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": setting.name,
            children: naniteTypesDisplayMap[setting.type]
          }, setting.name);
        })
      })
    })]
  });
};

exports.NaniteInfoBox = NaniteInfoBox;

var NaniteCloudBackupList = function NaniteCloudBackupList(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var cloud_backups = data.cloud_backups || [];
  return cloud_backups.map(function (backup) {
    return (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "content": "Backup #" + backup.cloud_id,
      "textAlign": "center",
      "onClick": function () {
        function onClick() {
          return act('set_view', {
            view: backup.cloud_id
          });
        }

        return onClick;
      }()
    }, backup.cloud_id);
  });
};

exports.NaniteCloudBackupList = NaniteCloudBackupList;

var NaniteCloudBackupDetails = function NaniteCloudBackupDetails(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var current_view = data.current_view,
      disk = data.disk,
      has_program = data.has_program,
      cloud_backup = data.cloud_backup;
  var can_rule = disk && disk.can_rule || false;

  if (!cloud_backup) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "ERROR: Backup not found"
    });
  }

  var cloud_programs = data.cloud_programs || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Backup #" + current_view,
    "level": 2,
    "buttons": !!has_program && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "upload",
      "content": "Upload From Disk",
      "color": "good",
      "onClick": function () {
        function onClick() {
          return act('upload_program');
        }

        return onClick;
      }()
    }),
    children: cloud_programs.map(function (program) {
      var rules = program.rules || [];
      return (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
        "title": program.name,
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "minus-circle",
          "color": "bad",
          "onClick": function () {
            function onClick() {
              return act('remove_program', {
                program_id: program.id
              });
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          children: [(0, _inferno.createComponentVNode)(2, NaniteInfoBox, {
            "program": program
          }), (!!can_rule || !!program.has_rules) && (0, _inferno.createComponentVNode)(2, _components.Section, {
            "mt": -2,
            "title": "Rules",
            "level": 2,
            "buttons": !!can_rule && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "plus",
              "content": "Add Rule from Disk",
              "color": "good",
              "onClick": function () {
                function onClick() {
                  return act('add_rule', {
                    program_id: program.id
                  });
                }

                return onClick;
              }()
            }),
            children: program.has_rules ? rules.map(function (rule) {
              return (0, _inferno.createComponentVNode)(2, _components.Box, {
                children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "minus-circle",
                  "color": "bad",
                  "onClick": function () {
                    function onClick() {
                      return act('remove_rule', {
                        program_id: program.id,
                        rule_id: rule.id
                      });
                    }

                    return onClick;
                  }()
                }), " " + rule.display]
              }, rule.display);
            }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "bad",
              children: "No Active Rules"
            })
          })]
        })
      }, program.name);
    })
  });
};

exports.NaniteCloudBackupDetails = NaniteCloudBackupDetails;

var NaniteCloudControl = function NaniteCloudControl(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act,
      data = _useBackend4.data;

  var has_disk = data.has_disk,
      current_view = data.current_view,
      new_backup_id = data.new_backup_id;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 375,
    "height": 700,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Program Disk",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject",
          "disabled": !has_disk,
          "onClick": function () {
            function onClick() {
              return act('eject');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, NaniteDiskBox)
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Cloud Storage",
        "buttons": current_view ? (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "arrow-left",
          "content": "Return",
          "onClick": function () {
            function onClick() {
              return act('set_view', {
                view: 0
              });
            }

            return onClick;
          }()
        }) : (0, _inferno.createFragment)(["New Backup: ", (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": new_backup_id,
          "minValue": 1,
          "maxValue": 100,
          "stepPixelSize": 4,
          "width": "39px",
          "onChange": function () {
            function onChange(e, value) {
              return act('update_new_backup_value', {
                value: value
              });
            }

            return onChange;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "plus",
          "onClick": function () {
            function onClick() {
              return act('create_backup');
            }

            return onClick;
          }()
        })], 0),
        children: !data.current_view ? (0, _inferno.createComponentVNode)(2, NaniteCloudBackupList) : (0, _inferno.createComponentVNode)(2, NaniteCloudBackupDetails)
      })]
    })
  });
};

exports.NaniteCloudControl = NaniteCloudControl;

/***/ }),

/***/ "./packages/tgui/interfaces/NaniteProgramHub.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/NaniteProgramHub.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NaniteProgramHub = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NaniteProgramHub = function NaniteProgramHub(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var detail_view = data.detail_view,
      disk = data.disk,
      has_disk = data.has_disk,
      has_program = data.has_program,
      _data$programs = data.programs,
      programs = _data$programs === void 0 ? {} : _data$programs;

  var _useSharedState = (0, _backend.useSharedState)(context, 'category'),
      selectedCategory = _useSharedState[0],
      setSelectedCategory = _useSharedState[1];

  var programsInCategory = programs && programs[selectedCategory] || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 700,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Program Disk",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject",
          "onClick": function () {
            function onClick() {
              return act('eject');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "minus-circle",
          "content": "Delete Program",
          "onClick": function () {
            function onClick() {
              return act('clear');
            }

            return onClick;
          }()
        })], 4),
        children: has_disk ? has_program ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Program Name",
            children: disk.name
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Description",
            children: disk.desc
          })]
        }) : (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: "No Program Installed"
        }) : (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: "Insert Disk"
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Programs",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": detail_view ? 'info' : 'list',
          "content": detail_view ? 'Detailed' : 'Compact',
          "onClick": function () {
            function onClick() {
              return act('toggle_details');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "sync",
          "content": "Sync Research",
          "onClick": function () {
            function onClick() {
              return act('refresh');
            }

            return onClick;
          }()
        })], 4),
        children: programs !== null ? (0, _inferno.createComponentVNode)(2, _components.Flex, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "minWidth": "110px",
            children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
              "vertical": true,
              children: (0, _collections.map)(function (cat_contents, category) {
                var progs = cat_contents || []; // Backend was sending stupid data that would have been
                // annoying to fix

                var tabLabel = category.substring(0, category.length - 8);
                return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
                  "selected": category === selectedCategory,
                  "onClick": function () {
                    function onClick() {
                      return setSelectedCategory(category);
                    }

                    return onClick;
                  }(),
                  children: tabLabel
                }, category);
              })(programs)
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            "basis": 0,
            children: detail_view ? programsInCategory.map(function (program) {
              return (0, _inferno.createComponentVNode)(2, _components.Section, {
                "title": program.name,
                "level": 2,
                "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "download",
                  "content": "Download",
                  "disabled": !has_disk,
                  "onClick": function () {
                    function onClick() {
                      return act('download', {
                        program_id: program.id
                      });
                    }

                    return onClick;
                  }()
                }),
                children: program.desc
              }, program.id);
            }) : (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: programsInCategory.map(function (program) {
                return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": program.name,
                  "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                    "icon": "download",
                    "content": "Download",
                    "disabled": !has_disk,
                    "onClick": function () {
                      function onClick() {
                        return act('download', {
                          program_id: program.id
                        });
                      }

                      return onClick;
                    }()
                  })
                }, program.id);
              })
            })
          })]
        }) : (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: "No nanite programs are currently researched."
        })
      })]
    })
  });
};

exports.NaniteProgramHub = NaniteProgramHub;

/***/ }),

/***/ "./packages/tgui/interfaces/NaniteProgrammer.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/NaniteProgrammer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NaniteProgrammerContent = exports.NaniteProgrammer = exports.NaniteExtraBoolean = exports.NaniteExtraType = exports.NaniteExtraText = exports.NaniteExtraNumber = exports.NaniteExtraEntry = exports.NaniteDelays = exports.NaniteCodes = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NaniteCodes = function NaniteCodes(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Codes",
    "level": 3,
    "mr": 1,
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Activation",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": data.activation_code,
          "width": "47px",
          "minValue": 0,
          "maxValue": 9999,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_code', {
                target_code: "activation",
                code: value
              });
            }

            return onChange;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Deactivation",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": data.deactivation_code,
          "width": "47px",
          "minValue": 0,
          "maxValue": 9999,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_code', {
                target_code: "deactivation",
                code: value
              });
            }

            return onChange;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Kill",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": data.kill_code,
          "width": "47px",
          "minValue": 0,
          "maxValue": 9999,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_code', {
                target_code: 'kill',
                code: value
              });
            }

            return onChange;
          }()
        })
      }), !!data.can_trigger && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Trigger",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": data.trigger_code,
          "width": "47px",
          "minValue": 0,
          "maxValue": 9999,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_code', {
                target_code: 'trigger',
                code: value
              });
            }

            return onChange;
          }()
        })
      })]
    })
  });
};

exports.NaniteCodes = NaniteCodes;

var NaniteDelays = function NaniteDelays(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Delays",
    "level": 3,
    "ml": 1,
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Restart Timer",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": data.timer_restart,
          "unit": "s",
          "width": "57px",
          "minValue": 0,
          "maxValue": 3600,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_restart_timer', {
                delay: value
              });
            }

            return onChange;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Shutdown Timer",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": data.timer_shutdown,
          "unit": "s",
          "width": "57px",
          "minValue": 0,
          "maxValue": 3600,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_shutdown_timer', {
                delay: value
              });
            }

            return onChange;
          }()
        })
      }), !!data.can_trigger && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Trigger Repeat Timer",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": data.timer_trigger,
          "unit": "s",
          "width": "57px",
          "minValue": 0,
          "maxValue": 3600,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_trigger_timer', {
                delay: value
              });
            }

            return onChange;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Trigger Delay",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": data.timer_trigger_delay,
          "unit": "s",
          "width": "57px",
          "minValue": 0,
          "maxValue": 3600,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_timer_trigger_delay', {
                delay: value
              });
            }

            return onChange;
          }()
        })
      })], 4)]
    })
  });
};

exports.NaniteDelays = NaniteDelays;

var NaniteExtraEntry = function NaniteExtraEntry(props, context) {
  var extra_setting = props.extra_setting;
  var name = extra_setting.name,
      type = extra_setting.type;
  var typeComponentMap = {
    number: (0, _inferno.createComponentVNode)(2, NaniteExtraNumber, {
      "extra_setting": extra_setting
    }),
    text: (0, _inferno.createComponentVNode)(2, NaniteExtraText, {
      "extra_setting": extra_setting
    }),
    type: (0, _inferno.createComponentVNode)(2, NaniteExtraType, {
      "extra_setting": extra_setting
    }),
    "boolean": (0, _inferno.createComponentVNode)(2, NaniteExtraBoolean, {
      "extra_setting": extra_setting
    })
  };
  return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
    "label": name,
    children: typeComponentMap[type]
  });
};

exports.NaniteExtraEntry = NaniteExtraEntry;

var NaniteExtraNumber = function NaniteExtraNumber(props, context) {
  var extra_setting = props.extra_setting;

  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act;

  var name = extra_setting.name,
      value = extra_setting.value,
      min = extra_setting.min,
      max = extra_setting.max,
      unit = extra_setting.unit;
  return (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
    "value": value,
    "width": "64px",
    "minValue": min,
    "maxValue": max,
    "unit": unit,
    "onChange": function () {
      function onChange(e, val) {
        return act('set_extra_setting', {
          target_setting: name,
          value: val
        });
      }

      return onChange;
    }()
  });
};

exports.NaniteExtraNumber = NaniteExtraNumber;

var NaniteExtraText = function NaniteExtraText(props, context) {
  var extra_setting = props.extra_setting;

  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act;

  var name = extra_setting.name,
      value = extra_setting.value;
  return (0, _inferno.createComponentVNode)(2, _components.Input, {
    "value": value,
    "width": "200px",
    "onInput": function () {
      function onInput(e, val) {
        return act('set_extra_setting', {
          target_setting: name,
          value: val
        });
      }

      return onInput;
    }()
  });
};

exports.NaniteExtraText = NaniteExtraText;

var NaniteExtraType = function NaniteExtraType(props, context) {
  var extra_setting = props.extra_setting;

  var _useBackend5 = (0, _backend.useBackend)(context),
      act = _useBackend5.act;

  var name = extra_setting.name,
      value = extra_setting.value,
      types = extra_setting.types;
  return (0, _inferno.createComponentVNode)(2, _components.Dropdown, {
    "over": true,
    "selected": value,
    "width": "150px",
    "options": types,
    "onSelected": function () {
      function onSelected(val) {
        return act('set_extra_setting', {
          target_setting: name,
          value: val
        });
      }

      return onSelected;
    }()
  });
};

exports.NaniteExtraType = NaniteExtraType;

var NaniteExtraBoolean = function NaniteExtraBoolean(props, context) {
  var extra_setting = props.extra_setting;

  var _useBackend6 = (0, _backend.useBackend)(context),
      act = _useBackend6.act;

  var name = extra_setting.name,
      value = extra_setting.value,
      true_text = extra_setting.true_text,
      false_text = extra_setting.false_text;
  return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
    "content": value ? true_text : false_text,
    "checked": value,
    "onClick": function () {
      function onClick() {
        return act('set_extra_setting', {
          target_setting: name
        });
      }

      return onClick;
    }()
  });
};

exports.NaniteExtraBoolean = NaniteExtraBoolean;

var NaniteProgrammer = function NaniteProgrammer(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 420,
    "height": 550,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, NaniteProgrammerContent)
    })
  });
};

exports.NaniteProgrammer = NaniteProgrammer;

var NaniteProgrammerContent = function NaniteProgrammerContent(props, context) {
  var _useBackend7 = (0, _backend.useBackend)(context),
      act = _useBackend7.act,
      data = _useBackend7.data;

  var has_disk = data.has_disk,
      has_program = data.has_program,
      name = data.name,
      desc = data.desc,
      use_rate = data.use_rate,
      can_trigger = data.can_trigger,
      trigger_cost = data.trigger_cost,
      trigger_cooldown = data.trigger_cooldown,
      activated = data.activated,
      has_extra_settings = data.has_extra_settings,
      _data$extra_settings = data.extra_settings,
      extra_settings = _data$extra_settings === void 0 ? {} : _data$extra_settings;

  if (!has_disk) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      "textAlign": "center",
      children: "Insert a nanite program disk"
    });
  }

  if (!has_program) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Blank Disk",
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "eject",
        "content": "Eject",
        "onClick": function () {
          function onClick() {
            return act('eject');
          }

          return onClick;
        }()
      })
    });
  }

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": name,
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "content": "Eject",
      "onClick": function () {
        function onClick() {
          return act('eject');
        }

        return onClick;
      }()
    }),
    children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Info",
      "level": 2,
      children: (0, _inferno.createComponentVNode)(2, _components.Grid, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: desc
        }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          "size": 0.7,
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Use Rate",
              children: use_rate
            }), !!can_trigger && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Trigger Cost",
              children: trigger_cost
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Trigger Cooldown",
              children: trigger_cooldown
            })], 4)]
          })
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Settings",
      "level": 2,
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": activated ? 'power-off' : 'times',
        "content": activated ? 'Active' : 'Inactive',
        "selected": activated,
        "color": "bad",
        "bold": true,
        "onClick": function () {
          function onClick() {
            return act('toggle_active');
          }

          return onClick;
        }()
      }),
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: (0, _inferno.createComponentVNode)(2, NaniteCodes)
        }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: (0, _inferno.createComponentVNode)(2, NaniteDelays)
        })]
      }), !!has_extra_settings && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Special",
        "level": 3,
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: extra_settings.map(function (setting) {
            return (0, _inferno.createComponentVNode)(2, NaniteExtraEntry, {
              "extra_setting": setting
            }, setting.name);
          })
        })
      })]
    })]
  });
};

exports.NaniteProgrammerContent = NaniteProgrammerContent;

/***/ }),

/***/ "./packages/tgui/interfaces/NaniteRemote.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/NaniteRemote.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NaniteRemoteContent = exports.NaniteRemote = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NaniteRemote = function NaniteRemote(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 420,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, NaniteRemoteContent)
    })
  });
};

exports.NaniteRemote = NaniteRemote;

var NaniteRemoteContent = function NaniteRemoteContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var code = data.code,
      locked = data.locked,
      mode = data.mode,
      program_name = data.program_name,
      relay_code = data.relay_code,
      comms = data.comms,
      message = data.message,
      _data$saved_settings = data.saved_settings,
      saved_settings = _data$saved_settings === void 0 ? [] : _data$saved_settings;
  var modes = ["Off", "Local", "Targeted", "Area", "Relay"];

  if (locked) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "This interface is locked."
    });
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Nanite Control",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "lock",
      "content": "Lock Interface",
      "onClick": function () {
        function onClick() {
          return act('lock');
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Name",
        children: [(0, _inferno.createComponentVNode)(2, _components.Input, {
          "value": program_name,
          "maxLength": 14,
          "width": "130px",
          "onChange": function () {
            function onChange(e, value) {
              return act('update_name', {
                name: value
              });
            }

            return onChange;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "save",
          "content": "Save",
          "onClick": function () {
            function onClick() {
              return act('save');
            }

            return onClick;
          }()
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": comms ? "Comm Code" : "Signal Code",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": code,
          "minValue": 0,
          "maxValue": 9999,
          "width": "47px",
          "step": 1,
          "stepPixelSize": 2,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_code', {
                code: value
              });
            }

            return onChange;
          }()
        })
      }), !!comms && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Message",
        children: (0, _inferno.createComponentVNode)(2, _components.Input, {
          "value": message,
          "width": "270px",
          "onChange": function () {
            function onChange(e, value) {
              return act('set_message', {
                value: value
              });
            }

            return onChange;
          }()
        })
      }), mode === "Relay" && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Relay Code",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": relay_code,
          "minValue": 0,
          "maxValue": 9999,
          "width": "47px",
          "step": 1,
          "stepPixelSize": 2,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_relay_code', {
                code: value
              });
            }

            return onChange;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Signal Mode",
        children: modes.map(function (key) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": key,
            "selected": mode === key,
            "onClick": function () {
              function onClick() {
                return act('select_mode', {
                  mode: key
                });
              }

              return onClick;
            }()
          }, key);
        })
      })]
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Saved Settings",
    children: saved_settings.length > 0 ? (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        "header": true,
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "width": "35%",
          children: "Name"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "width": "20%",
          children: "Mode"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          children: "Code"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          children: "Relay"
        })]
      }), saved_settings.map(function (setting) {
        return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          "className": "candystripe",
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "bold": true,
            "color": "label",
            children: [setting.name, ":"]
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: setting.mode
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: setting.code
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: setting.mode === "Relay" && setting.relay_code
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "textAlign": "right",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "upload",
              "color": "good",
              "onClick": function () {
                function onClick() {
                  return act('load', {
                    save_id: setting.id
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "minus",
              "color": "bad",
              "onClick": function () {
                function onClick() {
                  return act('remove_save', {
                    save_id: setting.id
                  });
                }

                return onClick;
              }()
            })]
          })]
        }, setting.id);
      })]
    }) : (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No settings currently saved"
    })
  })], 4);
};

exports.NaniteRemoteContent = NaniteRemoteContent;

/***/ }),

/***/ "./packages/tgui/interfaces/NotificationPreferences.js":
/*!*************************************************************!*\
  !*** ./packages/tgui/interfaces/NotificationPreferences.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NotificationPreferences = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NotificationPreferences = function NotificationPreferences(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var ignoresPreSort = data.ignore || [];
  var ignores = ignoresPreSort.sort(function (a, b) {
    var descA = a.desc.toLowerCase();
    var descB = b.desc.toLowerCase();

    if (descA < descB) {
      return -1;
    }

    if (descA > descB) {
      return 1;
    }

    return 0;
  });
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Notification Preferences",
    "width": 270,
    "height": 360,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Ghost Role Notifications",
        children: ignores.map(function (ignore) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "icon": ignore.enabled ? 'times' : 'check',
            "content": ignore.desc,
            "color": ignore.enabled ? 'bad' : 'good',
            "onClick": function () {
              function onClick() {
                return act('toggle_ignore', {
                  key: ignore.key
                });
              }

              return onClick;
            }()
          }, ignore.key);
        })
      })
    })
  });
};

exports.NotificationPreferences = NotificationPreferences;

/***/ }),

/***/ "./packages/tgui/interfaces/NtnetRelay.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/NtnetRelay.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtnetRelay = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtnetRelay = function NtnetRelay(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var enabled = data.enabled,
      dos_capacity = data.dos_capacity,
      dos_overload = data.dos_overload,
      dos_crashed = data.dos_crashed;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "NtNet Quantum Relay",
    "width": 400,
    "height": 300,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Network Buffer",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "power-off",
          "selected": enabled,
          "content": enabled ? 'ENABLED' : 'DISABLED',
          "onClick": function () {
            function onClick() {
              return act('toggle');
            }

            return onClick;
          }()
        }),
        children: !dos_crashed ? (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": dos_overload,
          "minValue": 0,
          "maxValue": dos_capacity,
          children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": dos_overload
          }), " GQ", ' / ', dos_capacity, " GQ"]
        }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
          "fontFamily": "monospace",
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "fontSize": "20px",
            children: "NETWORK BUFFER OVERFLOW"
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "fontSize": "16px",
            children: "OVERLOAD RECOVERY MODE"
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: "This system is suffering temporary outage due to overflow of traffic buffers. Until buffered traffic is processed, all further requests will be dropped. Frequent occurences of this error may indicate insufficient hardware capacity of your network. Please contact your network planning department for instructions on how to resolve this issue."
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "fontSize": "20px",
            "color": "bad",
            children: "ADMINISTRATOR OVERRIDE"
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "fontSize": "16px",
            "color": "bad",
            children: "CAUTION - DATA LOSS MAY OCCUR"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "signal",
            "content": "PURGE BUFFER",
            "mt": 1,
            "color": "bad",
            "onClick": function () {
              function onClick() {
                return act('restart');
              }

              return onClick;
            }()
          })]
        })
      })
    })
  });
};

exports.NtnetRelay = NtnetRelay;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosAiRestorer.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/NtosAiRestorer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosAiRestorer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _AiRestorer = __webpack_require__(/*! ./AiRestorer */ "./packages/tgui/interfaces/AiRestorer.js");

var NtosAiRestorer = function NtosAiRestorer() {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 370,
    "height": 400,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _AiRestorer.AiRestorerContent)
    })
  });
};

exports.NtosAiRestorer = NtosAiRestorer;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosArcade.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/NtosArcade.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosArcade = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _assets = __webpack_require__(/*! ../assets */ "./packages/tgui/assets.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosArcade = function NtosArcade(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 450,
    "height": 350,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Outbomb Cuban Pete Ultra",
        "textAlign": "center",
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
              "size": 2,
              children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
                "m": 1
              }), (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
                children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": "Player Health",
                  children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
                    "value": data.PlayerHitpoints,
                    "minValue": 0,
                    "maxValue": 30,
                    "ranges": {
                      olive: [31, Infinity],
                      good: [20, 31],
                      average: [10, 20],
                      bad: [-Infinity, 10]
                    },
                    children: [data.PlayerHitpoints, "HP"]
                  })
                }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                  "label": "Player Magic",
                  children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
                    "value": data.PlayerMP,
                    "minValue": 0,
                    "maxValue": 10,
                    "ranges": {
                      purple: [11, Infinity],
                      violet: [3, 11],
                      bad: [-Infinity, 3]
                    },
                    children: [data.PlayerMP, "MP"]
                  })
                })]
              }), (0, _inferno.createComponentVNode)(2, _components.Box, {
                "my": 1,
                "mx": 4
              }), (0, _inferno.createComponentVNode)(2, _components.Section, {
                "backgroundColor": data.PauseState === 1 ? "#1b3622" : "#471915",
                children: data.Status
              })]
            }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
              children: [(0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
                "value": data.Hitpoints,
                "minValue": 0,
                "maxValue": 45,
                "ranges": {
                  good: [30, Infinity],
                  average: [5, 30],
                  bad: [-Infinity, 5]
                },
                children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
                  "value": data.Hitpoints
                }), "HP"]
              }), (0, _inferno.createComponentVNode)(2, _components.Box, {
                "m": 1
              }), (0, _inferno.createComponentVNode)(2, _components.Section, {
                "inline": true,
                "width": "156px",
                "textAlign": "center",
                children: (0, _inferno.createVNode)(1, "img", null, null, 1, {
                  "src": (0, _assets.resolveAsset)(data.BossID)
                })
              })]
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            "my": 1,
            "mx": 4
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "fist-raised",
            "tooltip": "Go in for the kill!",
            "tooltipPosition": "top",
            "disabled": data.GameActive === 0 || data.PauseState === 1,
            "onClick": function () {
              function onClick() {
                return act('Attack');
              }

              return onClick;
            }(),
            "content": "Attack!"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "band-aid",
            "tooltip": "Heal yourself!",
            "tooltipPosition": "top",
            "disabled": data.GameActive === 0 || data.PauseState === 1,
            "onClick": function () {
              function onClick() {
                return act('Heal');
              }

              return onClick;
            }(),
            "content": "Heal!"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "magic",
            "tooltip": "Recharge your magic!",
            "tooltipPosition": "top",
            "disabled": data.GameActive === 0 || data.PauseState === 1,
            "onClick": function () {
              function onClick() {
                return act('Recharge_Power');
              }

              return onClick;
            }(),
            "content": "Recharge!"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "sync-alt",
            "tooltip": "One more game couldn't hurt.",
            "tooltipPosition": "top",
            "disabled": data.GameActive === 1,
            "onClick": function () {
              function onClick() {
                return act('Start_Game');
              }

              return onClick;
            }(),
            "content": "Begin Game"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "ticket-alt",
            "tooltip": "Claim at your local Arcade Computer for Prizes!",
            "tooltipPosition": "top",
            "disabled": data.GameActive === 1,
            "onClick": function () {
              function onClick() {
                return act('Dispense_Tickets');
              }

              return onClick;
            }(),
            "content": "Claim Tickets"
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": data.TicketCount >= 1 ? 'good' : 'normal',
          children: ["Earned Tickets: ", data.TicketCount]
        })]
      })
    })
  });
};

exports.NtosArcade = NtosArcade;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosAtmos.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/NtosAtmos.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosAtmos = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosAtmos = function NtosAtmos(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var AirTemp = data.AirTemp,
      AirPressure = data.AirPressure;
  var gases = (0, _fp.flow)([(0, _collections.filter)(function (gas) {
    return gas.percentage >= 0.01;
  }), (0, _collections.sortBy)(function (gas) {
    return -gas.percentage;
  })])(data.AirData || []);
  var gasMaxPercentage = Math.max.apply(Math, [1].concat(gases.map(function (gas) {
    return gas.percentage;
  })));
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 300,
    "height": 350,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Temperature",
            children: [AirTemp, "\xB0C"]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Pressure",
            children: [AirPressure, " kPa"]
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: gases.map(function (gas) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": (0, _constants.getGasLabel)(gas.name),
              children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
                "color": (0, _constants.getGasColor)(gas.name),
                "value": gas.percentage,
                "minValue": 0,
                "maxValue": gasMaxPercentage,
                children: (0, _math.toFixed)(gas.percentage, 2) + '%'
              })
            }, gas.name);
          })
        })
      })]
    })
  });
};

exports.NtosAtmos = NtosAtmos;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosBountyConsole.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/NtosBountyConsole.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosBountyConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosBountyConsole = function NtosBountyConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$bountydata = data.bountydata,
      bountydata = _data$bountydata === void 0 ? [] : _data$bountydata;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 750,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": (0, _inferno.createComponentVNode)(2, BountyHeader),
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "print",
          "content": "Print Bounty List",
          "onClick": function () {
            function onClick() {
              return act('Print');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          "border": true,
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            "bold": true,
            "italic": true,
            "color": "label",
            "fontSize": 1.25,
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Bounty Object"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Description"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Progress"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Value"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "p": 1,
              "textAlign": "center",
              children: "Claim"
            })]
          }), bountydata.map(function (bounty) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              "backgroundColor": bounty.priority === 1 ? 'rgba(252, 152, 3, 0.25)' : '',
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "p": 1,
                children: bounty.name
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "italic": true,
                "textAlign": "center",
                "p": 1,
                children: bounty.description
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "p": 1,
                "textAlign": "center",
                children: [bounty.priority === 1 ? (0, _inferno.createComponentVNode)(2, _components.Box, {
                  children: "High Priority"
                }) : "", bounty.completion_string]
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "p": 1,
                "textAlign": "center",
                children: bounty.reward_string
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                "p": 1,
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "fluid": true,
                  "textAlign": "center",
                  "icon": bounty.claimed === 1 ? "check" : "",
                  "content": bounty.claimed === 1 ? "Claimed" : "Claim",
                  "disabled": bounty.claimed === 1,
                  "color": bounty.can_claim === 1 ? 'green' : 'red',
                  "onClick": function () {
                    function onClick() {
                      return act('ClaimBounty', {
                        bounty: bounty.bounty_ref
                      });
                    }

                    return onClick;
                  }()
                })
              })]
            }, bounty.name);
          })]
        })
      })
    })
  });
};

exports.NtosBountyConsole = NtosBountyConsole;

var BountyHeader = function BountyHeader(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var stored_cash = data.stored_cash;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    "bold": true,
    children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
      "value": stored_cash,
      "format": function () {
        function format(value) {
          return (0, _format.formatMoney)(value);
        }

        return format;
      }()
    }), ' credits']
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/NtosCard.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/NtosCard.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosCardContent = exports.NtosCard = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _AccessList = __webpack_require__(/*! ./common/AccessList */ "./packages/tgui/interfaces/common/AccessList.js");

var NtosCard = function NtosCard(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 450,
    "height": 520,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, NtosCardContent)
    })
  });
};

exports.NtosCard = NtosCard;

var NtosCardContent = function NtosCardContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _useLocalState = (0, _backend.useLocalState)(context, 'tab', 1),
      tab = _useLocalState[0],
      setTab = _useLocalState[1];

  var authenticated = data.authenticated,
      _data$regions = data.regions,
      regions = _data$regions === void 0 ? [] : _data$regions,
      _data$access_on_card = data.access_on_card,
      access_on_card = _data$access_on_card === void 0 ? [] : _data$access_on_card,
      _data$jobs = data.jobs,
      jobs = _data$jobs === void 0 ? {} : _data$jobs,
      id_rank = data.id_rank,
      id_owner = data.id_owner,
      has_id = data.has_id,
      have_printer = data.have_printer,
      have_id_slot = data.have_id_slot,
      id_name = data.id_name;

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'department', Object.keys(jobs)[0]),
      selectedDepartment = _useLocalState2[0],
      setSelectedDepartment = _useLocalState2[1];

  if (!have_id_slot) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "This program requires an ID slot in order to function"
    });
  }

  var departmentJobs = jobs[selectedDepartment] || [];
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": has_id && authenticated ? (0, _inferno.createComponentVNode)(2, _components.Input, {
      "value": id_owner,
      "width": "250px",
      "onInput": function () {
        function onInput(e, value) {
          return act('PRG_edit', {
            name: value
          });
        }

        return onInput;
      }()
    }) : id_owner || 'No Card Inserted',
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "print",
      "content": "Print",
      "disabled": !have_printer || !has_id,
      "onClick": function () {
        function onClick() {
          return act('PRG_print');
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": authenticated ? "sign-out-alt" : "sign-in-alt",
      "content": authenticated ? "Log Out" : "Log In",
      "color": authenticated ? "bad" : "good",
      "onClick": function () {
        function onClick() {
          act(authenticated ? 'PRG_logout' : 'PRG_authenticate');
        }

        return onClick;
      }()
    })], 4),
    children: (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "icon": "eject",
      "content": id_name,
      "onClick": function () {
        function onClick() {
          return act('PRG_eject');
        }

        return onClick;
      }()
    })
  }), !!has_id && !!authenticated && (0, _inferno.createComponentVNode)(2, _components.Box, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
        "selected": tab === 1,
        "onClick": function () {
          function onClick() {
            return setTab(1);
          }

          return onClick;
        }(),
        children: "Access"
      }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
        "selected": tab === 2,
        "onClick": function () {
          function onClick() {
            return setTab(2);
          }

          return onClick;
        }(),
        children: "Jobs"
      })]
    }), tab === 1 && (0, _inferno.createComponentVNode)(2, _AccessList.AccessList, {
      "accesses": regions,
      "selectedList": access_on_card,
      "accessMod": function () {
        function accessMod(ref) {
          return act('PRG_access', {
            access_target: ref
          });
        }

        return accessMod;
      }(),
      "grantAll": function () {
        function grantAll() {
          return act('PRG_grantall');
        }

        return grantAll;
      }(),
      "denyAll": function () {
        function denyAll() {
          return act('PRG_denyall');
        }

        return denyAll;
      }(),
      "grantDep": function () {
        function grantDep(dep) {
          return act('PRG_grantregion', {
            region: dep
          });
        }

        return grantDep;
      }(),
      "denyDep": function () {
        function denyDep(dep) {
          return act('PRG_denyregion', {
            region: dep
          });
        }

        return denyDep;
      }()
    }), tab === 2 && (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": id_rank,
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
        "icon": "exclamation-triangle",
        "content": "Terminate",
        "color": "bad",
        "onClick": function () {
          function onClick() {
            return act('PRG_terminate');
          }

          return onClick;
        }()
      }),
      children: [(0, _inferno.createComponentVNode)(2, _components.Button.Input, {
        "fluid": true,
        "content": "Custom...",
        "onCommit": function () {
          function onCommit(e, value) {
            return act('PRG_assign', {
              assign_target: 'Custom',
              custom_name: value
            });
          }

          return onCommit;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
            "vertical": true,
            children: Object.keys(jobs).map(function (department) {
              return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
                "selected": department === selectedDepartment,
                "onClick": function () {
                  function onClick() {
                    return setSelectedDepartment(department);
                  }

                  return onClick;
                }(),
                children: department
              }, department);
            })
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          children: departmentJobs.map(function (job) {
            return (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "content": job.display_name,
              "onClick": function () {
                function onClick() {
                  return act('PRG_assign', {
                    assign_target: job.job
                  });
                }

                return onClick;
              }()
            }, job.job);
          })
        })]
      })]
    })]
  })], 0);
};

exports.NtosCardContent = NtosCardContent;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosConfiguration.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/NtosConfiguration.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosConfiguration = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosConfiguration = function NtosConfiguration(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var PC_device_theme = data.PC_device_theme,
      power_usage = data.power_usage,
      battery_exists = data.battery_exists,
      _data$battery = data.battery,
      battery = _data$battery === void 0 ? {} : _data$battery,
      disk_size = data.disk_size,
      disk_used = data.disk_used,
      _data$hardware = data.hardware,
      hardware = _data$hardware === void 0 ? [] : _data$hardware;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "theme": PC_device_theme,
    "width": 420,
    "height": 630,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Power Supply",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "bold": true,
          "mr": 1,
          children: ["Power Draw: ", power_usage, "W"]
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Battery Status",
            "color": !battery_exists && 'average',
            children: battery_exists ? (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": battery.charge,
              "minValue": 0,
              "maxValue": battery.max,
              "ranges": {
                good: [battery.max / 2, Infinity],
                average: [battery.max / 4, battery.max / 2],
                bad: [-Infinity, battery.max / 4]
              },
              children: [battery.charge, " / ", battery.max]
            }) : 'Not Available'
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "File System",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": disk_used,
          "minValue": 0,
          "maxValue": disk_size,
          "color": "good",
          children: [disk_used, " GQ / ", disk_size, " GQ"]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Hardware Components",
        children: hardware.map(function (component) {
          return (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": component.name,
            "level": 2,
            "buttons": (0, _inferno.createFragment)([!component.critical && (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "content": "Enabled",
              "checked": component.enabled,
              "mr": 1,
              "onClick": function () {
                function onClick() {
                  return act('PC_toggle_component', {
                    name: component.name
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "bold": true,
              "mr": 1,
              children: ["Power Usage: ", component.powerusage, "W"]
            })], 0),
            children: component.desc
          }, component.name);
        })
      })]
    })
  });
};

exports.NtosConfiguration = NtosConfiguration;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosCrewManifest.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/NtosCrewManifest.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosCrewManifest = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosCrewManifest = function NtosCrewManifest(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var have_printer = data.have_printer,
      _data$manifest = data.manifest,
      manifest = _data$manifest === void 0 ? {} : _data$manifest;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 400,
    "height": 480,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Crew Manifest",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "print",
          "content": "Print",
          "disabled": !have_printer,
          "onClick": function () {
            function onClick() {
              return act('PRG_print');
            }

            return onClick;
          }()
        }),
        children: (0, _collections.map)(function (entries, department) {
          return (0, _inferno.createComponentVNode)(2, _components.Section, {
            "level": 2,
            "title": department,
            children: (0, _inferno.createComponentVNode)(2, _components.Table, {
              children: entries.map(function (entry) {
                return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
                  "className": "candystripe",
                  children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                    "bold": true,
                    children: entry.name
                  }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                    children: ["(", entry.rank, ")"]
                  })]
                }, entry.name);
              })
            })
          }, department);
        })(manifest)
      })
    })
  });
};

exports.NtosCrewManifest = NtosCrewManifest;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosCyborgRemoteMonitor.js":
/*!*************************************************************!*\
  !*** ./packages/tgui/interfaces/NtosCyborgRemoteMonitor.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosCyborgRemoteMonitorContent = exports.NtosCyborgRemoteMonitor = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosCyborgRemoteMonitor = function NtosCyborgRemoteMonitor(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 600,
    "height": 800,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, NtosCyborgRemoteMonitorContent)
    })
  });
};

exports.NtosCyborgRemoteMonitor = NtosCyborgRemoteMonitor;

var NtosCyborgRemoteMonitorContent = function NtosCyborgRemoteMonitorContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var card = data.card,
      _data$cyborgs = data.cyborgs,
      cyborgs = _data$cyborgs === void 0 ? [] : _data$cyborgs;

  if (!cyborgs.length) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No cyborg units detected."
    });
  }

  return (0, _inferno.createFragment)([!card && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
    children: "Certain features require an ID card login."
  }), cyborgs.map(function (cyborg) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": cyborg.name,
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "terminal",
        "content": "Send Message",
        "color": "blue",
        "disabled": !card,
        "onClick": function () {
          function onClick() {
            return act('messagebot', {
              ref: cyborg.ref
            });
          }

          return onClick;
        }()
      }),
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Status",
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": cyborg.status ? 'bad' : cyborg.locked_down ? 'average' : 'good',
            children: cyborg.status ? "Not Responding" : cyborg.locked_down ? "Locked Down" : cyborg.shell_discon ? "Nominal/Disconnected" : "Nominal"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Charge",
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": cyborg.charge <= 30 ? 'bad' : cyborg.charge <= 70 ? 'average' : 'good',
            children: typeof cyborg.charge === 'number' ? cyborg.charge + "%" : "Not Found"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Module",
          children: cyborg.module
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Upgrades",
          children: cyborg.upgrades
        })]
      })
    }, cyborg.ref);
  })], 0);
};

exports.NtosCyborgRemoteMonitorContent = NtosCyborgRemoteMonitorContent;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosCyborgRemoteMonitorSyndicate.js":
/*!**********************************************************************!*\
  !*** ./packages/tgui/interfaces/NtosCyborgRemoteMonitorSyndicate.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosCyborgRemoteMonitorSyndicate = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _NtosCyborgRemoteMonitor = __webpack_require__(/*! ./NtosCyborgRemoteMonitor */ "./packages/tgui/interfaces/NtosCyborgRemoteMonitor.js");

var NtosCyborgRemoteMonitorSyndicate = function NtosCyborgRemoteMonitorSyndicate(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 600,
    "height": 800,
    "theme": "syndicate",
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _NtosCyborgRemoteMonitor.NtosCyborgRemoteMonitorContent)
    })
  });
};

exports.NtosCyborgRemoteMonitorSyndicate = NtosCyborgRemoteMonitorSyndicate;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosFileManager.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/NtosFileManager.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosFileManager = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosFileManager = function NtosFileManager(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var PC_device_theme = data.PC_device_theme,
      usbconnected = data.usbconnected,
      _data$files = data.files,
      files = _data$files === void 0 ? [] : _data$files,
      _data$usbfiles = data.usbfiles,
      usbfiles = _data$usbfiles === void 0 ? [] : _data$usbfiles;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "resizable": true,
    "theme": PC_device_theme,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, FileTable, {
          "files": files,
          "usbconnected": usbconnected,
          "onUpload": function () {
            function onUpload(file) {
              return act('PRG_copytousb', {
                name: file
              });
            }

            return onUpload;
          }(),
          "onDelete": function () {
            function onDelete(file) {
              return act('PRG_deletefile', {
                name: file
              });
            }

            return onDelete;
          }(),
          "onRename": function () {
            function onRename(file, newName) {
              return act('PRG_rename', {
                name: file,
                new_name: newName
              });
            }

            return onRename;
          }(),
          "onDuplicate": function () {
            function onDuplicate(file) {
              return act('PRG_clone', {
                file: file
              });
            }

            return onDuplicate;
          }()
        })
      }), usbconnected && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Data Disk",
        children: (0, _inferno.createComponentVNode)(2, FileTable, {
          "usbmode": true,
          "files": usbfiles,
          "usbconnected": usbconnected,
          "onUpload": function () {
            function onUpload(file) {
              return act('PRG_copyfromusb', {
                name: file
              });
            }

            return onUpload;
          }(),
          "onDelete": function () {
            function onDelete(file) {
              return act('PRG_deletefile', {
                name: file
              });
            }

            return onDelete;
          }(),
          "onRename": function () {
            function onRename(file, newName) {
              return act('PRG_rename', {
                name: file,
                new_name: newName
              });
            }

            return onRename;
          }(),
          "onDuplicate": function () {
            function onDuplicate(file) {
              return act('PRG_clone', {
                file: file
              });
            }

            return onDuplicate;
          }()
        })
      })]
    })
  });
};

exports.NtosFileManager = NtosFileManager;

var FileTable = function FileTable(props) {
  var _props$files = props.files,
      files = _props$files === void 0 ? [] : _props$files,
      usbconnected = props.usbconnected,
      usbmode = props.usbmode,
      onUpload = props.onUpload,
      onDelete = props.onDelete,
      onRename = props.onRename;
  return (0, _inferno.createComponentVNode)(2, _components.Table, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
      "header": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        children: "File"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        children: "Type"
      }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
        "collapsing": true,
        children: "Size"
      })]
    }), files.map(function (file) {
      return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        "className": "candystripe",
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: !file.undeletable ? (0, _inferno.createComponentVNode)(2, _components.Button.Input, {
            "fluid": true,
            "content": file.name,
            "currentValue": file.name,
            "tooltip": "Rename",
            "onCommit": function () {
              function onCommit(e, value) {
                return onRename(file.name, value);
              }

              return onCommit;
            }()
          }) : file.name
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: file.type
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: file.size
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          children: !file.undeletable && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
            "icon": "trash",
            "confirmIcon": "times",
            "confirmContent": "",
            "tooltip": "Delete",
            "onClick": function () {
              function onClick() {
                return onDelete(file.name);
              }

              return onClick;
            }()
          }), !!usbconnected && (usbmode ? (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "download",
            "tooltip": "Download",
            "onClick": function () {
              function onClick() {
                return onUpload(file.name);
              }

              return onClick;
            }()
          }) : (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "upload",
            "tooltip": "Upload",
            "onClick": function () {
              function onClick() {
                return onUpload(file.name);
              }

              return onClick;
            }()
          }))], 0)
        })]
      }, file.name);
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/NtosJobManager.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/NtosJobManager.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosJobManagerContent = exports.NtosJobManager = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosJobManager = function NtosJobManager(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 400,
    "height": 620,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, NtosJobManagerContent)
    })
  });
};

exports.NtosJobManager = NtosJobManager;

var NtosJobManagerContent = function NtosJobManagerContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var authed = data.authed,
      cooldown = data.cooldown,
      _data$slots = data.slots,
      slots = _data$slots === void 0 ? [] : _data$slots,
      _data$prioritized = data.prioritized,
      prioritized = _data$prioritized === void 0 ? [] : _data$prioritized;

  if (!authed) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "Current ID does not have access permissions to change job slots."
    });
  }

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: [cooldown > 0 && (0, _inferno.createComponentVNode)(2, _components.Dimmer, {
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "bold": true,
        "textAlign": "center",
        "fontSize": "20px",
        children: ["On Cooldown: ", cooldown, "s"]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        "header": true,
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: "Prioritized"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: "Slots"
        })]
      }), slots.map(function (slot) {
        return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          "className": "candystripe",
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "bold": true,
            children: (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "fluid": true,
              "content": slot.title,
              "disabled": slot.total <= 0,
              "checked": slot.total > 0 && prioritized.includes(slot.title),
              "onClick": function () {
                function onClick() {
                  return act('PRG_priority', {
                    target: slot.title
                  });
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            children: [slot.current, " / ", slot.total]
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Open",
              "disabled": !slot.status_open,
              "onClick": function () {
                function onClick() {
                  return act('PRG_open_job', {
                    target: slot.title
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Close",
              "disabled": !slot.status_close,
              "onClick": function () {
                function onClick() {
                  return act('PRG_close_job', {
                    target: slot.title
                  });
                }

                return onClick;
              }()
            })]
          })]
        }, slot.title);
      })]
    })]
  });
};

exports.NtosJobManagerContent = NtosJobManagerContent;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosMain.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/NtosMain.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosMain = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var PROGRAM_ICONS = {
  compconfig: 'cog',
  ntndownloader: 'download',
  filemanager: 'folder',
  smmonitor: 'radiation',
  alarmmonitor: 'bell',
  cardmod: 'id-card',
  arcade: 'gamepad',
  ntnrc_client: 'comment-alt',
  nttransfer: 'exchange-alt',
  powermonitor: 'plug',
  job_manage: 'address-book',
  crewmani: 'clipboard-list',
  robocontrol: 'robot',
  atmosscan: 'thermometer-half',
  shipping: 'tags'
};

var NtosMain = function NtosMain(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var device_theme = data.device_theme,
      _data$programs = data.programs,
      programs = _data$programs === void 0 ? [] : _data$programs,
      has_light = data.has_light,
      light_on = data.light_on,
      comp_light_color = data.comp_light_color,
      _data$removable_media = data.removable_media,
      removable_media = _data$removable_media === void 0 ? [] : _data$removable_media,
      _data$login = data.login,
      login = _data$login === void 0 ? [] : _data$login;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "title": device_theme === 'syndicate' && 'Syndix Main Menu' || 'NtOS Main Menu',
    "theme": device_theme,
    "width": 400,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [!!has_light && (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "width": "144px",
          "icon": "lightbulb",
          "selected": light_on,
          "onClick": function () {
            function onClick() {
              return act('PC_toggle_light');
            }

            return onClick;
          }(),
          children: ["Flashlight: ", light_on ? 'ON' : 'OFF']
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "ml": 1,
          "onClick": function () {
            function onClick() {
              return act('PC_light_color');
            }

            return onClick;
          }(),
          children: ["Color:", (0, _inferno.createComponentVNode)(2, _components.ColorBox, {
            "ml": 1,
            "color": comp_light_color
          })]
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "User Login",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject ID",
          "disabled": !login.IDName,
          "onClick": function () {
            function onClick() {
              return act('PC_Eject_Disk', {
                name: "ID"
              });
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            children: ["ID Name: ", login.IDName]
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            children: ["Assignment: ", login.IDJob]
          })]
        })
      }), !!removable_media.length && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Media Eject",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: removable_media.map(function (device) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "fluid": true,
                  "color": "transparent",
                  "icon": "eject",
                  "content": device,
                  "onClick": function () {
                    function onClick() {
                      return act('PC_Eject_Disk', {
                        name: device
                      });
                    }

                    return onClick;
                  }()
                })
              })
            }, device);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Programs",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: programs.map(function (program) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "fluid": true,
                  "color": "transparent",
                  "icon": PROGRAM_ICONS[program.name] || 'window-maximize-o',
                  "content": program.desc,
                  "onClick": function () {
                    function onClick() {
                      return act('PC_runprogram', {
                        name: program.name
                      });
                    }

                    return onClick;
                  }()
                })
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                "width": "18px",
                children: !!program.running && (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "color": "transparent",
                  "icon": "times",
                  "tooltip": "Close program",
                  "tooltipPosition": "left",
                  "onClick": function () {
                    function onClick() {
                      return act('PC_killprogram', {
                        name: program.name
                      });
                    }

                    return onClick;
                  }()
                })
              })]
            }, program.name);
          })
        })
      })]
    })
  });
};

exports.NtosMain = NtosMain;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosNetChat.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/NtosNetChat.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosNetChat = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosNetChat = function NtosNetChat(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var can_admin = data.can_admin,
      adminmode = data.adminmode,
      authed = data.authed,
      username = data.username,
      active_channel = data.active_channel,
      is_operator = data.is_operator,
      _data$all_channels = data.all_channels,
      all_channels = _data$all_channels === void 0 ? [] : _data$all_channels,
      _data$clients = data.clients,
      clients = _data$clients === void 0 ? [] : _data$clients,
      _data$messages = data.messages,
      messages = _data$messages === void 0 ? [] : _data$messages;
  var in_channel = active_channel !== null;
  var authorized = authed || adminmode;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 900,
    "height": 675,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "height": "600px",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          "height": "580px",
          children: (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "verticalAlign": "top",
              "style": {
                width: '200px'
              },
              children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
                "height": "537px",
                "overflowY": "scroll",
                children: [(0, _inferno.createComponentVNode)(2, _components.Button.Input, {
                  "fluid": true,
                  "content": "New Channel...",
                  "onCommit": function () {
                    function onCommit(e, value) {
                      return act('PRG_newchannel', {
                        new_channel_name: value
                      });
                    }

                    return onCommit;
                  }()
                }), all_channels.map(function (channel) {
                  return (0, _inferno.createComponentVNode)(2, _components.Button, {
                    "fluid": true,
                    "content": channel.chan,
                    "selected": channel.id === active_channel,
                    "color": "transparent",
                    "onClick": function () {
                      function onClick() {
                        return act('PRG_joinchannel', {
                          id: channel.id
                        });
                      }

                      return onClick;
                    }()
                  }, channel.chan);
                })]
              }), (0, _inferno.createComponentVNode)(2, _components.Button.Input, {
                "fluid": true,
                "mt": 1,
                "content": username + '...',
                "currentValue": username,
                "onCommit": function () {
                  function onCommit(e, value) {
                    return act('PRG_changename', {
                      new_name: value
                    });
                  }

                  return onCommit;
                }()
              }), !!can_admin && (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "bold": true,
                "content": "ADMIN MODE: " + (adminmode ? 'ON' : 'OFF'),
                "color": adminmode ? 'bad' : 'good',
                "onClick": function () {
                  function onClick() {
                    return act('PRG_toggleadmin');
                  }

                  return onClick;
                }()
              })]
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
                "height": "560px",
                "overflowY": "scroll",
                children: in_channel && (authorized ? messages.map(function (message) {
                  return (0, _inferno.createComponentVNode)(2, _components.Box, {
                    children: message.msg
                  }, message.msg);
                }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
                  "textAlign": "center",
                  children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
                    "name": "exclamation-triangle",
                    "mt": 4,
                    "fontSize": "40px"
                  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
                    "mt": 1,
                    "bold": true,
                    "fontSize": "18px",
                    children: "THIS CHANNEL IS PASSWORD PROTECTED"
                  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
                    "mt": 1,
                    children: "INPUT PASSWORD TO ACCESS"
                  })]
                }))
              }), (0, _inferno.createComponentVNode)(2, _components.Input, {
                "fluid": true,
                "selfClear": true,
                "mt": 1,
                "onEnter": function () {
                  function onEnter(e, value) {
                    return act('PRG_speak', {
                      message: value
                    });
                  }

                  return onEnter;
                }()
              })]
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "verticalAlign": "top",
              "style": {
                width: '150px'
              },
              children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
                "height": "477px",
                "overflowY": "scroll",
                children: clients.map(function (client) {
                  return (0, _inferno.createComponentVNode)(2, _components.Box, {
                    children: client.name
                  }, client.name);
                })
              }), in_channel && authorized && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button.Input, {
                "fluid": true,
                "content": "Save log...",
                "defaultValue": "new_log",
                "onCommit": function () {
                  function onCommit(e, value) {
                    return act('PRG_savelog', {
                      log_name: value
                    });
                  }

                  return onCommit;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
                "fluid": true,
                "content": "Leave Channel",
                "onClick": function () {
                  function onClick() {
                    return act('PRG_leavechannel');
                  }

                  return onClick;
                }()
              })], 4), !!is_operator && authed && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
                "fluid": true,
                "content": "Delete Channel",
                "onClick": function () {
                  function onClick() {
                    return act('PRG_deletechannel');
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button.Input, {
                "fluid": true,
                "content": "Rename Channel...",
                "onCommit": function () {
                  function onCommit(e, value) {
                    return act('PRG_renamechannel', {
                      new_name: value
                    });
                  }

                  return onCommit;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button.Input, {
                "fluid": true,
                "content": "Set Password...",
                "onCommit": function () {
                  function onCommit(e, value) {
                    return act('PRG_setpassword', {
                      new_password: value
                    });
                  }

                  return onCommit;
                }()
              })], 4)]
            })]
          })
        })
      })
    })
  });
};

exports.NtosNetChat = NtosNetChat;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosNetDos.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/NtosNetDos.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosNetDosContent = exports.NtosNetDos = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosNetDos = function NtosNetDos(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 400,
    "height": 250,
    "theme": "syndicate",
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      children: (0, _inferno.createComponentVNode)(2, NtosNetDosContent)
    })
  });
};

exports.NtosNetDos = NtosNetDos;

var NtosNetDosContent = function NtosNetDosContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$relays = data.relays,
      relays = _data$relays === void 0 ? [] : _data$relays,
      focus = data.focus,
      target = data.target,
      speed = data.speed,
      overload = data.overload,
      capacity = data.capacity,
      error = data.error;

  if (error) {
    return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: error
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "content": "Reset",
      "textAlign": "center",
      "onClick": function () {
        function onClick() {
          return act('PRG_reset');
        }

        return onClick;
      }()
    })], 4);
  }

  var generate10String = function generate10String(length) {
    var outString = "";
    var factor = overload / capacity;

    while (outString.length < length) {
      if (Math.random() > factor) {
        outString += "0";
      } else {
        outString += "1";
      }
    }

    return outString;
  };

  var lineLength = 45;

  if (target) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "fontFamily": "monospace",
      "textAlign": "center",
      children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
        children: ["CURRENT SPEED: ", speed, " GQ/s"]
      }), (0, _inferno.createComponentVNode)(2, _components.Box, {
        children: generate10String(lineLength)
      }), (0, _inferno.createComponentVNode)(2, _components.Box, {
        children: generate10String(lineLength)
      }), (0, _inferno.createComponentVNode)(2, _components.Box, {
        children: generate10String(lineLength)
      }), (0, _inferno.createComponentVNode)(2, _components.Box, {
        children: generate10String(lineLength)
      }), (0, _inferno.createComponentVNode)(2, _components.Box, {
        children: generate10String(lineLength)
      })]
    });
  }

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Target",
        children: relays.map(function (relay) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": relay.id,
            "selected": focus === relay.id,
            "onClick": function () {
              function onClick() {
                return act('PRG_target_relay', {
                  targid: relay.id
                });
              }

              return onClick;
            }()
          }, relay.id);
        })
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "bold": true,
      "content": "EXECUTE",
      "color": "bad",
      "textAlign": "center",
      "disabled": !focus,
      "mt": 1,
      "onClick": function () {
        function onClick() {
          return act('PRG_execute');
        }

        return onClick;
      }()
    })]
  });
};

exports.NtosNetDosContent = NtosNetDosContent;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosNetDownloader.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/NtosNetDownloader.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosNetDownloader = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosNetDownloader = function NtosNetDownloader(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var PC_device_theme = data.PC_device_theme,
      disk_size = data.disk_size,
      disk_used = data.disk_used,
      _data$downloadable_pr = data.downloadable_programs,
      downloadable_programs = _data$downloadable_pr === void 0 ? [] : _data$downloadable_pr,
      error = data.error,
      _data$hacked_programs = data.hacked_programs,
      hacked_programs = _data$hacked_programs === void 0 ? [] : _data$hacked_programs,
      hackedavailable = data.hackedavailable;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "theme": PC_device_theme,
    "width": 480,
    "height": 735,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [!!error && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          "mb": 1,
          children: error
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Reset",
          "onClick": function () {
            function onClick() {
              return act('PRG_reseterror');
            }

            return onClick;
          }()
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Disk usage",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": disk_used,
              "minValue": 0,
              "maxValue": disk_size,
              children: disk_used + " GQ / " + disk_size + " GQ"
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: downloadable_programs.map(function (program) {
          return (0, _inferno.createComponentVNode)(2, Program, {
            "program": program
          }, program.filename);
        })
      }), !!hackedavailable && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "UNKNOWN Software Repository",
        children: [(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          "mb": 1,
          children: "Please note that Nanotrasen does not recommend download of software from non-official servers."
        }), hacked_programs.map(function (program) {
          return (0, _inferno.createComponentVNode)(2, Program, {
            "program": program
          }, program.filename);
        })]
      })]
    })
  });
};

exports.NtosNetDownloader = NtosNetDownloader;

var Program = function Program(props, context) {
  var program = props.program;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var disk_size = data.disk_size,
      disk_used = data.disk_used,
      downloadcompletion = data.downloadcompletion,
      downloading = data.downloading,
      downloadname = data.downloadname,
      downloadsize = data.downloadsize;
  var disk_free = disk_size - disk_used;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 3,
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
      "align": "baseline",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "bold": true,
        "grow": 1,
        children: program.filedesc
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "color": "label",
        "nowrap": true,
        children: [program.size, " GQ"]
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "ml": 2,
        "width": "94px",
        "textAlign": "center",
        children: program.filename === downloadname && (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "color": "green",
          "minValue": 0,
          "maxValue": downloadsize,
          "value": downloadcompletion
        }) || (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "icon": "download",
          "content": "Download",
          "disabled": downloading || program.size > disk_free,
          "onClick": function () {
            function onClick() {
              return act('PRG_downloadfile', {
                filename: program.filename
              });
            }

            return onClick;
          }()
        })
      })]
    }), program.compatibility !== 'Compatible' && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 1,
      "italic": true,
      "fontSize": "12px",
      "position": "relative",
      children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
        "mx": 1,
        "color": "red",
        "name": "times"
      }), "Incompatible!"]
    }), program.size > disk_free && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 1,
      "italic": true,
      "fontSize": "12px",
      "position": "relative",
      children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
        "mx": 1,
        "color": "red",
        "name": "times"
      }), "Not enough disk space!"]
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "mt": 1,
      "italic": true,
      "color": "label",
      "fontSize": "12px",
      children: program.fileinfo
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/NtosNetMonitor.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/NtosNetMonitor.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosNetMonitor = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosNetMonitor = function NtosNetMonitor(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var ntnetrelays = data.ntnetrelays,
      ntnetstatus = data.ntnetstatus,
      config_softwaredownload = data.config_softwaredownload,
      config_peertopeer = data.config_peertopeer,
      config_communication = data.config_communication,
      config_systemcontrol = data.config_systemcontrol,
      idsalarm = data.idsalarm,
      idsstatus = data.idsstatus,
      ntnetmaxlogs = data.ntnetmaxlogs,
      maxlogs = data.maxlogs,
      minlogs = data.minlogs,
      _data$ntnetlogs = data.ntnetlogs,
      ntnetlogs = _data$ntnetlogs === void 0 ? [] : _data$ntnetlogs;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "WARNING: Disabling wireless transmitters when using a wireless device may prevent you from reenabling them!"
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Wireless Connectivity",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
          "icon": ntnetstatus ? 'power-off' : 'times',
          "content": ntnetstatus ? 'ENABLED' : 'DISABLED',
          "selected": ntnetstatus,
          "onClick": function () {
            function onClick() {
              return act('toggleWireless');
            }

            return onClick;
          }()
        }),
        children: ntnetrelays ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Active NTNet Relays",
            children: ntnetrelays
          })
        }) : "No Relays Connected"
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Firewall Configuration",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Software Downloads",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": config_softwaredownload ? 'power-off' : 'times',
              "content": config_softwaredownload ? 'ENABLED' : 'DISABLED',
              "selected": config_softwaredownload,
              "onClick": function () {
                function onClick() {
                  return act('toggle_function', {
                    id: "1"
                  });
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Peer to Peer Traffic",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": config_peertopeer ? 'power-off' : 'times',
              "content": config_peertopeer ? 'ENABLED' : 'DISABLED',
              "selected": config_peertopeer,
              "onClick": function () {
                function onClick() {
                  return act('toggle_function', {
                    id: "2"
                  });
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Communication Systems",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": config_communication ? 'power-off' : 'times',
              "content": config_communication ? 'ENABLED' : 'DISABLED',
              "selected": config_communication,
              "onClick": function () {
                function onClick() {
                  return act('toggle_function', {
                    id: "3"
                  });
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Remote System Control",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": config_systemcontrol ? 'power-off' : 'times',
              "content": config_systemcontrol ? 'ENABLED' : 'DISABLED',
              "selected": config_systemcontrol,
              "onClick": function () {
                function onClick() {
                  return act('toggle_function', {
                    id: "4"
                  });
                }

                return onClick;
              }()
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Security Systems",
        children: [!!idsalarm && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: "NETWORK INCURSION DETECTED"
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "italics": true,
          children: "Abnormal activity has been detected in the network. Check system logs for more information"
        })], 4), (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "IDS Status",
            "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": idsstatus ? 'power-off' : 'times',
              "content": idsstatus ? 'ENABLED' : 'DISABLED',
              "selected": idsstatus,
              "onClick": function () {
                function onClick() {
                  return act('toggleIDS');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "content": "Reset",
              "color": "bad",
              "onClick": function () {
                function onClick() {
                  return act('resetIDS');
                }

                return onClick;
              }()
            })], 4)
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Max Log Count",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": ntnetmaxlogs,
              "minValue": minlogs,
              "maxValue": maxlogs,
              "width": "39px",
              "onChange": function () {
                function onChange(e, value) {
                  return act('updatemaxlogs', {
                    new_number: value
                  });
                }

                return onChange;
              }()
            })
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "System Log",
          "level": 2,
          "buttons": (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
            "icon": "trash",
            "content": "Clear Logs",
            "onClick": function () {
              function onClick() {
                return act('purgelogs');
              }

              return onClick;
            }()
          }),
          children: ntnetlogs.map(function (log) {
            return (0, _inferno.createComponentVNode)(2, _components.Box, {
              "className": "candystripe",
              children: log.entry
            }, log.entry);
          })
        })]
      })]
    })
  });
};

exports.NtosNetMonitor = NtosNetMonitor;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosPowerMonitor.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/NtosPowerMonitor.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosPowerMonitor = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _PowerMonitor = __webpack_require__(/*! ./PowerMonitor */ "./packages/tgui/interfaces/PowerMonitor.js");

var NtosPowerMonitor = function NtosPowerMonitor() {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 550,
    "height": 700,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _PowerMonitor.PowerMonitorContent)
    })
  });
};

exports.NtosPowerMonitor = NtosPowerMonitor;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosRadar.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/NtosRadar.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosRadarContent = exports.NtosRadar = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _assets = __webpack_require__(/*! ../assets */ "./packages/tgui/assets.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosRadar = function NtosRadar(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 800,
    "height": 600,
    "theme": "ntos",
    children: (0, _inferno.createComponentVNode)(2, NtosRadarContent, {
      "sig_err": "Signal Lost"
    })
  });
};

exports.NtosRadar = NtosRadar;

var NtosRadarContent = function NtosRadarContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var selected = data.selected,
      _data$object = data.object,
      object = _data$object === void 0 ? [] : _data$object,
      _data$target = data.target,
      target = _data$target === void 0 ? [] : _data$target,
      scanning = data.scanning;
  var sig_err = props.sig_err;
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "direction": "row",
    "hight": "100%",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "position": "relative",
      "width": 20.5,
      "hight": "100%",
      children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
        "scrollable": true,
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "redo-alt",
            "content": scanning ? "Scanning..." : "Scan",
            "color": "blue",
            "disabled": scanning,
            "onClick": function () {
              function onClick() {
                return act('scan');
              }

              return onClick;
            }()
          }), !object.length && !scanning && (0, _inferno.createVNode)(1, "div", null, "No trackable signals found", 16), !scanning && object.map(function (object) {
            return (0, _inferno.createVNode)(1, "div", (0, _react.classes)(['Button', 'Button--fluid', 'Button--color--transparent', 'Button--ellipsis', object.ref === selected && 'Button--selected']), object.name, 0, {
              "title": object.name,
              "onClick": function () {
                function onClick() {
                  act('selecttarget', {
                    ref: object.ref
                  });
                }

                return onClick;
              }()
            }, object.dev);
          })]
        })
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "style": {
        'background-image': 'url("' + (0, _assets.resolveAsset)('ntosradarbackground.png') + '")',
        'background-position': 'center',
        'background-repeat': 'no-repeat',
        'top': '20px'
      },
      "position": "relative",
      "m": 1.5,
      "width": 45,
      "height": 45,
      children: Object.keys(target).length === 0 ? !!selected && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        "position": "absolute",
        "top": 20.6,
        "left": 1.35,
        "width": 42,
        "fontSize": "30px",
        "textAlign": "center",
        children: sig_err
      }) : !!target.userot && (0, _inferno.createComponentVNode)(2, _components.Box, {
        "as": "img",
        "src": (0, _assets.resolveAsset)(target.arrowstyle),
        "position": "absolute",
        "top": "20px",
        "left": "243px",
        "style": {
          'transform': "rotate(" + target.rot + "deg)"
        }
      }) || (0, _inferno.createComponentVNode)(2, _components.Icon, {
        "name": target.pointer,
        "position": "absolute",
        "size": 2,
        "color": target.color,
        "top": target.locy * 10 + 19 + 'px',
        "left": target.locx * 10 + 16 + 'px'
      })
    })]
  });
};

exports.NtosRadarContent = NtosRadarContent;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosRadarSyndicate.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/NtosRadarSyndicate.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosRadarSyndicate = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _NtosRadar = __webpack_require__(/*! ./NtosRadar */ "./packages/tgui/interfaces/NtosRadar.js");

var NtosRadarSyndicate = function NtosRadarSyndicate(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 800,
    "height": 600,
    "theme": "syndicate",
    children: (0, _inferno.createComponentVNode)(2, _NtosRadar.NtosRadarContent, {
      "sig_err": "Out of Range"
    })
  });
};

exports.NtosRadarSyndicate = NtosRadarSyndicate;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosRequestKiosk.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/NtosRequestKiosk.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosRequestKiosk = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _RequestKiosk = __webpack_require__(/*! ./RequestKiosk */ "./packages/tgui/interfaces/RequestKiosk.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosRequestKiosk = function NtosRequestKiosk(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 550,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _RequestKiosk.RequestKioskContent)
    })
  });
};

exports.NtosRequestKiosk = NtosRequestKiosk;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosRevelation.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/NtosRevelation.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosRevelation = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosRevelation = function NtosRevelation(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 400,
    "height": 250,
    "theme": "syndicate",
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Button.Input, {
          "fluid": true,
          "content": "Obfuscate Name...",
          "onCommit": function () {
            function onCommit(e, value) {
              return act('PRG_obfuscate', {
                new_name: value
              });
            }

            return onCommit;
          }(),
          "mb": 1
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Payload Status",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": data.armed ? 'ARMED' : 'DISARMED',
              "color": data.armed ? 'bad' : 'average',
              "onClick": function () {
                function onClick() {
                  return act('PRG_arm');
                }

                return onClick;
              }()
            })
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "bold": true,
          "content": "ACTIVATE",
          "textAlign": "center",
          "color": "bad",
          "disabled": !data.armed
        })]
      })
    })
  });
};

exports.NtosRevelation = NtosRevelation;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosRoboControl.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/NtosRoboControl.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosRoboControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var getMuleByRef = function getMuleByRef(mules, ref) {
  return mules == null ? void 0 : mules.find(function (mule) {
    return mule.mule_ref === ref;
  });
};

var NtosRoboControl = function NtosRoboControl(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var bots = data.bots,
      id_owner = data.id_owner,
      has_id = data.has_id;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 550,
    "height": 550,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Robot Control Console",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Id Card",
            children: [id_owner, !!has_id && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 2,
              "icon": "eject",
              "content": "Eject",
              "onClick": function () {
                function onClick() {
                  return act('ejectcard');
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Bots in range",
            children: data.botcount
          })]
        })
      }), bots == null ? void 0 : bots.map(function (robot) {
        return (0, _inferno.createComponentVNode)(2, RobotInfo, {
          "robot": robot
        }, robot.bot_ref);
      })]
    })
  });
};

exports.NtosRoboControl = NtosRoboControl;

var RobotInfo = function RobotInfo(props, context) {
  var robot = props.robot;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var mules = data.mules || []; // Get a mule object

  var mule = !!robot.mule_check && getMuleByRef(mules, robot.bot_ref); // Color based on type of a robot

  var color = robot.mule_check === 1 ? 'rgba(110, 75, 14, 1)' : 'rgba(74, 59, 140, 1)';
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": robot.name,
    "style": {
      border: "4px solid " + color
    },
    "buttons": mule && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "play",
      "tooltip": "Go to Destination.",
      "onClick": function () {
        function onClick() {
          return act('go', {
            robot: mule.mule_ref
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "pause",
      "tooltip": "Stop Moving.",
      "onClick": function () {
        function onClick() {
          return act('stop', {
            robot: mule.mule_ref
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "home",
      "tooltip": "Travel Home.",
      "tooltipPosition": "bottom-left",
      "onClick": function () {
        function onClick() {
          return act('home', {
            robot: mule.mule_ref
          });
        }

        return onClick;
      }()
    })], 4),
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "spacing": 1,
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        "basis": 0,
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Model",
            children: robot.model
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Location",
            children: robot.locat
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            children: robot.mode
          }), mule && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Loaded Cargo",
            children: data.load || "N/A"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Home",
            children: mule.home
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Destination",
            children: mule.dest || "N/A"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": mule.power,
              "minValue": 0,
              "maxValue": 100,
              "ranges": {
                good: [60, Infinity],
                average: [20, 60],
                bad: [-Infinity, 20]
              }
            })
          })], 4)]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "width": "150px",
        children: [mule && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Set Destination",
          "onClick": function () {
            function onClick() {
              return act('destination', {
                robot: mule.mule_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Set ID",
          "onClick": function () {
            function onClick() {
              return act('setid', {
                robot: mule.mule_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Set Home",
          "onClick": function () {
            function onClick() {
              return act('sethome', {
                robot: mule.mule_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Unload Cargo",
          "onClick": function () {
            function onClick() {
              return act('unload', {
                robot: mule.mule_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "content": "Auto Return",
          "checked": mule.autoReturn,
          "onClick": function () {
            function onClick() {
              return act('autoret', {
                robot: mule.mule_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "content": "Auto Pickup",
          "checked": mule.autoPickup,
          "onClick": function () {
            function onClick() {
              return act('autopick', {
                robot: mule.mule_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "content": "Delivery Report",
          "checked": mule.reportDelivery,
          "onClick": function () {
            function onClick() {
              return act('report', {
                robot: mule.mule_ref
              });
            }

            return onClick;
          }()
        })], 4), !mule && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Stop Patrol",
          "onClick": function () {
            function onClick() {
              return act('patroloff', {
                robot: robot.bot_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Start Patrol",
          "onClick": function () {
            function onClick() {
              return act('patrolon', {
                robot: robot.bot_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Summon",
          "onClick": function () {
            function onClick() {
              return act('summon', {
                robot: robot.bot_ref
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Eject PAi",
          "onClick": function () {
            function onClick() {
              return act('ejectpai', {
                robot: robot.bot_ref
              });
            }

            return onClick;
          }()
        })], 4)]
      })]
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/NtosShipping.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/NtosShipping.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosShipping = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var NtosShipping = function NtosShipping(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 450,
    "height": 350,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "NTOS Shipping Hub.",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject Id",
          "onClick": function () {
            function onClick() {
              return act('ejectid');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current User",
            children: data.current_user || "N/A"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Inserted Card",
            children: data.card_owner || "N/A"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Available Paper",
            children: data.has_printer ? data.paperamt : "N/A"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Profit on Sale",
            children: [data.barcode_split, "%"]
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Shipping Options",
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "id-card",
            "tooltip": "The currently ID card will become the current user.",
            "tooltipPosition": "right",
            "disabled": !data.has_id_slot,
            "onClick": function () {
              function onClick() {
                return act('selectid');
              }

              return onClick;
            }(),
            "content": "Set Current ID"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "print",
            "tooltip": "Print a barcode to use on a wrapped package.",
            "tooltipPosition": "right",
            "disabled": !data.has_printer || !data.current_user,
            "onClick": function () {
              function onClick() {
                return act('print');
              }

              return onClick;
            }(),
            "content": "Print Barcode"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "tags",
            "tooltip": "Set how much profit you'd like on your package.",
            "tooltipPosition": "right",
            "onClick": function () {
              function onClick() {
                return act('setsplit');
              }

              return onClick;
            }(),
            "content": "Set Profit Margin"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "sync-alt",
            "content": "Reset ID",
            "onClick": function () {
              function onClick() {
                return act('resetid');
              }

              return onClick;
            }()
          })
        })]
      })]
    })
  });
};

exports.NtosShipping = NtosShipping;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosStationAlertConsole.js":
/*!*************************************************************!*\
  !*** ./packages/tgui/interfaces/NtosStationAlertConsole.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosStationAlertConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _StationAlertConsole = __webpack_require__(/*! ./StationAlertConsole */ "./packages/tgui/interfaces/StationAlertConsole.js");

var NtosStationAlertConsole = function NtosStationAlertConsole() {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 315,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _StationAlertConsole.StationAlertConsoleContent)
    })
  });
};

exports.NtosStationAlertConsole = NtosStationAlertConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/NtosSupermatterMonitor.js":
/*!************************************************************!*\
  !*** ./packages/tgui/interfaces/NtosSupermatterMonitor.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosSupermatterMonitorContent = exports.NtosSupermatterMonitor = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var logScale = function logScale(value) {
  return Math.log2(16 + Math.max(0, value)) - 4;
};

var NtosSupermatterMonitor = function NtosSupermatterMonitor(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 600,
    "height": 350,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, NtosSupermatterMonitorContent)
    })
  });
};

exports.NtosSupermatterMonitor = NtosSupermatterMonitor;

var NtosSupermatterMonitorContent = function NtosSupermatterMonitorContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var active = data.active,
      SM_integrity = data.SM_integrity,
      SM_power = data.SM_power,
      SM_ambienttemp = data.SM_ambienttemp,
      SM_ambientpressure = data.SM_ambientpressure;

  if (!active) {
    return (0, _inferno.createComponentVNode)(2, SupermatterList);
  }

  var gases = (0, _fp.flow)([function (gases) {
    return gases.filter(function (gas) {
      return gas.amount >= 0.01;
    });
  }, (0, _collections.sortBy)(function (gas) {
    return -gas.amount;
  })])(data.gases || []);
  var gasMaxAmount = Math.max.apply(Math, [1].concat(gases.map(function (gas) {
    return gas.amount;
  })));
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "spacing": 1,
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "width": "270px",
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Metrics",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Integrity",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": SM_integrity / 100,
              "ranges": {
                good: [0.90, Infinity],
                average: [0.5, 0.90],
                bad: [-Infinity, 0.5]
              }
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Relative EER",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": SM_power,
              "minValue": 0,
              "maxValue": 5000,
              "ranges": {
                good: [-Infinity, 5000],
                average: [5000, 7000],
                bad: [7000, Infinity]
              },
              children: (0, _math.toFixed)(SM_power) + ' MeV/cm3'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Temperature",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": logScale(SM_ambienttemp),
              "minValue": 0,
              "maxValue": logScale(10000),
              "ranges": {
                teal: [-Infinity, logScale(80)],
                good: [logScale(80), logScale(373)],
                average: [logScale(373), logScale(1000)],
                bad: [logScale(1000), Infinity]
              },
              children: (0, _math.toFixed)(SM_ambienttemp) + ' K'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Pressure",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": logScale(SM_ambientpressure),
              "minValue": 0,
              "maxValue": logScale(50000),
              "ranges": {
                good: [logScale(1), logScale(300)],
                average: [-Infinity, logScale(1000)],
                bad: [logScale(1000), +Infinity]
              },
              children: (0, _math.toFixed)(SM_ambientpressure) + ' kPa'
            })
          })]
        })
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      "basis": 0,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Gases",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "arrow-left",
          "content": "Back",
          "onClick": function () {
            function onClick() {
              return act('PRG_clear');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: gases.map(function (gas) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": (0, _constants.getGasLabel)(gas.name),
              children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
                "color": (0, _constants.getGasColor)(gas.name),
                "value": gas.amount,
                "minValue": 0,
                "maxValue": gasMaxAmount,
                children: (0, _math.toFixed)(gas.amount, 2) + '%'
              })
            }, gas.name);
          })
        })
      })
    })]
  });
};

exports.NtosSupermatterMonitorContent = NtosSupermatterMonitorContent;

var SupermatterList = function SupermatterList(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _data$supermatters = data.supermatters,
      supermatters = _data$supermatters === void 0 ? [] : _data$supermatters;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Detected Supermatters",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "sync",
      "content": "Refresh",
      "onClick": function () {
        function onClick() {
          return act('PRG_refresh');
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: supermatters.map(function (sm) {
        return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: sm.uid + '. ' + sm.area_name
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            "color": "label",
            children: "Integrity:"
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            "width": "120px",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": sm.integrity / 100,
              "ranges": {
                good: [0.90, Infinity],
                average: [0.5, 0.90],
                bad: [-Infinity, 0.5]
              }
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Details",
              "onClick": function () {
                function onClick() {
                  return act('PRG_set', {
                    target: sm.uid
                  });
                }

                return onClick;
              }()
            })
          })]
        }, sm.uid);
      })
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/NtosTechweb.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/NtosTechweb.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NtosTechweb = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _Techweb = __webpack_require__(/*! ./Techweb.js */ "./packages/tgui/interfaces/Techweb.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _logging = __webpack_require__(/*! ../logging */ "./packages/tgui/logging.js");

var logger = (0, _logging.createLogger)('backend');

var NtosTechweb = function NtosTechweb(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      config = _useBackend.config,
      data = _useBackend.data,
      act = _useBackend.act;

  logger.log(config.AppTechweb);
  return (0, _inferno.createComponentVNode)(2, _Techweb.AppTechweb);
};

exports.NtosTechweb = NtosTechweb;

/***/ }),

/***/ "./packages/tgui/interfaces/NuclearBomb.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/NuclearBomb.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NuclearBomb = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

// This ui is so many manual overrides and !important tags
// and hand made width sets that changing pretty much anything
// is going to require a lot of tweaking it get it looking correct again
// I'm sorry, but it looks bangin
var NukeKeypad = function NukeKeypad(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act;

  var keypadKeys = [['1', '4', '7', 'C'], ['2', '5', '8', '0'], ['3', '6', '9', 'E']];
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "width": "185px",
    children: (0, _inferno.createComponentVNode)(2, _components.Grid, {
      "width": "1px",
      children: keypadKeys.map(function (keyColumn) {
        return (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: keyColumn.map(function (key) {
            return (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "bold": true,
              "mb": "6px",
              "content": key,
              "textAlign": "center",
              "fontSize": "40px",
              "lineHeight": 1.25,
              "width": "55px",
              "className": (0, _react.classes)(['NuclearBomb__Button', 'NuclearBomb__Button--keypad', 'NuclearBomb__Button--' + key]),
              "onClick": function () {
                function onClick() {
                  return act('keypad', {
                    digit: key
                  });
                }

                return onClick;
              }()
            }, key);
          })
        }, keyColumn[0]);
      })
    })
  });
};

var NuclearBomb = function NuclearBomb(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var anchored = data.anchored,
      disk_present = data.disk_present,
      status1 = data.status1,
      status2 = data.status2;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 442,
    "theme": "retro",
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "m": "6px",
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          "mb": "6px",
          "className": "NuclearBomb__displayBox",
          children: status1
        }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "mb": 1.5,
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "className": "NuclearBomb__displayBox",
              children: status2
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "eject",
              "fontSize": "24px",
              "lineHeight": 1,
              "textAlign": "center",
              "width": "43px",
              "ml": "6px",
              "mr": "3px",
              "mt": "3px",
              "className": "NuclearBomb__Button NuclearBomb__Button--keypad",
              "onClick": function () {
                function onClick() {
                  return act('eject_disk');
                }

                return onClick;
              }()
            })
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "ml": "3px",
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, NukeKeypad)
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "ml": "6px",
            "width": "129px",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "bold": true,
                "content": "ARM",
                "textAlign": "center",
                "fontSize": "28px",
                "lineHeight": 1.1,
                "mb": "6px",
                "className": "NuclearBomb__Button NuclearBomb__Button--C",
                "onClick": function () {
                  function onClick() {
                    return act('arm');
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "fluid": true,
                "bold": true,
                "content": "ANCHOR",
                "textAlign": "center",
                "fontSize": "28px",
                "lineHeight": 1.1,
                "className": "NuclearBomb__Button NuclearBomb__Button--E",
                "onClick": function () {
                  function onClick() {
                    return act('anchor');
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Box, {
                "textAlign": "center",
                "color": "#9C9987",
                "fontSize": "80px",
                children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
                  "name": "radiation"
                })
              }), (0, _inferno.createComponentVNode)(2, _components.Box, {
                "height": "80px",
                "className": "NuclearBomb__NTIcon"
              })]
            })
          })]
        })]
      })
    })
  });
};

exports.NuclearBomb = NuclearBomb;

/***/ }),

/***/ "./packages/tgui/interfaces/OperatingComputer.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/OperatingComputer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.OperatingComputer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var damageTypes = [{
  label: 'Brute',
  type: 'bruteLoss'
}, {
  label: 'Burn',
  type: 'fireLoss'
}, {
  label: 'Toxin',
  type: 'toxLoss'
}, {
  label: 'Respiratory',
  type: 'oxyLoss'
}];

var OperatingComputer = function OperatingComputer(props, context) {
  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 1),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 470,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === 1,
          "onClick": function () {
            function onClick() {
              return setTab(1);
            }

            return onClick;
          }(),
          children: "Patient State"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === 2,
          "onClick": function () {
            function onClick() {
              return setTab(2);
            }

            return onClick;
          }(),
          children: "Surgery Procedures"
        })]
      }), tab === 1 && (0, _inferno.createComponentVNode)(2, PatientStateView), tab === 2 && (0, _inferno.createComponentVNode)(2, SurgeryProceduresView)]
    })
  });
};

exports.OperatingComputer = OperatingComputer;

var PatientStateView = function PatientStateView(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var table = data.table,
      _data$procedures = data.procedures,
      procedures = _data$procedures === void 0 ? [] : _data$procedures,
      _data$patient = data.patient,
      patient = _data$patient === void 0 ? {} : _data$patient;

  if (!table) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No Table Detected"
    });
  }

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Patient State",
    children: patient && (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "State",
        "color": patient.statstate,
        children: patient.stat
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Blood Type",
        children: patient.blood_type
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Health",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": patient.health,
          "minValue": patient.minHealth,
          "maxValue": patient.maxHealth,
          "color": patient.health >= 0 ? 'good' : 'average',
          children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "value": patient.health
          })
        })
      }), damageTypes.map(function (type) {
        return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": patient.is_robotic_organism && type.label === 'Toxin' ? 'Corruption' : type.label,
          children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
            "value": patient[type.type] / patient.maxHealth,
            "color": "bad",
            children: (0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "value": patient[type.type]
            })
          })
        }, type.type);
      })]
    }) || 'No Patient Detected'
  }), procedures.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: "No Active Procedures"
  }), procedures.map(function (procedure) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": procedure.name,
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Next Step",
          children: [procedure.next_step, procedure.chems_needed && (0, _inferno.createFragment)([(0, _inferno.createVNode)(1, "b", null, "Required Chemicals:", 16), (0, _inferno.createVNode)(1, "br"), procedure.chems_needed], 0)]
        }), !!data.alternative_step && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Alternative Step",
          children: [procedure.alternative_step, procedure.alt_chems_needed && (0, _inferno.createFragment)([(0, _inferno.createVNode)(1, "b", null, "Required Chemicals:", 16), (0, _inferno.createVNode)(1, "br"), procedure.alt_chems_needed], 0)]
        })]
      })
    }, procedure.name);
  })], 0);
};

var SurgeryProceduresView = function SurgeryProceduresView(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _data$surgeries = data.surgeries,
      surgeries = _data$surgeries === void 0 ? [] : _data$surgeries;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Advanced Surgery Procedures",
    children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "download",
      "content": "Sync Research Database",
      "onClick": function () {
        function onClick() {
          return act('sync');
        }

        return onClick;
      }()
    }), surgeries.map(function (surgery) {
      return (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": surgery.name,
        "level": 2,
        children: surgery.desc
      }, surgery.name);
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Orbit.js":
/*!*******************************************!*\
  !*** ./packages/tgui/interfaces/Orbit.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Orbit = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _assets = __webpack_require__(/*! ../assets */ "./packages/tgui/assets.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var PATTERN_NUMBER = / \(([0-9]+)\)$/;

var searchFor = function searchFor(searchText) {
  return (0, _string.createSearch)(searchText, function (thing) {
    return thing.name;
  });
};

var compareString = function compareString(a, b) {
  return a < b ? -1 : a > b;
};

var compareNumberedText = function compareNumberedText(a, b) {
  var aName = a.name;
  var bName = b.name; // Check if aName and bName are the same except for a number at the end
  // e.g. Medibot (2) and Medibot (3)

  var aNumberMatch = aName.match(PATTERN_NUMBER);
  var bNumberMatch = bName.match(PATTERN_NUMBER);

  if (aNumberMatch && bNumberMatch && aName.replace(PATTERN_NUMBER, "") === bName.replace(PATTERN_NUMBER, "")) {
    var aNumber = parseInt(aNumberMatch[1], 10);
    var bNumber = parseInt(bNumberMatch[1], 10);
    return aNumber - bNumber;
  }

  return compareString(aName, bName);
};

var BasicSection = function BasicSection(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act;

  var searchText = props.searchText,
      source = props.source,
      title = props.title;
  var things = source.filter(searchFor(searchText));
  things.sort(compareNumberedText);
  return source.length > 0 && (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": title + " - (" + source.length + ")",
    children: things.map(function (thing) {
      return (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": thing.name,
        "onClick": function () {
          function onClick() {
            return act("orbit", {
              ref: thing.ref
            });
          }

          return onClick;
        }()
      }, thing.name);
    })
  });
};

var OrbitedButton = function OrbitedButton(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act;

  var color = props.color,
      thing = props.thing;
  return (0, _inferno.createComponentVNode)(2, _components.Button, {
    "color": color,
    "onClick": function () {
      function onClick() {
        return act("orbit", {
          ref: thing.ref
        });
      }

      return onClick;
    }(),
    children: [thing.name, thing.orbiters && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "ml": 1,
      children: ["(", thing.orbiters, " ", (0, _inferno.createComponentVNode)(2, _components.Box, {
        "as": "img",
        "src": (0, _assets.resolveAsset)('ghost.png'),
        "opacity": 0.7
      }), ")"]
    })]
  });
};

var Orbit = function Orbit(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var alive = data.alive,
      antagonists = data.antagonists,
      auto_observe = data.auto_observe,
      dead = data.dead,
      ghosts = data.ghosts,
      misc = data.misc,
      npcs = data.npcs;

  var _useLocalState = (0, _backend.useLocalState)(context, "searchText", ""),
      searchText = _useLocalState[0],
      setSearchText = _useLocalState[1];

  var collatedAntagonists = {};

  for (var _iterator = _createForOfIteratorHelperLoose(antagonists), _step; !(_step = _iterator()).done;) {
    var antagonist = _step.value;

    if (collatedAntagonists[antagonist.antag] === undefined) {
      collatedAntagonists[antagonist.antag] = [];
    }

    collatedAntagonists[antagonist.antag].push(antagonist);
  }

  var sortedAntagonists = Object.entries(collatedAntagonists);
  sortedAntagonists.sort(function (a, b) {
    return compareString(a[0], b[0]);
  });

  var orbitMostRelevant = function orbitMostRelevant(searchText) {
    for (var _i = 0, _arr = [sortedAntagonists.map(function (_ref) {
      var _ = _ref[0],
          antags = _ref[1];
      return antags;
    }), alive, ghosts, dead, npcs, misc]; _i < _arr.length; _i++) {
      var source = _arr[_i];
      var member = source.filter(searchFor(searchText)).sort(compareNumberedText)[0];

      if (member !== undefined) {
        act("orbit", {
          ref: member.ref
        });
        break;
      }
    }
  };

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Orbit",
    "width": 350,
    "height": 700,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
              "name": "search",
              "mr": 1
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "placeholder": "Search...",
              "autoFocus": true,
              "fluid": true,
              "value": searchText,
              "onInput": function () {
                function onInput(_, value) {
                  return setSearchText(value);
                }

                return onInput;
              }(),
              "onEnter": function () {
                function onEnter(_, value) {
                  return orbitMostRelevant(value);
                }

                return onEnter;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Divider, {
              "vertical": true
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "inline": true,
              "color": "transparent",
              "tooltip": "Toggle Auto-Observe. When active, you'll\n                see the UI / full inventory of whoever you're orbiting. Neat!",
              "tooltipPosition": "bottom-left",
              "selected": auto_observe,
              "icon": auto_observe ? "toggle-on" : "toggle-off",
              "onClick": function () {
                function onClick() {
                  return act("toggle_observe");
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "inline": true,
              "color": "transparent",
              "tooltip": "Refresh",
              "tooltipPosition": "bottom-left",
              "icon": "sync-alt",
              "onClick": function () {
                function onClick() {
                  return act("refresh");
                }

                return onClick;
              }()
            })]
          })]
        })
      }), antagonists.length > 0 && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Ghost-Visible Antagonists",
        children: sortedAntagonists.map(function (_ref2) {
          var name = _ref2[0],
              antags = _ref2[1];
          return (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": name,
            "level": 2,
            children: antags.filter(searchFor(searchText)).sort(compareNumberedText).map(function (antag) {
              return (0, _inferno.createComponentVNode)(2, OrbitedButton, {
                "color": "bad",
                "thing": antag
              }, antag.name);
            })
          }, name);
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Alive - (" + alive.length + ")",
        children: alive.filter(searchFor(searchText)).sort(compareNumberedText).map(function (thing) {
          return (0, _inferno.createComponentVNode)(2, OrbitedButton, {
            "color": "good",
            "thing": thing
          }, thing.name);
        })
      }), (0, _inferno.createComponentVNode)(2, BasicSection, {
        "title": "Ghosts - (" + ghosts.length + ")",
        "source": ghosts,
        "searchText": searchText
      }), (0, _inferno.createComponentVNode)(2, BasicSection, {
        "title": "Dead",
        "source": dead,
        "searchText": searchText
      }), (0, _inferno.createComponentVNode)(2, BasicSection, {
        "title": "NPCs",
        "source": npcs,
        "searchText": searchText
      }), (0, _inferno.createComponentVNode)(2, BasicSection, {
        "title": "Misc",
        "source": misc,
        "searchText": searchText
      })]
    })
  });
};

exports.Orbit = Orbit;

/***/ }),

/***/ "./packages/tgui/interfaces/OreBox.js":
/*!********************************************!*\
  !*** ./packages/tgui/interfaces/OreBox.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.OreBox = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var OreBox = function OreBox(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var materials = data.materials;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 335,
    "height": 415,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Ores",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Empty",
          "onClick": function () {
            function onClick() {
              return act('removeall');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            "header": true,
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Ore"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "collapsing": true,
              "textAlign": "right",
              children: "Amount"
            })]
          }), materials.map(function (material) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: (0, _string.toTitleCase)(material.name)
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                "textAlign": "right",
                children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                  "color": "label",
                  "inline": true,
                  children: material.amount
                })
              })]
            }, material.type);
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: ["All ores will be placed in here when you are wearing a mining stachel on your belt or in a pocket while dragging the ore box.", (0, _inferno.createVNode)(1, "br"), "Gibtonite is not accepted."]
        })
      })]
    })
  });
};

exports.OreBox = OreBox;

/***/ }),

/***/ "./packages/tgui/interfaces/OreRedemptionMachine.js":
/*!**********************************************************!*\
  !*** ./packages/tgui/interfaces/OreRedemptionMachine.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.OreRedemptionMachine = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var OreRedemptionMachine = function OreRedemptionMachine(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var unclaimedPoints = data.unclaimedPoints,
      materials = data.materials,
      alloys = data.alloys,
      diskDesigns = data.diskDesigns,
      hasDisk = data.hasDisk;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Ore Redemption Machine",
    "width": 440,
    "height": 550,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [(0, _inferno.createComponentVNode)(2, _components.BlockQuote, {
          "mb": 1,
          children: ["This machine only accepts ore.", (0, _inferno.createVNode)(1, "br"), "Gibtonite and Slag are not accepted."]
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "color": "label",
            "mr": 1,
            children: "Unclaimed points:"
          }), unclaimedPoints, (0, _inferno.createComponentVNode)(2, _components.Button, {
            "ml": 2,
            "content": "Claim",
            "disabled": unclaimedPoints === 0,
            "onClick": function () {
              function onClick() {
                return act('Claim');
              }

              return onClick;
            }()
          })]
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: hasDisk && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
          "mb": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "eject",
            "content": "Eject design disk",
            "onClick": function () {
              function onClick() {
                return act('diskEject');
              }

              return onClick;
            }()
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: diskDesigns.map(function (design) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: ["File ", design.index, ": ", design.name]
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "disabled": !design.canupload,
                  "content": "Upload",
                  "onClick": function () {
                    function onClick() {
                      return act('diskUpload', {
                        design: design.index
                      });
                    }

                    return onClick;
                  }()
                })
              })]
            }, design.index);
          })
        })], 4) || (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "save",
          "content": "Insert design disk",
          "onClick": function () {
            function onClick() {
              return act('diskInsert');
            }

            return onClick;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Materials",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: materials.map(function (material) {
            return (0, _inferno.createComponentVNode)(2, MaterialRow, {
              "material": material,
              "onRelease": function () {
                function onRelease(amount) {
                  return act('Release', {
                    id: material.id,
                    sheets: amount
                  });
                }

                return onRelease;
              }()
            }, material.id);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Alloys",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: alloys.map(function (material) {
            return (0, _inferno.createComponentVNode)(2, MaterialRow, {
              "material": material,
              "onRelease": function () {
                function onRelease(amount) {
                  return act('Smelt', {
                    id: material.id,
                    sheets: amount
                  });
                }

                return onRelease;
              }()
            }, material.id);
          })
        })
      })]
    })
  });
};

exports.OreRedemptionMachine = OreRedemptionMachine;

var MaterialRow = function MaterialRow(props, context) {
  var material = props.material,
      onRelease = props.onRelease;

  var _useLocalState = (0, _backend.useLocalState)(context, "amount" + material.name, 1),
      amount = _useLocalState[0],
      setAmount = _useLocalState[1];

  var amountAvailable = Math.floor(material.amount);
  return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      children: (0, _string.toTitleCase)(material.name).replace('Alloy', '')
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      "textAlign": "right",
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "mr": 2,
        "color": "label",
        "inline": true,
        children: material.value && material.value + ' cr'
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      "textAlign": "right",
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "mr": 2,
        "color": "label",
        "inline": true,
        children: [amountAvailable, " sheets"]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
        "width": "32px",
        "step": 1,
        "stepPixelSize": 5,
        "minValue": 1,
        "maxValue": 50,
        "value": amount,
        "onChange": function () {
          function onChange(e, value) {
            return setAmount(value);
          }

          return onChange;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "disabled": amountAvailable < 1,
        "content": "Release",
        "onClick": function () {
          function onClick() {
            return onRelease(amount);
          }

          return onClick;
        }()
      })]
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Pandemic.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/Pandemic.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Pandemic = exports.PandemicAntibodyDisplay = exports.PandemicSymptomDisplay = exports.PandemicDiseaseDisplay = exports.PandemicBeakerDisplay = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var PandemicBeakerDisplay = function PandemicBeakerDisplay(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var has_beaker = data.has_beaker,
      beaker_empty = data.beaker_empty,
      has_blood = data.has_blood,
      blood = data.blood;
  var cant_empty = !has_beaker || beaker_empty;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Beaker",
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "times",
      "content": "Empty and Eject",
      "color": "bad",
      "disabled": cant_empty,
      "onClick": function () {
        function onClick() {
          return act('empty_eject_beaker');
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "trash",
      "content": "Empty",
      "disabled": cant_empty,
      "onClick": function () {
        function onClick() {
          return act('empty_beaker');
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "content": "Eject",
      "disabled": !has_beaker,
      "onClick": function () {
        function onClick() {
          return act('eject_beaker');
        }

        return onClick;
      }()
    })], 4),
    children: has_beaker ? !beaker_empty ? has_blood ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Blood DNA",
        children: blood && blood.dna || 'Unknown'
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Blood Type",
        children: blood && blood.type || 'Unknown'
      })]
    }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "bad",
      children: "No blood detected"
    }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "bad",
      children: "Beaker is empty"
    }) : (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No beaker loaded"
    })
  });
};

exports.PandemicBeakerDisplay = PandemicBeakerDisplay;

var PandemicDiseaseDisplay = function PandemicDiseaseDisplay(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var is_ready = data.is_ready;
  var viruses = data.viruses || [];
  return viruses.map(function (virus) {
    var symptoms = virus.symptoms || [];
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": virus.can_rename ? (0, _inferno.createComponentVNode)(2, _components.Input, {
        "value": virus.name,
        "onChange": function () {
          function onChange(e, value) {
            return act('rename_disease', {
              index: virus.index,
              name: value
            });
          }

          return onChange;
        }()
      }) : virus.name,
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "flask",
        "content": "Create culture bottle",
        "disabled": !is_ready,
        "onClick": function () {
          function onClick() {
            return act('create_culture_bottle', {
              index: virus.index
            });
          }

          return onClick;
        }()
      }),
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: virus.description
        }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Agent",
              children: virus.agent
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Spread",
              children: virus.spread
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Possible Cure",
              children: virus.cure
            })]
          })
        })]
      }), !!virus.is_adv && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Statistics",
        "level": 2,
        children: (0, _inferno.createComponentVNode)(2, _components.Grid, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Resistance",
                children: virus.resistance
              }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Stealth",
                children: virus.stealth
              })]
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Stage speed",
                children: virus.stage_speed
              }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Transmissibility",
                children: virus.transmission
              })]
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Symptoms",
        "level": 2,
        children: symptoms.map(function (symptom) {
          return (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
            "title": symptom.name,
            children: (0, _inferno.createComponentVNode)(2, _components.Section, {
              children: (0, _inferno.createComponentVNode)(2, PandemicSymptomDisplay, {
                "symptom": symptom
              })
            })
          }, symptom.name);
        })
      })], 4)]
    }, virus.name);
  });
};

exports.PandemicDiseaseDisplay = PandemicDiseaseDisplay;

var PandemicSymptomDisplay = function PandemicSymptomDisplay(props, context) {
  var symptom = props.symptom;
  var name = symptom.name,
      desc = symptom.desc,
      stealth = symptom.stealth,
      resistance = symptom.resistance,
      stage_speed = symptom.stage_speed,
      transmission = symptom.transmission,
      level = symptom.level,
      neutered = symptom.neutered;
  var thresholds = (0, _collections.map)(function (desc, label) {
    return {
      desc: desc,
      label: label
    };
  })(symptom.threshold_desc || {});
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": name,
    "level": 2,
    "buttons": !!neutered && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "color": "bad",
      children: "Neutered"
    }),
    children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        "size": 2,
        children: desc
      }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Level",
            children: level
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Resistance",
            children: resistance
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Stealth",
            children: stealth
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Stage Speed",
            children: stage_speed
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Transmission",
            children: transmission
          })]
        })
      })]
    }), thresholds.length > 0 && (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Thresholds",
      "level": 3,
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: thresholds.map(function (threshold) {
          return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": threshold.label,
            children: threshold.desc
          }, threshold.label);
        })
      })
    })]
  });
};

exports.PandemicSymptomDisplay = PandemicSymptomDisplay;

var PandemicAntibodyDisplay = function PandemicAntibodyDisplay(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var resistances = data.resistances || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Antibodies",
    children: resistances.length > 0 ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: resistances.map(function (resistance) {
        return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": resistance.name,
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "eye-dropper",
            "content": "Create vaccine bottle",
            "disabled": !data.is_ready,
            "onClick": function () {
              function onClick() {
                return act('create_vaccine_bottle', {
                  index: resistance.id
                });
              }

              return onClick;
            }()
          })
        }, resistance.name);
      })
    }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "color": "bad",
      "mt": 1,
      children: "No antibodies detected."
    })
  });
};

exports.PandemicAntibodyDisplay = PandemicAntibodyDisplay;

var Pandemic = function Pandemic(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      data = _useBackend4.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 520,
    "height": 550,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, PandemicBeakerDisplay), !!data.has_blood && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, PandemicDiseaseDisplay), (0, _inferno.createComponentVNode)(2, PandemicAntibodyDisplay)], 4)]
    })
  });
};

exports.Pandemic = Pandemic;

/***/ }),

/***/ "./packages/tgui/interfaces/PaperSheet.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/PaperSheet.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.PaperSheet = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _vector = __webpack_require__(/*! common/vector */ "./packages/common/vector.js");

var _dompurify = _interopRequireDefault(__webpack_require__(/*! dompurify */ "./.yarn/cache/dompurify-npm-2.2.2-4f37785c06-eab7b8763c.zip/node_modules/dompurify/dist/purify.js"));

var _marked = _interopRequireDefault(__webpack_require__(/*! marked */ "./.yarn/cache/marked-npm-2.0.0-f545a3f593-5b3b13b9b6.zip/node_modules/marked/lib/marked.js"));

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _wrapRegExp(re, groups) { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _RegExp = _wrapNativeSuper(RegExp); var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = _RegExp.call(this, re, flags); _groups.set(_this, groups || _groups.get(re)); return _this; } _inherits(BabelRegExp, _RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === "string") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } else if (typeof substitution === "function") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = []; args.push.apply(args, arguments); if (typeof args[args.length - 1] !== "object") { args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function () { function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); } return _wrapNativeSuper; }(); return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function () { function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; } return _construct; }(); } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function () { function _setPrototypeOf(o, p) { o.__proto__ = p; return o; } return _setPrototypeOf; }(); return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function () { function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); } return _getPrototypeOf; }(); return _getPrototypeOf(o); }

var MAX_PAPER_LENGTH = 5000; // Question, should we send this with ui_data?

var sanatize_text = function sanatize_text(value) {
  // This is VERY important to think first if you NEED
  // the tag you put in here.  We are pushing all this
  // though dangerouslySetInnerHTML and even though
  // the default DOMPurify kills javascript, it dosn't
  // kill href links or such
  return _dompurify["default"].sanitize(value, {
    FORBID_ATTR: ['class', 'style'],
    ALLOWED_TAGS: ['br', 'code', 'li', 'p', 'pre', 'span', 'table', 'td', 'tr', 'th', 'ul', 'ol', 'menu', 'font', 'b', 'center', 'table', 'tr', 'th']
  });
}; // Hacky, yes, works?...yes


var textWidth = function textWidth(text, font, fontsize) {
  // default font height is 12 in tgui
  font = fontsize + "x " + font;
  var c = document.createElement('canvas');
  var ctx = c.getContext("2d");
  ctx.font = font;
  var width = ctx.measureText(text).width;
  return width;
};

var setFontinText = function setFontinText(text, font, color, bold) {
  if (bold === void 0) {
    bold = false;
  }

  return "<span style=\"" + "color:'" + color + "';" + "font-family:'" + font + "';" + (bold ? "font-weight: bold;" : "") + "\">" + text + "</span>";
};

var createIDHeader = function createIDHeader(index) {
  return "paperfield_" + index;
}; // To make a field you do a [_______] or however long the field is
// we will then output a TEXT input for it that hopefuly covers
// the exact amount of spaces


var field_regex = /\[(_+)\]/g;

var field_tag_regex = /*#__PURE__*/_wrapRegExp(/\[<input[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+(.*?)id="(paperfield_[0-9]+)"(.*?)\/>\]/gm, {
  id: 2
});

var sign_regex = /%s(?:ign)?(?=\\s|$)/igm;

var createInputField = function createInputField(length, width, font, fontsize, color, id) {
  return "[<input " + "type=\"text\" " + "style=\"" + "font:'" + fontsize + "x " + font + "';" + "color:'" + color + "';" + "min-width:" + width + ";" + "max-width:" + width + ";" + "\" " + "id=\"" + id + "\" " + "maxlength=" + length + " " + "size=" + length + " " + "/>]";
};

var createFields = function createFields(txt, font, fontsize, color, counter) {
  var ret_text = txt.replace(field_regex, function (match, p1, offset, string) {
    var width = textWidth(match, font, fontsize) + "px";
    return createInputField(p1.length, width, font, fontsize, color, createIDHeader(counter++));
  });
  return {
    counter: counter,
    text: ret_text
  };
};

var signDocument = function signDocument(txt, color, user) {
  return txt.replace(sign_regex, function () {
    return setFontinText(user, "Times New Roman", color, true);
  });
};

var run_marked_default = function run_marked_default(value) {
  // Override function, any links and images should
  // kill any other marked tokens we don't want here
  var walkTokens = function walkTokens(token) {
    switch (token.type) {
      case 'url':
      case 'autolink':
      case 'reflink':
      case 'link':
      case 'image':
        token.type = 'text'; // Once asset system is up change to some default image
        // or rewrite for icon images

        token.href = "";
        break;
    }
  };

  return (0, _marked["default"])(value, {
    breaks: true,
    smartypants: true,
    smartLists: true,
    walkTokens: walkTokens,
    // Once assets are fixed might need to change this for them
    baseUrl: 'thisshouldbreakhttp'
  });
};
/*
** This gets the field, and finds the dom object and sees if
** the user has typed something in.  If so, it replaces,
** the dom object, in txt with the value, spaces so it
** fits the [] format and saves the value into a object
** There may be ways to optimize this in javascript but
** doing this in byond is nightmarish.
**
** It returns any values that were saved and a corrected
** html code or null if nothing was updated
*/


var checkAllFields = function checkAllFields(txt, font, color, user_name, bold) {
  if (bold === void 0) {
    bold = false;
  }

  var matches;
  var values = {};
  var replace = []; // I know its tempting to wrap ALL this in a .replace
  // HOWEVER the user might not of entered anything
  // if thats the case we are rebuilding the entire string
  // for nothing, if nothing is entered, txt is just returned

  while ((matches = field_tag_regex.exec(txt)) !== null) {
    var full_match = matches[0];
    var id = matches.groups.id;

    if (id) {
      var dom = document.getElementById(id); // make sure we got data, and kill any html that might
      // be in it

      var dom_text = dom && dom.value ? dom.value : "";

      if (dom_text.length === 0) {
        continue;
      }

      var sanitized_text = _dompurify["default"].sanitize(dom.value.trim(), {
        ALLOWED_TAGS: []
      });

      if (sanitized_text.length === 0) {
        continue;
      } // this is easyer than doing a bunch of text manipulations


      var target = dom.cloneNode(true); // in case they sign in a field

      if (sanitized_text.match(sign_regex)) {
        target.style.fontFamily = "Times New Roman";
        bold = true;
        target.defaultValue = user_name;
      } else {
        target.style.fontFamily = font;
        target.defaultValue = sanitized_text;
      }

      if (bold) {
        target.style.fontWeight = "bold";
      }

      target.style.color = color;
      target.disabled = true;
      var wrap = document.createElement('div');
      wrap.appendChild(target);
      values[id] = sanitized_text; // save the data

      replace.push({
        value: "[" + wrap.innerHTML + "]",
        raw_text: full_match
      });
    }
  }

  if (replace.length > 0) {
    for (var _iterator = _createForOfIteratorHelperLoose(replace), _step; !(_step = _iterator()).done;) {
      var o = _step.value;
      txt = txt.replace(o.raw_text, o.value);
    }
  }

  return {
    text: txt,
    fields: values
  };
};

var pauseEvent = function pauseEvent(e) {
  if (e.stopPropagation) {
    e.stopPropagation();
  }

  if (e.preventDefault) {
    e.preventDefault();
  }

  e.cancelBubble = true;
  e.returnValue = false;
  return false;
};

var Stamp = function Stamp(props, context) {
  var image = props.image,
      opacity = props.opacity,
      rest = _objectWithoutPropertiesLoose(props, ["image", "opacity"]);

  var matrix_trasform = 'rotate(' + image.rotate + 'deg) translate(' + image.x + 'px,' + image.y + 'px)';
  var stamp_trasform = {
    'transform': matrix_trasform,
    '-ms-transform': matrix_trasform,
    '-webkit-transform': matrix_trasform,
    'opacity': opacity || 1.0,
    'position': 'absolute'
  };
  return (0, _inferno.createVNode)(1, "div", (0, _react.classes)(['paper121x54', image.sprite]), null, 1, {
    "style": stamp_trasform
  });
};

var setInputReadonly = function setInputReadonly(text, readonly) {
  return readonly ? text.replace(/<input\s[^d]/g, '<input disabled ') : text.replace(/<input\sdisabled\s/g, '<input ');
}; // got to make this a full component if we
// want to control updates


var PaperSheetView = function PaperSheetView(props, context) {
  var value = props.value,
      stamps = props.stamps,
      backgroundColor = props.backgroundColor,
      readOnly = props.readOnly;
  var stamp_list = stamps || [];
  var text_html = {
    __html: '<span class="paper-text">' + setInputReadonly(value, readOnly) + '</span>'
  };
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "position": "relative",
    "backgroundColor": backgroundColor,
    "width": "100%",
    "height": "100%",
    children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
      "fillPositionedParent": true,
      "width": "100%",
      "height": "100%",
      "dangerouslySetInnerHTML": text_html,
      "p": "10px"
    }), stamp_list.map(function (o, i) {
      return (0, _inferno.createComponentVNode)(2, Stamp, {
        "image": {
          sprite: o[0],
          x: o[1],
          y: o[2],
          rotate: o[3]
        }
      }, o[0] + i);
    })]
  });
}; // again, need the states for dragging and such


var PaperSheetStamper = /*#__PURE__*/function (_Component) {
  _inheritsLoose(PaperSheetStamper, _Component);

  function PaperSheetStamper(props, context) {
    var _this2;

    _this2 = _Component.call(this, props, context) || this;
    _this2.state = {
      x: 0,
      y: 0,
      rotate: 0
    };
    return _this2;
  }

  var _proto = PaperSheetStamper.prototype;

  _proto.findStampPosition = function () {
    function findStampPosition(e) {
      var position = {
        x: event.pageX,
        y: event.pageY
      };
      var offset = {
        left: e.target.offsetLeft,
        top: e.target.offsetTop
      };
      var reference = e.target.offsetParent;

      while (reference) {
        offset.left += reference.offsetLeft;
        offset.top += reference.offsetTop;
        reference = reference.offsetParent;
      }

      var pos = [position.x - offset.left, position.y - offset.top];
      var centerOffset = (0, _vector.vecScale)([121, 51], 0.5);
      var center = (0, _vector.vecSubtract)(pos, centerOffset);
      return center;
    }

    return findStampPosition;
  }();

  _proto.componentDidMount = function () {
    function componentDidMount() {
      document.onwheel = this.handleWheel.bind(this);
    }

    return componentDidMount;
  }();

  _proto.handleMouseMove = function () {
    function handleMouseMove(e) {
      var pos = this.findStampPosition(e); // center offset of stamp

      pauseEvent(e);
      this.setState({
        x: pos[0],
        y: pos[1]
      });
    }

    return handleMouseMove;
  }();

  _proto.handleMouseClick = function () {
    function handleMouseClick(e) {
      var pos = this.findStampPosition(e);

      var _useBackend = (0, _backend.useBackend)(this.context),
          act = _useBackend.act,
          data = _useBackend.data;

      var stamp_obj = {
        x: pos[0],
        y: pos[1],
        r: this.state.rotate,
        stamp_class: this.props.stamp_class,
        stamp_icon_state: data.stamp_icon_state
      };
      act("stamp", stamp_obj);
      this.setState({
        x: pos[0],
        y: pos[1]
      });
    }

    return handleMouseClick;
  }();

  _proto.handleWheel = function () {
    function handleWheel(e) {
      var rotate_amount = e.deltaY > 0 ? 15 : -15;

      if (e.deltaY < 0 && this.state.rotate === 0) {
        this.setState({
          rotate: 360 + rotate_amount
        });
      } else if (e.deltaY > 0 && this.state.rotate === 360) {
        this.setState({
          rotate: rotate_amount
        });
      } else {
        var rotate = {
          rotate: rotate_amount + this.state.rotate
        };
        this.setState(function () {
          return rotate;
        });
      }

      pauseEvent(e);
    }

    return handleWheel;
  }();

  _proto.render = function () {
    function render() {
      var _this$props = this.props,
          value = _this$props.value,
          stamp_class = _this$props.stamp_class,
          stamps = _this$props.stamps,
          rest = _objectWithoutPropertiesLoose(_this$props, ["value", "stamp_class", "stamps"]);

      var stamp_list = stamps || [];
      var current_pos = {
        sprite: stamp_class,
        x: this.state.x,
        y: this.state.y,
        rotate: this.state.rotate
      };
      return (0, _inferno.normalizeProps)((0, _inferno.createComponentVNode)(2, _components.Box, Object.assign({
        "onClick": this.handleMouseClick.bind(this),
        "onMouseMove": this.handleMouseMove.bind(this),
        "onwheel": this.handleWheel.bind(this)
      }, rest, {
        children: [(0, _inferno.createComponentVNode)(2, PaperSheetView, {
          "readOnly": true,
          "value": value,
          "stamps": stamp_list
        }), (0, _inferno.createComponentVNode)(2, Stamp, {
          "opacity": 0.5,
          "image": current_pos
        })]
      })));
    }

    return render;
  }();

  return PaperSheetStamper;
}(_inferno.Component); // ugh.  So have to turn this into a full
// component too if I want to keep updates
// low and keep the wierd flashing down


var PaperSheetEdit = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(PaperSheetEdit, _Component2);

  function PaperSheetEdit(props, context) {
    var _this3;

    _this3 = _Component2.call(this, props, context) || this;
    _this3.state = {
      previewSelected: "Preview",
      old_text: props.value || "",
      textarea_text: "",
      combined_text: props.value || ""
    };
    return _this3;
  } // This is the main rendering part, this creates the html from marked text
  // as well as the form fields


  var _proto2 = PaperSheetEdit.prototype;

  _proto2.createPreview = function () {
    function createPreview(value, do_fields) {
      if (do_fields === void 0) {
        do_fields = false;
      }

      var _useBackend2 = (0, _backend.useBackend)(this.context),
          data = _useBackend2.data;

      var text = data.text,
          pen_color = data.pen_color,
          pen_font = data.pen_font,
          is_crayon = data.is_crayon,
          field_counter = data.field_counter,
          edit_usr = data.edit_usr;
      var out = {
        text: text
      }; // check if we are adding to paper, if not
      // we still have to check if somone entered something
      // into the fields

      value = value.trim();

      if (value.length > 0) {
        // First lets make sure it ends in a new line
        value += value[value.length] === "\n" ? " \n" : "\n \n"; // Second, we sanatize the text of html

        var sanatized_text = sanatize_text(value);
        var signed_text = signDocument(sanatized_text, pen_color, edit_usr); // Third we replace the [__] with fields as markedjs fucks them up

        var fielded_text = createFields(signed_text, pen_font, 12, pen_color, field_counter); // Fourth, parse the text using markup

        var formated_text = run_marked_default(fielded_text.text); // Fifth, we wrap the created text in the pin color, and font.
        // crayon is bold (<b> tags), mabye make fountain pin italic?

        var fonted_text = setFontinText(formated_text, pen_font, pen_color, is_crayon);
        out.text += fonted_text;
        out.field_counter = fielded_text.counter;
      }

      if (do_fields) {
        // finaly we check all the form fields to see
        // if any data was entered by the user and
        // if it was return the data and modify the text
        var final_processing = checkAllFields(out.text, pen_font, pen_color, edit_usr, is_crayon);
        out.text = final_processing.text;
        out.form_fields = final_processing.fields;
      }

      return out;
    }

    return createPreview;
  }();

  _proto2.onInputHandler = function () {
    function onInputHandler(e, value) {
      var _this4 = this;

      if (value !== this.state.textarea_text) {
        var combined_length = this.state.old_text.length + this.state.textarea_text.length;

        if (combined_length > MAX_PAPER_LENGTH) {
          if (combined_length - MAX_PAPER_LENGTH >= value.length) {
            // Basicly we cannot add any more text to the paper
            value = '';
          } else {
            value = value.substr(0, value.length - (combined_length - MAX_PAPER_LENGTH));
          } // we check again to save an update


          if (value === this.state.textarea_text) {
            // Do nothing
            return;
          }
        }

        this.setState(function () {
          return {
            textarea_text: value,
            combined_text: _this4.createPreview(value)
          };
        });
      }
    }

    return onInputHandler;
  }() // the final update send to byond, final upkeep
  ;

  _proto2.finalUpdate = function () {
    function finalUpdate(new_text) {
      var _useBackend3 = (0, _backend.useBackend)(this.context),
          act = _useBackend3.act;

      var final_processing = this.createPreview(new_text, true);
      act('save', final_processing);
      this.setState(function () {
        return {
          textarea_text: "",
          previewSelected: "save",
          combined_text: final_processing.text
        };
      }); // byond should switch us to readonly mode from here
    }

    return finalUpdate;
  }();

  _proto2.render = function () {
    function render() {
      var _this5 = this;

      var _this$props2 = this.props,
          _this$props2$value = _this$props2.value,
          value = _this$props2$value === void 0 ? "" : _this$props2$value,
          textColor = _this$props2.textColor,
          fontFamily = _this$props2.fontFamily,
          stamps = _this$props2.stamps,
          backgroundColor = _this$props2.backgroundColor,
          rest = _objectWithoutPropertiesLoose(_this$props2, ["value", "textColor", "fontFamily", "stamps", "backgroundColor"]);

      return (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "direction": "column",
        "fillPositionedParent": true,
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "textColor": 'black',
              "backgroundColor": this.state.previewSelected === "Edit" ? "grey" : "white",
              "selected": this.state.previewSelected === "Edit",
              "onClick": function () {
                function onClick() {
                  return _this5.setState({
                    previewSelected: "Edit"
                  });
                }

                return onClick;
              }(),
              children: "Edit"
            }, "marked_edit"), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "textColor": 'black',
              "backgroundColor": this.state.previewSelected === "Preview" ? "grey" : "white",
              "selected": this.state.previewSelected === "Preview",
              "onClick": function () {
                function onClick() {
                  return _this5.setState(function () {
                    var new_state = {
                      previewSelected: "Preview",
                      textarea_text: _this5.state.textarea_text,
                      combined_text: _this5.createPreview(_this5.state.textarea_text).text
                    };
                    return new_state;
                  });
                }

                return onClick;
              }(),
              children: "Preview"
            }, "marked_preview"), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "textColor": 'black',
              "backgroundColor": this.state.previewSelected === "confirm" ? "red" : this.state.previewSelected === "save" ? "grey" : "white",
              "selected": this.state.previewSelected === "confirm" || this.state.previewSelected === "save",
              "onClick": function () {
                function onClick() {
                  if (_this5.state.previewSelected === "confirm") {
                    _this5.finalUpdate(_this5.state.textarea_text);
                  } else if (_this5.state.previewSelected === "Edit") {
                    _this5.setState(function () {
                      var new_state = {
                        previewSelected: "confirm",
                        textarea_text: _this5.state.textarea_text,
                        combined_text: _this5.createPreview(_this5.state.textarea_text).text
                      };
                      return new_state;
                    });
                  } else {
                    _this5.setState({
                      previewSelected: "confirm"
                    });
                  }
                }

                return onClick;
              }(),
              children: this.state.previewSelected === "confirm" ? "confirm" : "save"
            }, "marked_done")]
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          "basis": 1,
          children: this.state.previewSelected === "Edit" && (0, _inferno.createComponentVNode)(2, _components.TextArea, {
            "value": this.state.textarea_text,
            "textColor": textColor,
            "fontFamily": fontFamily,
            "height": window.innerHeight - 80 + "px",
            "backgroundColor": backgroundColor,
            "onInput": this.onInputHandler.bind(this)
          }) || (0, _inferno.createComponentVNode)(2, PaperSheetView, {
            "value": this.state.combined_text,
            "stamps": stamps,
            "fontFamily": fontFamily,
            "textColor": textColor
          })
        })]
      });
    }

    return render;
  }();

  return PaperSheetEdit;
}(_inferno.Component);

var PaperSheet = function PaperSheet(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      data = _useBackend4.data;

  var edit_mode = data.edit_mode,
      text = data.text,
      paper_color = data.paper_color,
      _data$pen_color = data.pen_color,
      pen_color = _data$pen_color === void 0 ? "black" : _data$pen_color,
      _data$pen_font = data.pen_font,
      pen_font = _data$pen_font === void 0 ? "Verdana" : _data$pen_font,
      stamps = data.stamps,
      stamp_class = data.stamp_class,
      stamped = data.stamped; // You might ask why?  Because Window/window content do wierd
  // css stuff with white for some reason

  var backgroundColor = paper_color && paper_color !== "white" ? paper_color : "#FFFFFF";
  var stamp_list = !stamps || stamps === null ? [] : stamps;

  var decide_mode = function decide_mode(mode) {
    switch (mode) {
      case 0:
        return (0, _inferno.createComponentVNode)(2, PaperSheetView, {
          "value": text,
          "stamps": stamp_list,
          "readOnly": true
        });

      case 1:
        return (0, _inferno.createComponentVNode)(2, PaperSheetEdit, {
          "value": text,
          "textColor": pen_color,
          "fontFamily": pen_font,
          "stamps": stamp_list,
          "backgroundColor": backgroundColor
        });

      case 2:
        return (0, _inferno.createComponentVNode)(2, PaperSheetStamper, {
          "value": text,
          "stamps": stamp_list,
          "stamp_class": stamp_class
        });

      default:
        return "ERROR ERROR WE CANNOT BE HERE!!";
    }
  };

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "theme": "paper",
    "width": 400,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "fillPositionedParent": true,
        "backgroundColor": backgroundColor,
        children: decide_mode(edit_mode)
      })
    })
  });
};

exports.PaperSheet = PaperSheet;

/***/ }),

/***/ "./packages/tgui/interfaces/ParticleAccelerator.js":
/*!*********************************************************!*\
  !*** ./packages/tgui/interfaces/ParticleAccelerator.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ParticleAccelerator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ParticleAccelerator = function ParticleAccelerator(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var assembled = data.assembled,
      power = data.power,
      strength = data.strength;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 185,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "content": "Run Scan",
              "onClick": function () {
                function onClick() {
                  return act('scan');
                }

                return onClick;
              }()
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": assembled ? "good" : "bad",
              children: assembled ? "Ready - All parts in place" : "Unable to detect all parts"
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Particle Accelerator Controls",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": power ? 'power-off' : 'times',
              "content": power ? 'On' : 'Off',
              "selected": power,
              "disabled": !assembled,
              "onClick": function () {
                function onClick() {
                  return act('power');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Particle Strength",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "backward",
              "disabled": !assembled,
              "onClick": function () {
                function onClick() {
                  return act('remove_strength');
                }

                return onClick;
              }()
            }), ' ', String(strength).padStart(1, '0'), ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "forward",
              "disabled": !assembled,
              "onClick": function () {
                function onClick() {
                  return act('add_strength');
                }

                return onClick;
              }()
            })]
          })]
        })
      })]
    })
  });
};

exports.ParticleAccelerator = ParticleAccelerator;

/***/ }),

/***/ "./packages/tgui/interfaces/PersonalCrafting.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/PersonalCrafting.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.PersonalCrafting = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var PersonalCrafting = function PersonalCrafting(props, context) {
  var _categories$;

  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var busy = data.busy,
      display_craftable_only = data.display_craftable_only,
      display_compact = data.display_compact;
  var crafting_recipes = data.crafting_recipes || {}; // Sort everything into flat categories

  var categories = [];
  var recipes = [];

  for (var _i = 0, _Object$keys = Object.keys(crafting_recipes); _i < _Object$keys.length; _i++) {
    var category = _Object$keys[_i];
    var subcategories = crafting_recipes[category];

    if ('has_subcats' in subcategories) {
      for (var _i2 = 0, _Object$keys2 = Object.keys(subcategories); _i2 < _Object$keys2.length; _i2++) {
        var subcategory = _Object$keys2[_i2];

        if (subcategory === 'has_subcats') {
          continue;
        } // Push category


        categories.push({
          name: subcategory,
          category: category,
          subcategory: subcategory
        }); // Push recipes

        var _recipes2 = subcategories[subcategory];

        for (var _iterator = _createForOfIteratorHelperLoose(_recipes2), _step; !(_step = _iterator()).done;) {
          var recipe = _step.value;
          recipes.push(Object.assign({}, recipe, {
            category: subcategory
          }));
        }
      }

      continue;
    } // Push category


    categories.push({
      name: category,
      category: category
    }); // Push recipes

    var _recipes = crafting_recipes[category];

    for (var _iterator2 = _createForOfIteratorHelperLoose(_recipes), _step2; !(_step2 = _iterator2()).done;) {
      var _recipe = _step2.value;
      recipes.push(Object.assign({}, _recipe, {
        category: category
      }));
    }
  } // Sort out the tab state


  var _useLocalState = (0, _backend.useLocalState)(context, 'tab', (_categories$ = categories[0]) == null ? void 0 : _categories$.name),
      tab = _useLocalState[0],
      setTab = _useLocalState[1];

  var shownRecipes = recipes.filter(function (recipe) {
    return recipe.category === tab;
  });
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Crafting Menu",
    "width": 700,
    "height": 800,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [!!busy && (0, _inferno.createComponentVNode)(2, _components.Dimmer, {
        "fontSize": "32px",
        children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
          "name": "cog",
          "spin": 1
        }), ' Crafting...']
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Personal Crafting",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "content": "Compact",
          "checked": display_compact,
          "onClick": function () {
            function onClick() {
              return act('toggle_compact');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "content": "Craftable Only",
          "checked": display_craftable_only,
          "onClick": function () {
            function onClick() {
              return act('toggle_recipes');
            }

            return onClick;
          }()
        })], 4),
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
              "vertical": true,
              children: categories.map(function (category) {
                return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
                  "selected": category.name === tab,
                  "onClick": function () {
                    function onClick() {
                      setTab(category.name);
                      act('set_category', {
                        category: category.category,
                        subcategory: category.subcategory
                      });
                    }

                    return onClick;
                  }(),
                  children: category.name
                }, category.name);
              })
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "grow": 1,
            "basis": 0,
            children: (0, _inferno.createComponentVNode)(2, CraftingList, {
              "craftables": shownRecipes
            })
          })]
        })
      })]
    })
  });
};

exports.PersonalCrafting = PersonalCrafting;

var CraftingList = function CraftingList(props, context) {
  var _props$craftables = props.craftables,
      craftables = _props$craftables === void 0 ? [] : _props$craftables;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _data$craftability = data.craftability,
      craftability = _data$craftability === void 0 ? {} : _data$craftability,
      display_compact = data.display_compact,
      display_craftable_only = data.display_craftable_only;
  return craftables.map(function (craftable) {
    if (display_craftable_only && !craftability[craftable.ref]) {
      return null;
    } // Compact display


    if (display_compact) {
      return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": craftable.name,
        "className": "candystripe",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "cog",
          "content": "Craft",
          "disabled": !craftability[craftable.ref],
          "tooltip": craftable.tool_text && 'Tools needed: ' + craftable.tool_text,
          "tooltipPosition": "left",
          "onClick": function () {
            function onClick() {
              return act('make', {
                recipe: craftable.ref
              });
            }

            return onClick;
          }()
        }),
        children: craftable.req_text
      }, craftable.name);
    } // Full display


    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": craftable.name,
      "level": 2,
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "cog",
        "content": "Craft",
        "disabled": !craftability[craftable.ref],
        "onClick": function () {
          function onClick() {
            return act('make', {
              recipe: craftable.ref
            });
          }

          return onClick;
        }()
      }),
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: [!!craftable.req_text && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Required",
          children: craftable.req_text
        }), !!craftable.catalyst_text && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Catalyst",
          children: craftable.catalyst_text
        }), !!craftable.tool_text && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Tools",
          children: craftable.tool_text
        })]
      })
    }, craftable.name);
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Photocopier.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/Photocopier.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Photocopier = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Photocopier = function Photocopier(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var isAI = data.isAI,
      has_toner = data.has_toner,
      has_item = data.has_item;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Photocopier",
    "width": 240,
    "height": isAI ? 309 : 234,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [has_toner ? (0, _inferno.createComponentVNode)(2, Toner) : (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Toner",
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "average",
          children: "No inserted toner cartridge."
        })
      }), has_item ? (0, _inferno.createComponentVNode)(2, Options) : (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Options",
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "average",
          children: "No inserted item."
        })
      }), !!isAI && (0, _inferno.createComponentVNode)(2, AIOptions)]
    })
  });
};

exports.Photocopier = Photocopier;

var Toner = function Toner(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var max_toner = data.max_toner,
      current_toner = data.current_toner;
  var average_toner = max_toner * 0.66;
  var bad_toner = max_toner * 0.33;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Toner",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "onClick": function () {
        function onClick() {
          return act('remove_toner');
        }

        return onClick;
      }(),
      "icon": "eject",
      children: "Eject"
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
      "ranges": {
        good: [average_toner, max_toner],
        average: [bad_toner, average_toner],
        bad: [0, bad_toner]
      },
      "value": current_toner,
      "minValue": 0,
      "maxValue": max_toner
    })
  });
};

var Options = function Options(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var color_mode = data.color_mode,
      is_photo = data.is_photo,
      num_copies = data.num_copies,
      has_enough_toner = data.has_enough_toner;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Options",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "mt": 0.4,
        "width": 11,
        "color": "label",
        children: "Make copies:"
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "animate": true,
          "width": 2.6,
          "height": 1.65,
          "step": 1,
          "stepPixelSize": 8,
          "minValue": 1,
          "maxValue": 10,
          "value": num_copies,
          "onDrag": function () {
            function onDrag(e, value) {
              return act('set_copies', {
                num_copies: value
              });
            }

            return onDrag;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "ml": 0.2,
          "icon": "copy",
          "textAlign": "center",
          "disabled": !has_enough_toner,
          "onClick": function () {
            function onClick() {
              return act('make_copy');
            }

            return onClick;
          }(),
          children: "Copy"
        })
      })]
    }), !!is_photo && (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "mt": 0.5,
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "mr": 0.4,
        "width": "50%",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "textAlign": "center",
          "selected": color_mode === "Greyscale",
          "onClick": function () {
            function onClick() {
              return act('color_mode', {
                mode: "Greyscale"
              });
            }

            return onClick;
          }(),
          children: "Greyscale"
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "ml": 0.4,
        "width": "50%",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "textAlign": "center",
          "selected": color_mode === "Color",
          "onClick": function () {
            function onClick() {
              return act('color_mode', {
                mode: "Color"
              });
            }

            return onClick;
          }(),
          children: "Color"
        })
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "mt": 0.5,
      "textAlign": "center",
      "icon": "reply",
      "fluid": true,
      "onClick": function () {
        function onClick() {
          return act('remove');
        }

        return onClick;
      }(),
      children: "Remove item"
    })]
  });
};

var AIOptions = function AIOptions(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act,
      data = _useBackend4.data;

  var can_AI_print = data.can_AI_print;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "AI Options",
    children: (0, _inferno.createComponentVNode)(2, _components.Box, {
      children: (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "images",
        "textAlign": "center",
        "disabled": !can_AI_print,
        "onClick": function () {
          function onClick() {
            return act('ai_photo');
          }

          return onClick;
        }(),
        children: "Print photo from database"
      })
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/PortableChemMixer.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/PortableChemMixer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.PortableChemMixer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var PortableChemMixer = function PortableChemMixer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var recording = !!data.recordingRecipe;
  var beakerTransferAmounts = data.beakerTransferAmounts || [];
  var beakerContents = recording && Object.keys(data.recordingRecipe).map(function (id) {
    return {
      id: id,
      name: (0, _string.toTitleCase)(id.replace(/_/, ' ')),
      volume: data.recordingRecipe[id]
    };
  }) || data.beakerContents || [];
  var chemicals = (0, _collections.sortBy)(function (chem) {
    return chem.title;
  })(data.chemicals);
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 645,
    "height": 550,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Dispense",
        "buttons": beakerTransferAmounts.map(function (amount) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "plus",
            "selected": amount === data.amount,
            "content": amount,
            "onClick": function () {
              function onClick() {
                return act('amount', {
                  target: amount
                });
              }

              return onClick;
            }()
          }, amount);
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mr": -1,
          children: chemicals.map(function (chemical) {
            return (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "tint",
              "width": "150px",
              "lineHeight": "21px",
              "content": "(" + chemical.volume + ") " + chemical.title,
              "onClick": function () {
                function onClick() {
                  return act('dispense', {
                    reagent: chemical.id
                  });
                }

                return onClick;
              }()
            }, chemical.id);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Disposal controls",
        "buttons": beakerTransferAmounts.map(function (amount) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "minus",
            "disabled": recording,
            "content": amount,
            "onClick": function () {
              function onClick() {
                return act('remove', {
                  amount: amount
                });
              }

              return onClick;
            }()
          }, amount);
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Beaker",
            "buttons": !!data.isBeakerLoaded && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "eject",
              "content": "Eject",
              "disabled": !data.isBeakerLoaded,
              "onClick": function () {
                function onClick() {
                  return act('eject');
                }

                return onClick;
              }()
            }),
            children: recording && 'Virtual beaker' || data.isBeakerLoaded && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "initial": 0,
              "value": data.beakerCurrentVolume
            }), (0, _inferno.createTextVNode)("/"), data.beakerMaxVolume, (0, _inferno.createTextVNode)(" units")], 0) || 'No beaker'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Contents",
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "label",
              children: !data.isBeakerLoaded && !recording && 'N/A' || beakerContents.length === 0 && 'Nothing'
            }), beakerContents.map(function (chemical) {
              return (0, _inferno.createComponentVNode)(2, _components.Box, {
                "color": "label",
                children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
                  "initial": 0,
                  "value": chemical.volume
                }), ' ', "units of ", chemical.name]
              }, chemical.name);
            })]
          })]
        })
      })]
    })
  });
};

exports.PortableChemMixer = PortableChemMixer;

/***/ }),

/***/ "./packages/tgui/interfaces/PortableGenerator.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/PortableGenerator.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.PortableGenerator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var PortableGenerator = function PortableGenerator(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var stack_percent = data.stack_percent;
  var stackPercentState = stack_percent > 50 && 'good' || stack_percent > 15 && 'average' || 'bad';
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 450,
    "height": 340,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [!data.anchored && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "Generator not anchored."
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Status",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power switch",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.active ? 'power-off' : 'times',
              "onClick": function () {
                function onClick() {
                  return act('toggle_power');
                }

                return onClick;
              }(),
              "disabled": !data.ready_to_boot,
              children: data.active ? 'On' : 'Off'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": data.sheet_name + ' sheets',
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": stackPercentState,
              children: data.sheets
            }), data.sheets >= 1 && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "eject",
              "disabled": data.active,
              "onClick": function () {
                function onClick() {
                  return act('eject');
                }

                return onClick;
              }(),
              children: "Eject"
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current sheet level",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.stack_percent / 100,
              "ranges": {
                good: [0.1, Infinity],
                average: [0.01, 0.1],
                bad: [-Infinity, 0.01]
              }
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Heat level",
            children: data.current_heat < 100 ? (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": "good",
              children: "Nominal"
            }) : data.current_heat < 200 ? (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": "average",
              children: "Caution"
            }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": "bad",
              children: "DANGER"
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Output",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current output",
            children: data.power_output
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Adjust output",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "minus",
              "onClick": function () {
                function onClick() {
                  return act('lower_power');
                }

                return onClick;
              }(),
              children: data.power_generated
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "plus",
              "onClick": function () {
                function onClick() {
                  return act('higher_power');
                }

                return onClick;
              }(),
              children: data.power_generated
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power available",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": !data.connected && 'bad',
              children: data.connected ? data.power_available : "Unconnected"
            })
          })]
        })
      })]
    })
  });
};

exports.PortableGenerator = PortableGenerator;

/***/ }),

/***/ "./packages/tgui/interfaces/PortablePump.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/PortablePump.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.PortablePump = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _PortableAtmos = __webpack_require__(/*! ./common/PortableAtmos */ "./packages/tgui/interfaces/common/PortableAtmos.js");

var PortablePump = function PortablePump(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var direction = data.direction,
      holding = data.holding,
      target_pressure = data.target_pressure,
      default_pressure = data.default_pressure,
      min_pressure = data.min_pressure,
      max_pressure = data.max_pressure;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 315,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _PortableAtmos.PortableBasicInfo), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Pump",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": direction ? 'sign-in-alt' : 'sign-out-alt',
          "content": direction ? 'In' : 'Out',
          "selected": direction,
          "onClick": function () {
            function onClick() {
              return act('direction');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Output",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": target_pressure,
              "unit": "kPa",
              "width": "75px",
              "minValue": min_pressure,
              "maxValue": max_pressure,
              "step": 10,
              "onChange": function () {
                function onChange(e, value) {
                  return act('pressure', {
                    pressure: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Presets",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "minus",
              "disabled": target_pressure === min_pressure,
              "onClick": function () {
                function onClick() {
                  return act('pressure', {
                    pressure: 'min'
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "disabled": target_pressure === default_pressure,
              "onClick": function () {
                function onClick() {
                  return act('pressure', {
                    pressure: 'reset'
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "plus",
              "disabled": target_pressure === max_pressure,
              "onClick": function () {
                function onClick() {
                  return act('pressure', {
                    pressure: 'max'
                  });
                }

                return onClick;
              }()
            })]
          })]
        })
      })]
    })
  });
};

exports.PortablePump = PortablePump;

/***/ }),

/***/ "./packages/tgui/interfaces/PortableScrubber.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/PortableScrubber.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.PortableScrubber = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _PortableAtmos = __webpack_require__(/*! ./common/PortableAtmos */ "./packages/tgui/interfaces/common/PortableAtmos.js");

var PortableScrubber = function PortableScrubber(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var filter_types = data.filter_types || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 320,
    "height": 350,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _PortableAtmos.PortableBasicInfo), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Filters",
        children: filter_types.map(function (filter) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": filter.enabled ? 'check-square-o' : 'square-o',
            "content": (0, _constants.getGasLabel)(filter.gas_id, filter.gas_name),
            "selected": filter.enabled,
            "onClick": function () {
              function onClick() {
                return act('toggle_filter', {
                  val: filter.gas_id
                });
              }

              return onClick;
            }()
          }, filter.id);
        })
      })]
    })
  });
};

exports.PortableScrubber = PortableScrubber;

/***/ }),

/***/ "./packages/tgui/interfaces/PortableTurret.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/PortableTurret.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.PortableTurret = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var PortableTurret = function PortableTurret(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var silicon_user = data.silicon_user,
      locked = data.locked,
      on = data.on,
      check_weapons = data.check_weapons,
      neutralize_criminals = data.neutralize_criminals,
      neutralize_all = data.neutralize_all,
      neutralize_unidentified = data.neutralize_unidentified,
      neutralize_nonmindshielded = data.neutralize_nonmindshielded,
      neutralize_cyborgs = data.neutralize_cyborgs,
      neutralize_heads = data.neutralize_heads,
      manual_control = data.manual_control,
      allow_manual_control = data.allow_manual_control,
      lasertag_turret = data.lasertag_turret;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 310,
    "height": lasertag_turret ? 110 : 292,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: ["Swipe an ID card to ", locked ? 'unlock' : 'lock', " this interface."]
      }), (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            "buttons": !lasertag_turret && (!!allow_manual_control || !!manual_control && !!silicon_user) && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": manual_control ? "wifi" : "terminal",
              "content": manual_control ? "Remotely Controlled" : "Manual Control",
              "disabled": manual_control,
              "color": "bad",
              "onClick": function () {
                function onClick() {
                  return act('manual');
                }

                return onClick;
              }()
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": on ? 'power-off' : 'times',
              "content": on ? 'On' : 'Off',
              "selected": on,
              "disabled": locked,
              "onClick": function () {
                function onClick() {
                  return act('power');
                }

                return onClick;
              }()
            })
          })
        })
      }), !lasertag_turret && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Target Settings",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "checked": !neutralize_heads,
          "content": "Ignore Command",
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('shootheads');
            }

            return onClick;
          }()
        }),
        children: [(0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "checked": neutralize_all,
          "content": "Non-Security and Non-Command",
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('shootall');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "checked": check_weapons,
          "content": "Unauthorized Weapons",
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('authweapon');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "checked": neutralize_unidentified,
          "content": "Unidentified Life Signs",
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('checkxenos');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "checked": neutralize_nonmindshielded,
          "content": "Non-Mindshielded",
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('checkloyal');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "checked": neutralize_criminals,
          "content": "Wanted Criminals",
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('shootcriminals');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
          "fluid": true,
          "checked": neutralize_cyborgs,
          "content": "Cyborgs",
          "disabled": locked,
          "onClick": function () {
            function onClick() {
              return act('shootborgs');
            }

            return onClick;
          }()
        })]
      })], 0)]
    })
  });
};

exports.PortableTurret = PortableTurret;

/***/ }),

/***/ "./packages/tgui/interfaces/PowerMonitor.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/PowerMonitor.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AreaCharge = exports.PowerMonitorContent = exports.PowerMonitor = exports.powerRank = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var PEAK_DRAW = 500000;

var powerRank = function powerRank(str) {
  var unit = String(str.split(' ')[1]).toLowerCase();
  return ['w', 'kw', 'mw', 'gw'].indexOf(unit);
};

exports.powerRank = powerRank;

var PowerMonitor = function PowerMonitor() {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 550,
    "height": 700,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, PowerMonitorContent)
    })
  });
};

exports.PowerMonitor = PowerMonitor;

var PowerMonitorContent = function PowerMonitorContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var history = data.history;

  var _useLocalState = (0, _backend.useLocalState)(context, 'sortByField', null),
      sortByField = _useLocalState[0],
      setSortByField = _useLocalState[1];

  var supply = history.supply[history.supply.length - 1] || 0;
  var demand = history.demand[history.demand.length - 1] || 0;
  var supplyData = history.supply.map(function (value, i) {
    return [i, value];
  });
  var demandData = history.demand.map(function (value, i) {
    return [i, value];
  });
  var maxValue = Math.max.apply(Math, [PEAK_DRAW].concat(history.supply, history.demand)); // Process area data

  var areas = (0, _fp.flow)([(0, _collections.map)(function (area, i) {
    return Object.assign({}, area, {
      // Generate a unique id
      id: area.name + i
    });
  }), sortByField === 'name' && (0, _collections.sortBy)(function (area) {
    return area.name;
  }), sortByField === 'charge' && (0, _collections.sortBy)(function (area) {
    return -area.charge;
  }), sortByField === 'draw' && (0, _collections.sortBy)(function (area) {
    return -powerRank(area.load);
  }, function (area) {
    return -parseFloat(area.load);
  })])(data.areas);
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Flex, {
    "mx": -0.5,
    "mb": 1,
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "mx": 0.5,
      "width": "200px",
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Supply",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": supply,
              "minValue": 0,
              "maxValue": maxValue,
              "color": "teal",
              children: (0, _math.toFixed)(supply / 1000) + ' kW'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Draw",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": demand,
              "minValue": 0,
              "maxValue": maxValue,
              "color": "pink",
              children: (0, _math.toFixed)(demand / 1000) + ' kW'
            })
          })]
        })
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "mx": 0.5,
      "grow": 1,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "position": "relative",
        "height": "100%",
        children: [(0, _inferno.createComponentVNode)(2, _components.Chart.Line, {
          "fillPositionedParent": true,
          "data": supplyData,
          "rangeX": [0, supplyData.length - 1],
          "rangeY": [0, maxValue],
          "strokeColor": "rgba(0, 181, 173, 1)",
          "fillColor": "rgba(0, 181, 173, 0.25)"
        }), (0, _inferno.createComponentVNode)(2, _components.Chart.Line, {
          "fillPositionedParent": true,
          "data": demandData,
          "rangeX": [0, demandData.length - 1],
          "rangeY": [0, maxValue],
          "strokeColor": "rgba(224, 57, 151, 1)",
          "fillColor": "rgba(224, 57, 151, 0.25)"
        })]
      })
    })]
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
      "mb": 1,
      children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "mr": 2,
        "color": "label",
        children: "Sort by:"
      }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": sortByField === 'name',
        "content": "Name",
        "onClick": function () {
          function onClick() {
            return setSortByField(sortByField !== 'name' && 'name');
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": sortByField === 'charge',
        "content": "Charge",
        "onClick": function () {
          function onClick() {
            return setSortByField(sortByField !== 'charge' && 'charge');
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": sortByField === 'draw',
        "content": "Draw",
        "onClick": function () {
          function onClick() {
            return setSortByField(sortByField !== 'draw' && 'draw');
          }

          return onClick;
        }()
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        "header": true,
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: "Area"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          children: "Charge"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "textAlign": "right",
          children: "Draw"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          "title": "Equipment",
          children: "Eqp"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          "title": "Lighting",
          children: "Lgt"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "collapsing": true,
          "title": "Environment",
          children: "Env"
        })]
      }), areas.map(function (area, i) {
        return (0, _inferno.createVNode)(1, "tr", "Table__row candystripe", [(0, _inferno.createVNode)(1, "td", null, area.name, 0), (0, _inferno.createVNode)(1, "td", "Table__cell text-right text-nowrap", (0, _inferno.createComponentVNode)(2, AreaCharge, {
          "charging": area.charging,
          "charge": area.charge
        }), 2), (0, _inferno.createVNode)(1, "td", "Table__cell text-right text-nowrap", area.load, 0), (0, _inferno.createVNode)(1, "td", "Table__cell text-center text-nowrap", (0, _inferno.createComponentVNode)(2, AreaStatusColorBox, {
          "status": area.eqp
        }), 2), (0, _inferno.createVNode)(1, "td", "Table__cell text-center text-nowrap", (0, _inferno.createComponentVNode)(2, AreaStatusColorBox, {
          "status": area.lgt
        }), 2), (0, _inferno.createVNode)(1, "td", "Table__cell text-center text-nowrap", (0, _inferno.createComponentVNode)(2, AreaStatusColorBox, {
          "status": area.env
        }), 2)], 4, null, area.id);
      })]
    })]
  })], 4);
};

exports.PowerMonitorContent = PowerMonitorContent;

var AreaCharge = function AreaCharge(props) {
  var charging = props.charging,
      charge = props.charge;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Icon, {
    "width": "18px",
    "textAlign": "center",
    "name": charging === 0 && (charge > 50 ? 'battery-half' : 'battery-quarter') || charging === 1 && 'bolt' || charging === 2 && 'battery-full',
    "color": charging === 0 && (charge > 50 ? 'yellow' : 'red') || charging === 1 && 'yellow' || charging === 2 && 'green'
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    "width": "36px",
    "textAlign": "right",
    children: (0, _math.toFixed)(charge) + '%'
  })], 4);
};

exports.AreaCharge = AreaCharge;
AreaCharge.defaultHooks = _react.pureComponentHooks;

var AreaStatusColorBox = function AreaStatusColorBox(props) {
  var status = props.status;
  var power = Boolean(status & 2);
  var mode = Boolean(status & 1);
  var tooltipText = (power ? 'On' : 'Off') + (" [" + (mode ? 'auto' : 'manual') + "]");
  return (0, _inferno.createComponentVNode)(2, _components.ColorBox, {
    "color": power ? 'good' : 'bad',
    "content": mode ? undefined : 'M',
    "title": tooltipText
  });
};

AreaStatusColorBox.defaultHooks = _react.pureComponentHooks;

/***/ }),

/***/ "./packages/tgui/interfaces/ProbingConsole.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/ProbingConsole.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ProbingConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ProbingConsole = function ProbingConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var open = data.open,
      feedback = data.feedback,
      occupant = data.occupant,
      occupant_name = data.occupant_name,
      occupant_status = data.occupant_status;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 330,
    "height": 207,
    "theme": "abductor",
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Machine Report",
            children: feedback
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Scanner",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": open ? 'sign-out-alt' : 'sign-in-alt',
          "content": open ? 'Close' : 'Open',
          "onClick": function () {
            function onClick() {
              return act('door');
            }

            return onClick;
          }()
        }),
        children: occupant && (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Name",
            children: occupant_name
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            "color": occupant_status === 3 ? 'bad' : occupant_status === 2 ? 'average' : 'good',
            children: occupant_status === 3 ? 'Deceased' : occupant_status === 2 ? 'Unconscious' : 'Conscious'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Experiments",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "thermometer",
              "content": "Probe",
              "onClick": function () {
                function onClick() {
                  return act('experiment', {
                    experiment_type: 1
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "brain",
              "content": "Dissect",
              "onClick": function () {
                function onClick() {
                  return act('experiment', {
                    experiment_type: 2
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "search",
              "content": "Analyze",
              "onClick": function () {
                function onClick() {
                  return act('experiment', {
                    experiment_type: 3
                  });
                }

                return onClick;
              }()
            })]
          })]
        }) || (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: "No Subject"
        })
      })]
    })
  });
};

exports.ProbingConsole = ProbingConsole;

/***/ }),

/***/ "./packages/tgui/interfaces/ProximitySensor.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/ProximitySensor.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ProximitySensor = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ProximitySensor = function ProximitySensor(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var minutes = data.minutes,
      seconds = data.seconds,
      timing = data.timing,
      scanning = data.scanning,
      sensitivity = data.sensitivity;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 250,
    "height": 185,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": scanning ? 'lock' : 'unlock',
              "content": scanning ? 'Armed' : 'Not Armed',
              "selected": scanning,
              "onClick": function () {
                function onClick() {
                  return act('scanning');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Detection Range",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "backward",
              "disabled": scanning,
              "onClick": function () {
                function onClick() {
                  return act('sense', {
                    range: -1
                  });
                }

                return onClick;
              }()
            }), ' ', String(sensitivity).padStart(1, '1'), ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "forward",
              "disabled": scanning,
              "onClick": function () {
                function onClick() {
                  return act('sense', {
                    range: 1
                  });
                }

                return onClick;
              }()
            })]
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Auto Arm",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "clock-o",
          "content": timing ? 'Stop' : 'Start',
          "selected": timing,
          "disabled": scanning,
          "onClick": function () {
            function onClick() {
              return act('time');
            }

            return onClick;
          }()
        }),
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "fast-backward",
          "disabled": scanning || timing,
          "onClick": function () {
            function onClick() {
              return act('input', {
                adjust: -30
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "backward",
          "disabled": scanning || timing,
          "onClick": function () {
            function onClick() {
              return act('input', {
                adjust: -1
              });
            }

            return onClick;
          }()
        }), ' ', String(minutes).padStart(2, '0'), ":", String(seconds).padStart(2, '0'), ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "forward",
          "disabled": scanning || timing,
          "onClick": function () {
            function onClick() {
              return act('input', {
                adjust: 1
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "fast-forward",
          "disabled": scanning || timing,
          "onClick": function () {
            function onClick() {
              return act('input', {
                adjust: 30
              });
            }

            return onClick;
          }()
        })]
      })]
    })
  });
};

exports.ProximitySensor = ProximitySensor;

/***/ }),

/***/ "./packages/tgui/interfaces/Radio.js":
/*!*******************************************!*\
  !*** ./packages/tgui/interfaces/Radio.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Radio = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Radio = function Radio(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var freqlock = data.freqlock,
      frequency = data.frequency,
      minFrequency = data.minFrequency,
      maxFrequency = data.maxFrequency,
      listening = data.listening,
      broadcasting = data.broadcasting,
      command = data.command,
      useCommand = data.useCommand,
      subspace = data.subspace,
      subspaceSwitchable = data.subspaceSwitchable;

  var tunedChannel = _constants.RADIO_CHANNELS.find(function (channel) {
    return channel.freq === frequency;
  });

  var channels = (0, _collections.map)(function (value, key) {
    return {
      name: key,
      status: !!value
    };
  })(data.channels); // Calculate window height

  var height = 106;

  if (subspace) {
    if (channels.length > 0) {
      height += channels.length * 21 + 6;
    } else {
      height += 24;
    }
  }

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 360,
    "height": height,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Frequency",
            children: [freqlock && (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": "light-gray",
              children: (0, _math.toFixed)(frequency / 10, 1) + ' kHz'
            }) || (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animate": true,
              "unit": "kHz",
              "step": 0.2,
              "stepPixelSize": 10,
              "minValue": minFrequency / 10,
              "maxValue": maxFrequency / 10,
              "value": frequency / 10,
              "format": function () {
                function format(value) {
                  return (0, _math.toFixed)(value, 1);
                }

                return format;
              }(),
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('frequency', {
                    adjust: value - frequency / 10
                  });
                }

                return onDrag;
              }()
            }), tunedChannel && (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": tunedChannel.color,
              "ml": 2,
              children: ["[", tunedChannel.name, "]"]
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Audio",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "textAlign": "center",
              "width": "37px",
              "icon": listening ? 'volume-up' : 'volume-mute',
              "selected": listening,
              "onClick": function () {
                function onClick() {
                  return act('listen');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "textAlign": "center",
              "width": "37px",
              "icon": broadcasting ? 'microphone' : 'microphone-slash',
              "selected": broadcasting,
              "onClick": function () {
                function onClick() {
                  return act('broadcast');
                }

                return onClick;
              }()
            }), !!command && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "bullhorn",
              "selected": useCommand,
              "content": "High volume " + (useCommand ? 'ON' : 'OFF'),
              "onClick": function () {
                function onClick() {
                  return act('command');
                }

                return onClick;
              }()
            }), !!subspaceSwitchable && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1,
              "icon": "bullhorn",
              "selected": subspace,
              "content": "Subspace Tx " + (subspace ? 'ON' : 'OFF'),
              "onClick": function () {
                function onClick() {
                  return act('subspace');
                }

                return onClick;
              }()
            })]
          }), !!subspace && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Channels",
            children: [channels.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": "bad",
              children: "No encryption keys installed."
            }), channels.map(function (channel) {
              return (0, _inferno.createComponentVNode)(2, _components.Box, {
                children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": channel.status ? 'check-square-o' : 'square-o',
                  "selected": channel.status,
                  "content": channel.name,
                  "onClick": function () {
                    function onClick() {
                      return act('channel', {
                        channel: channel.name
                      });
                    }

                    return onClick;
                  }()
                })
              }, channel.name);
            })]
          })]
        })
      })
    })
  });
};

exports.Radio = Radio;

/***/ }),

/***/ "./packages/tgui/interfaces/RadioactiveMicrolaser.js":
/*!***********************************************************!*\
  !*** ./packages/tgui/interfaces/RadioactiveMicrolaser.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RadioactiveMicrolaser = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var RadioactiveMicrolaser = function RadioactiveMicrolaser(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var irradiate = data.irradiate,
      stealth = data.stealth,
      scanmode = data.scanmode,
      intensity = data.intensity,
      wavelength = data.wavelength,
      on_cooldown = data.on_cooldown,
      cooldown = data.cooldown;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Radioactive Microlaser",
    "width": 320,
    "height": 335,
    "theme": "syndicate",
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Laser Status",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": on_cooldown ? "average" : "good",
              children: on_cooldown ? "Recharging" : "Ready"
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Scanner Controls",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Irradiation",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": irradiate ? 'power-off' : 'times',
              "content": irradiate ? 'On' : 'Off',
              "selected": irradiate,
              "onClick": function () {
                function onClick() {
                  return act('irradiate');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Stealth Mode",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": stealth ? 'eye-slash' : 'eye',
              "content": stealth ? 'On' : 'Off',
              "disabled": !irradiate,
              "selected": stealth,
              "onClick": function () {
                function onClick() {
                  return act('stealth');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Scan Mode",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": scanmode ? 'mortar-pestle' : 'heartbeat',
              "content": scanmode ? 'Scan Reagents' : 'Scan Health',
              "disabled": irradiate && stealth,
              "onClick": function () {
                function onClick() {
                  return act('scanmode');
                }

                return onClick;
              }()
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Laser Settings",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Radiation Intensity",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fast-backward",
              "onClick": function () {
                function onClick() {
                  return act('radintensity', {
                    adjust: -5
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "backward",
              "onClick": function () {
                function onClick() {
                  return act('radintensity', {
                    adjust: -1
                  });
                }

                return onClick;
              }()
            }), ' ', (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": Math.round(intensity),
              "width": "40px",
              "minValue": 1,
              "maxValue": 20,
              "onChange": function () {
                function onChange(e, value) {
                  return act('radintensity', {
                    target: value
                  });
                }

                return onChange;
              }()
            }), ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "forward",
              "onClick": function () {
                function onClick() {
                  return act('radintensity', {
                    adjust: 1
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fast-forward",
              "onClick": function () {
                function onClick() {
                  return act('radintensity', {
                    adjust: 5
                  });
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Radiation Wavelength",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fast-backward",
              "onClick": function () {
                function onClick() {
                  return act('radwavelength', {
                    adjust: -5
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "backward",
              "onClick": function () {
                function onClick() {
                  return act('radwavelength', {
                    adjust: -1
                  });
                }

                return onClick;
              }()
            }), ' ', (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "value": Math.round(wavelength),
              "width": "40px",
              "minValue": 0,
              "maxValue": 120,
              "onChange": function () {
                function onChange(e, value) {
                  return act('radwavelength', {
                    target: value
                  });
                }

                return onChange;
              }()
            }), ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "forward",
              "onClick": function () {
                function onClick() {
                  return act('radwavelength', {
                    adjust: 1
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fast-forward",
              "onClick": function () {
                function onClick() {
                  return act('radwavelength', {
                    adjust: 5
                  });
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Laser Cooldown",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "bold": true,
              children: cooldown
            })
          })]
        })
      })]
    })
  });
};

exports.RadioactiveMicrolaser = RadioactiveMicrolaser;

/***/ }),

/***/ "./packages/tgui/interfaces/RapidPipeDispenser.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/RapidPipeDispenser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RapidPipeDispenser = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ROOT_CATEGORIES = ['Atmospherics', 'Disposals', 'Transit Tubes'];
var ICON_BY_CATEGORY_NAME = {
  'Atmospherics': 'wrench',
  'Disposals': 'trash-alt',
  'Transit Tubes': 'bus',
  'Pipes': 'grip-lines',
  'Disposal Pipes': 'grip-lines',
  'Devices': 'microchip',
  'Heat Exchange': 'thermometer-half',
  'Station Equipment': 'microchip'
};
var PAINT_COLORS = {
  grey: '#bbbbbb',
  amethyst: '#a365ff',
  blue: '#4466ff',
  brown: '#b26438',
  cyan: '#48eae8',
  dark: '#808080',
  green: '#1edd00',
  orange: '#ffa030',
  purple: '#b535ea',
  red: '#ff3333',
  violet: '#6e00f6',
  yellow: '#ffce26'
};
var TOOLS = [{
  name: 'Dispense',
  bitmask: 1
}, {
  name: 'Connect',
  bitmask: 2
}, {
  name: 'Destroy',
  bitmask: 4
}, {
  name: 'Paint',
  bitmask: 8
}];

var RapidPipeDispenser = function RapidPipeDispenser(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var rootCategoryIndex = data.category,
      _data$categories = data.categories,
      categories = _data$categories === void 0 ? [] : _data$categories,
      selected_color = data.selected_color,
      piping_layer = data.piping_layer,
      mode = data.mode;
  var previews = data.preview_rows.flatMap(function (row) {
    return row.previews;
  });

  var _useLocalState = (0, _backend.useLocalState)(context, 'categoryName'),
      categoryName = _useLocalState[0],
      setCategoryName = _useLocalState[1];

  var shownCategory = categories.find(function (category) {
    return category.cat_name === categoryName;
  }) || categories[0];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 425,
    "height": 515,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Category",
            children: ROOT_CATEGORIES.map(function (categoryName, i) {
              return (0, _inferno.createComponentVNode)(2, _components.Button, {
                "selected": rootCategoryIndex === i,
                "icon": ICON_BY_CATEGORY_NAME[categoryName],
                "color": "transparent",
                "content": categoryName,
                "onClick": function () {
                  function onClick() {
                    return act('category', {
                      category: i
                    });
                  }

                  return onClick;
                }()
              }, categoryName);
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Modes",
            children: TOOLS.map(function (tool) {
              return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
                "checked": mode & tool.bitmask,
                "content": tool.name,
                "onClick": function () {
                  function onClick() {
                    return act('mode', {
                      mode: tool.bitmask
                    });
                  }

                  return onClick;
                }()
              }, tool.bitmask);
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Color",
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "width": "64px",
              "color": PAINT_COLORS[selected_color],
              children: selected_color
            }), Object.keys(PAINT_COLORS).map(function (colorName) {
              return (0, _inferno.createComponentVNode)(2, _components.ColorBox, {
                "ml": 1,
                "color": PAINT_COLORS[colorName],
                "onClick": function () {
                  function onClick() {
                    return act('color', {
                      paint_color: colorName
                    });
                  }

                  return onClick;
                }()
              }, colorName);
            })]
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "m": -0.5,
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "m": 0.5,
          children: (0, _inferno.createComponentVNode)(2, _components.Section, {
            children: [rootCategoryIndex === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
              "mb": 1,
              children: [1, 2, 3].map(function (layer) {
                return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
                  "fluid": true,
                  "checked": layer === piping_layer,
                  "content": 'Layer ' + layer,
                  "onClick": function () {
                    function onClick() {
                      return act('piping_layer', {
                        piping_layer: layer
                      });
                    }

                    return onClick;
                  }()
                }, layer);
              })
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "width": "108px",
              children: previews.map(function (preview) {
                return (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "title": preview.dir_name,
                  "selected": preview.selected,
                  "style": {
                    width: '48px',
                    height: '48px',
                    padding: 0
                  },
                  "onClick": function () {
                    function onClick() {
                      return act('setdir', {
                        dir: preview.dir,
                        flipped: preview.flipped
                      });
                    }

                    return onClick;
                  }(),
                  children: (0, _inferno.createComponentVNode)(2, _components.Box, {
                    "className": (0, _react.classes)(['pipes32x32', preview.dir + '-' + preview.icon_state]),
                    "style": {
                      transform: 'scale(1.5) translate(17%, 17%)'
                    }
                  })
                }, preview.dir);
              })
            })]
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "m": 0.5,
          "grow": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Section, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
              children: categories.map(function (category, i) {
                return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
                  "fluid": true,
                  "icon": ICON_BY_CATEGORY_NAME[category.cat_name],
                  "selected": category.cat_name === shownCategory.cat_name,
                  "onClick": function () {
                    function onClick() {
                      return setCategoryName(category.cat_name);
                    }

                    return onClick;
                  }(),
                  children: category.cat_name
                }, category.cat_name);
              })
            }), shownCategory == null ? void 0 : shownCategory.recipes.map(function (recipe) {
              return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
                "fluid": true,
                "ellipsis": true,
                "checked": recipe.selected,
                "content": recipe.pipe_name,
                "title": recipe.pipe_name,
                "onClick": function () {
                  function onClick() {
                    return act('pipe_type', {
                      pipe_type: recipe.pipe_index,
                      category: shownCategory.cat_name
                    });
                  }

                  return onClick;
                }()
              }, recipe.pipe_index);
            })]
          })
        })]
      })]
    })
  });
};

exports.RapidPipeDispenser = RapidPipeDispenser;

/***/ }),

/***/ "./packages/tgui/interfaces/RemoteRobotControl.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/RemoteRobotControl.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RemoteRobotControlContent = exports.RemoteRobotControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var RemoteRobotControl = function RemoteRobotControl(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Remote Robot Control",
    "width": 500,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, RemoteRobotControlContent)
    })
  });
};

exports.RemoteRobotControl = RemoteRobotControl;

var RemoteRobotControlContent = function RemoteRobotControlContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$robots = data.robots,
      robots = _data$robots === void 0 ? [] : _data$robots;

  if (!robots.length) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      children: (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        "textAlign": "center",
        children: "No robots detected"
      })
    });
  }

  return robots.map(function (robot) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": robot.name + " (" + robot.model + ")",
      "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "tools",
        "content": "Interface",
        "onClick": function () {
          function onClick() {
            return act('interface', {
              ref: robot.ref
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "phone-alt",
        "content": "Call",
        "onClick": function () {
          function onClick() {
            return act('callbot', {
              ref: robot.ref
            });
          }

          return onClick;
        }()
      })], 4),
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Status",
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "color": (0, _string.decodeHtmlEntities)(robot.mode) === "Inactive" ? 'bad' : (0, _string.decodeHtmlEntities)(robot.mode) === "Idle" ? 'average' : 'good',
            children: (0, _string.decodeHtmlEntities)(robot.mode)
          }), ' ', robot.hacked && (0, _inferno.createComponentVNode)(2, _components.Box, {
            "inline": true,
            "color": "bad",
            children: "(HACKED)"
          }) || ""]
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Location",
          children: robot.location
        })]
      })
    }, robot.ref);
  });
};

exports.RemoteRobotControlContent = RemoteRobotControlContent;

/***/ }),

/***/ "./packages/tgui/interfaces/RequestKiosk.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/RequestKiosk.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RequestKioskContent = exports.RequestKiosk = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var RequestKiosk = function RequestKiosk(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 550,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, RequestKioskContent)
    })
  });
};

exports.RequestKiosk = RequestKiosk;

var RequestKioskContent = function RequestKioskContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var accountName = data.accountName,
      _data$requests = data.requests,
      requests = _data$requests === void 0 ? [] : _data$requests,
      _data$applicants = data.applicants,
      applicants = _data$applicants === void 0 ? [] : _data$applicants,
      bountyValue = data.bountyValue,
      bountyText = data.bountyText;
  var color = 'rgba(13, 13, 213, 0.7)';
  var backColor = 'rgba(0, 0, 69, 0.5)';
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Current Account",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "power-off",
          "content": "Log out",
          "onClick": function () {
            function onClick() {
              return act('clear');
            }

            return onClick;
          }()
        }),
        children: accountName || 'N/A'
      })
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "mb": 1,
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      "basis": 0,
      children: requests == null ? void 0 : requests.map(function (request) {
        return (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
          "title": request.owner,
          "width": "300px",
          children: (0, _inferno.createComponentVNode)(2, _components.Section, {
            "width": "300px",
            children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
              "spacing": 1,
              "align": "baseline",
              children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "bold": true,
                "width": "310px",
                children: request.owner
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "width": "100px",
                children: (0, _format.formatMoney)(request.value) + ' cr'
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                  "fluid": true,
                  "icon": "pen-fancy",
                  "content": "Apply",
                  "onClick": function () {
                    function onClick() {
                      return act('apply', {
                        request: request.acc_number
                      });
                    }

                    return onClick;
                  }()
                }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "fluid": true,
                  "icon": "trash-alt",
                  "content": "Delete",
                  "color": "red",
                  "onClick": function () {
                    function onClick() {
                      return act('deleteRequest', {
                        request: request.acc_number
                      });
                    }

                    return onClick;
                  }()
                })]
              })]
            }), (0, _inferno.createComponentVNode)(2, _components.Section, {
              "align": "center",
              children: (0, _inferno.createVNode)(1, "i", null, [(0, _inferno.createTextVNode)("\""), request.description, (0, _inferno.createTextVNode)("\"")], 0)
            }), (0, _inferno.createComponentVNode)(2, _components.Section, {
              "title": "Request Applicants",
              children: applicants == null ? void 0 : applicants.map(function (applicant) {
                return applicant.request_id === request.acc_number && (0, _inferno.createComponentVNode)(2, _components.Flex, {
                  children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                    "grow": 1,
                    "p": 0.5,
                    "backgroundColor": backColor,
                    "width": "510px",
                    "style": {
                      border: "2px solid " + color
                    },
                    children: applicant.name
                  }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                    "align": "end",
                    children: (0, _inferno.createComponentVNode)(2, _components.Button, {
                      "fluid": true,
                      "icon": "cash-register",
                      "onClick": function () {
                        function onClick() {
                          return act('payApplicant', {
                            applicant: applicant.requestee_id,
                            request: request.acc_number
                          });
                        }

                        return onClick;
                      }()
                    })
                  })]
                });
              })
            })]
          }, request.name)
        }, request.name);
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
        "title": "New Bounty",
        "width": "220px",
        "color": "green",
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          children: [(0, _inferno.createComponentVNode)(2, _components.TextArea, {
            "fluid": true,
            "height": "250px",
            "width": "200px",
            "backgroundColor": "black",
            "textColor": "white",
            "onChange": function () {
              function onChange(e, value) {
                return act('bountyText', {
                  bountytext: value
                });
              }

              return onChange;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animate": true,
              "unit": "cr",
              "minValue": 1,
              "maxValue": 1000,
              "value": bountyValue,
              "width": "80px",
              "onChange": function () {
                function onChange(e, value) {
                  return act('bountyVal', {
                    bountyval: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "print",
            "content": "Submit bounty",
            "onClick": function () {
              function onClick() {
                return act('createBounty');
              }

              return onClick;
            }()
          })]
        })
      })
    })]
  })], 4);
};

exports.RequestKioskContent = RequestKioskContent;

/***/ }),

/***/ "./packages/tgui/interfaces/RoboticsControlConsole.js":
/*!************************************************************!*\
  !*** ./packages/tgui/interfaces/RoboticsControlConsole.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RoboticsControlConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var RoboticsControlConsole = function RoboticsControlConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 1),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  var can_hack = data.can_hack,
      can_convert = data.can_convert,
      _data$cyborgs = data.cyborgs,
      cyborgs = _data$cyborgs === void 0 ? [] : _data$cyborgs,
      _data$drones = data.drones,
      drones = _data$drones === void 0 ? [] : _data$drones;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 460,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "icon": "list",
          "lineHeight": "23px",
          "selected": tab === 1,
          "onClick": function () {
            function onClick() {
              return setTab(1);
            }

            return onClick;
          }(),
          children: ["Cyborgs (", cyborgs.length, ")"]
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "icon": "list",
          "lineHeight": "23px",
          "selected": tab === 2,
          "onClick": function () {
            function onClick() {
              return setTab(2);
            }

            return onClick;
          }(),
          children: ["Drones (", drones.length, ")"]
        })]
      }), tab === 1 && (0, _inferno.createComponentVNode)(2, Cyborgs, {
        "cyborgs": cyborgs,
        "can_hack": can_hack,
        "can_convert": can_convert
      }), tab === 2 && (0, _inferno.createComponentVNode)(2, Drones, {
        "drones": drones
      })]
    })
  });
};

exports.RoboticsControlConsole = RoboticsControlConsole;

var Cyborgs = function Cyborgs(props, context) {
  var cyborgs = props.cyborgs,
      can_hack = props.can_hack,
      can_convert = props.can_convert;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  if (!cyborgs.length) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No cyborg units detected within access parameters"
    });
  }

  return cyborgs.map(function (cyborg) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": cyborg.name,
      "buttons": (0, _inferno.createFragment)([!!can_hack && !cyborg.emagged && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "terminal",
        "content": "Hack",
        "color": "bad",
        "onClick": function () {
          function onClick() {
            return act('magbot', {
              ref: cyborg.ref
            });
          }

          return onClick;
        }()
      }), !!can_convert && !cyborg.servant && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "terminal",
        "content": "Convert",
        "color": "bad",
        "onClick": function () {
          function onClick() {
            return act('convert', {
              ref: cyborg.ref
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
        "icon": cyborg.locked_down ? 'unlock' : 'lock',
        "color": cyborg.locked_down ? 'good' : 'default',
        "content": cyborg.locked_down ? "Release" : "Lockdown",
        "onClick": function () {
          function onClick() {
            return act('stopbot', {
              ref: cyborg.ref
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
        "icon": "bomb",
        "content": "Detonate",
        "color": "bad",
        "onClick": function () {
          function onClick() {
            return act('killbot', {
              ref: cyborg.ref
            });
          }

          return onClick;
        }()
      })], 0),
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Status",
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": cyborg.status ? 'bad' : cyborg.locked_down ? 'average' : 'good',
            children: cyborg.status ? "Not Responding" : cyborg.locked_down ? "Locked Down" : "Nominal"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Charge",
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": cyborg.charge <= 30 ? 'bad' : cyborg.charge <= 70 ? 'average' : 'good',
            children: typeof cyborg.charge === 'number' ? cyborg.charge + "%" : "Not Found"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Module",
          children: cyborg.module
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Master AI",
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": cyborg.synchronization ? 'default' : 'average',
            children: cyborg.synchronization || "None"
          })
        })]
      })
    }, cyborg.ref);
  });
};

var Drones = function Drones(props, context) {
  var drones = props.drones;

  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act;

  if (!drones.length) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      children: "No drone units detected within access parameters"
    });
  }

  return drones.map(function (drone) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": drone.name,
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
        "icon": "bomb",
        "content": "Detonate",
        "color": "bad",
        "onClick": function () {
          function onClick() {
            return act('killdrone', {
              ref: drone.ref
            });
          }

          return onClick;
        }()
      }),
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Status",
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": drone.status ? 'bad' : 'good',
            children: drone.status ? "Not Responding" : 'Nominal'
          })
        })
      })
    }, drone.ref);
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Roulette.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/Roulette.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Roulette = exports.RouletteBetTable = exports.RouletteBoard = exports.RouletteNumberButton = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var getNumberColor = function getNumberColor(number) {
  if (number === 0) {
    return 'green';
  }

  var evenRedRanges = [[1, 10], [19, 28]];
  var oddRed = true;

  for (var i = 0; i < evenRedRanges.length; i++) {
    var range = evenRedRanges[i];

    if (number >= range[0] && number <= range[1]) {
      oddRed = false;
      break;
    }
  }

  var isOdd = number % 2 === 0;
  return (oddRed ? isOdd : !isOdd) ? 'red' : 'black';
};

var RouletteNumberButton = function RouletteNumberButton(props, context) {
  var number = props.number;

  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act;

  return (0, _inferno.createComponentVNode)(2, _components.Button, {
    "bold": true,
    "content": number,
    "color": getNumberColor(number),
    "width": "40px",
    "height": "28px",
    "fontSize": "20px",
    "textAlign": "center",
    "mb": 0,
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: number
        });
      }

      return onClick;
    }()
  });
};

exports.RouletteNumberButton = RouletteNumberButton;

var RouletteBoard = function RouletteBoard(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act;

  var firstRow = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36];
  var secondRow = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35];
  var thirdRow = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34];
  return (0, _inferno.createVNode)(1, "table", "Table", [(0, _inferno.createVNode)(1, "tr", "Roulette__board-row", [(0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "content": "0",
    "color": "transparent",
    "height": "88px",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: 0
        });
      }

      return onClick;
    }()
  }), 2, {
    "rowSpan": "3"
  }), firstRow.map(function (number) {
    return (0, _inferno.createVNode)(1, "td", "Roulette__board-cell Table__cell-collapsing", (0, _inferno.createComponentVNode)(2, RouletteNumberButton, {
      "number": number
    }), 2, null, number);
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "2 to 1",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "s3rd col"
        });
      }

      return onClick;
    }()
  }), 2)], 0), (0, _inferno.createVNode)(1, "tr", null, [secondRow.map(function (number) {
    return (0, _inferno.createVNode)(1, "td", "Roulette__board-cell Table__cell-collapsing", (0, _inferno.createComponentVNode)(2, RouletteNumberButton, {
      "number": number
    }), 2, null, number);
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "2 to 1",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "s2nd col"
        });
      }

      return onClick;
    }()
  }), 2)], 0), (0, _inferno.createVNode)(1, "tr", null, [thirdRow.map(function (number) {
    return (0, _inferno.createVNode)(1, "td", "Roulette__board-cell Table__cell-collapsing", (0, _inferno.createComponentVNode)(2, RouletteNumberButton, {
      "number": number
    }), 2, null, number);
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "2 to 1",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "s1st col"
        });
      }

      return onClick;
    }()
  }), 2)], 0), (0, _inferno.createVNode)(1, "tr", null, [(0, _inferno.createVNode)(1, "td"), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "1st 12",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "s1-12"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "4"
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "2nd 12",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "s13-24"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "4"
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "3rd 12",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "s25-36"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "4"
  })], 4), (0, _inferno.createVNode)(1, "tr", null, [(0, _inferno.createVNode)(1, "td"), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "1-18",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "s1-18"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "2"
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "Even",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "even"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "2"
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "Black",
    "color": "black",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "black"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "2"
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "Red",
    "color": "red",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "red"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "2"
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "Odd",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "odd"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "2"
  }), (0, _inferno.createVNode)(1, "td", "Roulette__board-cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "bold": true,
    "content": "19-36",
    "color": "transparent",
    "className": "Roulette__board-extrabutton",
    "onClick": function () {
      function onClick() {
        return act('ChangeBetType', {
          type: "s19-36"
        });
      }

      return onClick;
    }()
  }), 2, {
    "colSpan": "2"
  })], 4)], 4, {
    "style": {
      // Setting it to 1 px makes sure it always takes up minimum width
      'width': '1px'
    }
  });
};

exports.RouletteBoard = RouletteBoard;

var RouletteBetTable = function RouletteBetTable(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var _useLocalState = (0, _backend.useLocalState)(context, 'customBet', 500),
      customBet = _useLocalState[0],
      setCustomBet = _useLocalState[1];

  var BetType = data.BetType;

  if (BetType.startsWith('s')) {
    BetType = BetType.substring(1, BetType.length);
  }

  return (0, _inferno.createVNode)(1, "table", "Roulette__lowertable", [(0, _inferno.createVNode)(1, "tr", null, [(0, _inferno.createVNode)(1, "th", (0, _react.classes)(['Roulette', 'Roulette__lowertable--cell', 'Roulette__lowertable--header']), "Last Spun:", 16), (0, _inferno.createVNode)(1, "th", (0, _react.classes)(['Roulette', 'Roulette__lowertable--cell', 'Roulette__lowertable--header']), "Current Bet:", 16)], 4), (0, _inferno.createVNode)(1, "tr", null, [(0, _inferno.createVNode)(1, "td", (0, _react.classes)(['Roulette', 'Roulette__lowertable--cell', 'Roulette__lowertable--spinresult', 'Roulette__lowertable--spinresult-' + getNumberColor(data.LastSpin)]), data.LastSpin, 0), (0, _inferno.createVNode)(1, "td", (0, _react.classes)(['Roulette', 'Roulette__lowertable--cell', 'Roulette__lowertable--betscell']), [(0, _inferno.createComponentVNode)(2, _components.Box, {
    "bold": true,
    "mt": 1,
    "mb": 1,
    "fontSize": "25px",
    "textAlign": "center",
    children: [data.BetAmount, " cr on ", BetType]
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "ml": 1,
    "mr": 1,
    children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "content": "Bet 10 cr",
      "onClick": function () {
        function onClick() {
          return act('ChangeBetAmount', {
            amount: 10
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "content": "Bet 50 cr",
      "onClick": function () {
        function onClick() {
          return act('ChangeBetAmount', {
            amount: 50
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "content": "Bet 100 cr",
      "onClick": function () {
        function onClick() {
          return act('ChangeBetAmount', {
            amount: 100
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "content": "Bet 500 cr",
      "onClick": function () {
        function onClick() {
          return act('ChangeBetAmount', {
            amount: 500
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "content": "Bet custom amount...",
          "onClick": function () {
            function onClick() {
              return act('ChangeBetAmount', {
                amount: customBet
              });
            }

            return onClick;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        "size": 0.1,
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": customBet,
          "minValue": 0,
          "maxValue": 1000,
          "step": 10,
          "stepPixelSize": 4,
          "width": "40px",
          "onChange": function () {
            function onChange(e, value) {
              return setCustomBet(value);
            }

            return onChange;
          }()
        })
      })]
    })]
  })], 4)], 4), (0, _inferno.createVNode)(1, "tr", null, (0, _inferno.createVNode)(1, "td", null, (0, _inferno.createComponentVNode)(2, _components.Box, {
    "bold": true,
    "m": 1,
    "fontSize": "14px",
    "textAlign": "center",
    children: "Swipe an ID card with a connected account to spin!"
  }), 2, {
    "colSpan": "2"
  }), 2), (0, _inferno.createVNode)(1, "tr", null, [(0, _inferno.createVNode)(1, "td", "Roulette__lowertable--cell", [(0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    "bold": true,
    "mr": 1,
    children: "House Balance:"
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    children: data.HouseBalance ? data.HouseBalance + ' cr' : "None"
  })], 4), (0, _inferno.createVNode)(1, "td", "Roulette__lowertable--cell", (0, _inferno.createComponentVNode)(2, _components.Button, {
    "fluid": true,
    "content": data.IsAnchored ? "Bolted" : "Unbolted",
    "m": 1,
    "color": "transparent",
    "textAlign": "center",
    "onClick": function () {
      function onClick() {
        return act('anchor');
      }

      return onClick;
    }()
  }), 2)], 4)], 4);
};

exports.RouletteBetTable = RouletteBetTable;

var Roulette = function Roulette(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 603,
    "height": 475,
    "theme": "cardtable",
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, RouletteBoard), (0, _inferno.createComponentVNode)(2, RouletteBetTable)]
    })
  });
};

exports.Roulette = Roulette;

/***/ }),

/***/ "./packages/tgui/interfaces/SatelliteControl.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/SatelliteControl.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SatelliteControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _LabeledList = __webpack_require__(/*! ../components/LabeledList */ "./packages/tgui/components/LabeledList.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var SatelliteControl = function SatelliteControl(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var satellites = data.satellites || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 305,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [data.meteor_shield && (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _LabeledList.LabeledListItem, {
            "label": "Coverage",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.meteor_shield_coverage / data.meteor_shield_coverage_max,
              "content": 100 * data.meteor_shield_coverage / data.meteor_shield_coverage_max + '%',
              "ranges": {
                good: [1, Infinity],
                average: [0.30, 1],
                bad: [-Infinity, 0.30]
              }
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Satellite Controls",
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mr": -1,
          children: satellites.map(function (satellite) {
            return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
              "checked": satellite.active,
              "content": "#" + satellite.id + " " + satellite.mode,
              "onClick": function () {
                function onClick() {
                  return act('toggle', {
                    id: satellite.id
                  });
                }

                return onClick;
              }()
            }, satellite.id);
          })
        })
      })]
    })
  });
};

exports.SatelliteControl = SatelliteControl;

/***/ }),

/***/ "./packages/tgui/interfaces/ScannerGate.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/ScannerGate.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ScannerGate = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _InterfaceLockNoticeBox = __webpack_require__(/*! ./common/InterfaceLockNoticeBox */ "./packages/tgui/interfaces/common/InterfaceLockNoticeBox.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var DISEASE_THEASHOLD_LIST = ['Positive', 'Harmless', 'Minor', 'Medium', 'Harmful', 'Dangerous', 'BIOHAZARD'];
var TARGET_SPECIES_LIST = [{
  name: 'Human',
  value: 'human'
}, {
  name: 'Lizardperson',
  value: 'lizard'
}, {
  name: 'Flyperson',
  value: 'fly'
}, {
  name: 'Felinid',
  value: 'felinid'
}, {
  name: 'Plasmaman',
  value: 'plasma'
}, {
  name: 'Mothperson',
  value: 'moth'
}, {
  name: 'Jellyperson',
  value: 'jelly'
}, {
  name: 'Podperson',
  value: 'pod'
}, {
  name: 'Golem',
  value: 'golem'
}, {
  name: 'Zombie',
  value: 'zombie'
}];
var TARGET_NUTRITION_LIST = [{
  name: 'Starving',
  value: 150
}, {
  name: 'Obese',
  value: 600
}];

var ScannerGate = function ScannerGate(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 300,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _InterfaceLockNoticeBox.InterfaceLockNoticeBox, {
        "onLockedStatusChange": function () {
          function onLockedStatusChange() {
            return act('toggle_lock');
          }

          return onLockedStatusChange;
        }()
      }), !data.locked && (0, _inferno.createComponentVNode)(2, ScannerGateControl)]
    })
  });
};

exports.ScannerGate = ScannerGate;
var SCANNER_GATE_ROUTES = {
  Off: {
    title: 'Scanner Mode: Off',
    component: function () {
      function component() {
        return ScannerGateOff;
      }

      return component;
    }()
  },
  Wanted: {
    title: 'Scanner Mode: Wanted',
    component: function () {
      function component() {
        return ScannerGateWanted;
      }

      return component;
    }()
  },
  Guns: {
    title: 'Scanner Mode: Guns',
    component: function () {
      function component() {
        return ScannerGateGuns;
      }

      return component;
    }()
  },
  Mindshield: {
    title: 'Scanner Mode: Mindshield',
    component: function () {
      function component() {
        return ScannerGateMindshield;
      }

      return component;
    }()
  },
  Disease: {
    title: 'Scanner Mode: Disease',
    component: function () {
      function component() {
        return ScannerGateDisease;
      }

      return component;
    }()
  },
  Species: {
    title: 'Scanner Mode: Species',
    component: function () {
      function component() {
        return ScannerGateSpecies;
      }

      return component;
    }()
  },
  Nutrition: {
    title: 'Scanner Mode: Nutrition',
    component: function () {
      function component() {
        return ScannerGateNutrition;
      }

      return component;
    }()
  },
  Nanites: {
    title: 'Scanner Mode: Nanites',
    component: function () {
      function component() {
        return ScannerGateNanites;
      }

      return component;
    }()
  }
};

var ScannerGateControl = function ScannerGateControl(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var scan_mode = data.scan_mode;
  var route = SCANNER_GATE_ROUTES[scan_mode] || SCANNER_GATE_ROUTES.off;
  var Component = route.component();
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": route.title,
    "buttons": scan_mode !== 'Off' && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "arrow-left",
      "content": "back",
      "onClick": function () {
        function onClick() {
          return act('set_mode', {
            new_mode: 'Off'
          });
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, Component)
  });
};

var ScannerGateOff = function ScannerGateOff(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act;

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: "Select a scanning mode below."
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Wanted",
      "onClick": function () {
        function onClick() {
          return act('set_mode', {
            new_mode: 'Wanted'
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Guns",
      "onClick": function () {
        function onClick() {
          return act('set_mode', {
            new_mode: 'Guns'
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Mindshield",
      "onClick": function () {
        function onClick() {
          return act('set_mode', {
            new_mode: 'Mindshield'
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Disease",
      "onClick": function () {
        function onClick() {
          return act('set_mode', {
            new_mode: 'Disease'
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Species",
      "onClick": function () {
        function onClick() {
          return act('set_mode', {
            new_mode: 'Species'
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Nutrition",
      "onClick": function () {
        function onClick() {
          return act('set_mode', {
            new_mode: 'Nutrition'
          });
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Nanites",
      "onClick": function () {
        function onClick() {
          return act('set_mode', {
            new_mode: 'Nanites'
          });
        }

        return onClick;
      }()
    })]
  })], 4);
};

var ScannerGateWanted = function ScannerGateWanted(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      data = _useBackend4.data;

  var reverse = data.reverse;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: ["Trigger if the person scanned ", reverse ? 'does not have' : 'has', ' ', "any warrants for their arrest."]
  }), (0, _inferno.createComponentVNode)(2, ScannerGateMode)], 4);
};

var ScannerGateGuns = function ScannerGateGuns(props, context) {
  var _useBackend5 = (0, _backend.useBackend)(context),
      data = _useBackend5.data;

  var reverse = data.reverse;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: ["Trigger if the person scanned ", reverse ? 'does not have' : 'has', ' ', "any guns."]
  }), (0, _inferno.createComponentVNode)(2, ScannerGateMode)], 4);
};

var ScannerGateMindshield = function ScannerGateMindshield(props, context) {
  var _useBackend6 = (0, _backend.useBackend)(context),
      data = _useBackend6.data;

  var reverse = data.reverse;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: ["Trigger if the person scanned ", reverse ? 'does not have' : 'has', ' ', "a mindshield."]
  }), (0, _inferno.createComponentVNode)(2, ScannerGateMode)], 4);
};

var ScannerGateDisease = function ScannerGateDisease(props, context) {
  var _useBackend7 = (0, _backend.useBackend)(context),
      act = _useBackend7.act,
      data = _useBackend7.data;

  var reverse = data.reverse,
      disease_threshold = data.disease_threshold;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: ["Trigger if the person scanned ", reverse ? 'does not have' : 'has', ' ', "a disease equal or worse than ", disease_threshold, "."]
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: DISEASE_THEASHOLD_LIST.map(function (threshold) {
      return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": threshold === disease_threshold,
        "content": threshold,
        "onClick": function () {
          function onClick() {
            return act('set_disease_threshold', {
              new_threshold: threshold
            });
          }

          return onClick;
        }()
      }, threshold);
    })
  }), (0, _inferno.createComponentVNode)(2, ScannerGateMode)], 4);
};

var ScannerGateSpecies = function ScannerGateSpecies(props, context) {
  var _useBackend8 = (0, _backend.useBackend)(context),
      act = _useBackend8.act,
      data = _useBackend8.data;

  var reverse = data.reverse,
      target_species = data.target_species;
  var species = TARGET_SPECIES_LIST.find(function (species) {
    return species.value === target_species;
  });
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: ["Trigger if the person scanned is ", reverse ? 'not' : '', ' ', "of the ", species.name, " species.", target_species === 'zombie' && ' All zombie types will be detected, including dormant zombies.']
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: TARGET_SPECIES_LIST.map(function (species) {
      return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": species.value === target_species,
        "content": species.name,
        "onClick": function () {
          function onClick() {
            return act('set_target_species', {
              new_species: species.value
            });
          }

          return onClick;
        }()
      }, species.value);
    })
  }), (0, _inferno.createComponentVNode)(2, ScannerGateMode)], 4);
};

var ScannerGateNutrition = function ScannerGateNutrition(props, context) {
  var _useBackend9 = (0, _backend.useBackend)(context),
      act = _useBackend9.act,
      data = _useBackend9.data;

  var reverse = data.reverse,
      target_nutrition = data.target_nutrition;
  var nutrition = TARGET_NUTRITION_LIST.find(function (nutrition) {
    return nutrition.value === target_nutrition;
  });
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: ["Trigger if the person scanned ", reverse ? 'does not have' : 'has', ' ', "the ", nutrition.name, " nutrition level."]
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: TARGET_NUTRITION_LIST.map(function (nutrition) {
      return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
        "checked": nutrition.value === target_nutrition,
        "content": nutrition.name,
        "onClick": function () {
          function onClick() {
            return act('set_target_nutrition', {
              new_nutrition: nutrition.name
            });
          }

          return onClick;
        }()
      }, nutrition.name);
    })
  }), (0, _inferno.createComponentVNode)(2, ScannerGateMode)], 4);
};

var ScannerGateNanites = function ScannerGateNanites(props, context) {
  var _useBackend10 = (0, _backend.useBackend)(context),
      act = _useBackend10.act,
      data = _useBackend10.data;

  var reverse = data.reverse,
      nanite_cloud = data.nanite_cloud;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: ["Trigger if the person scanned ", reverse ? 'does not have' : 'has', ' ', "nanite cloud ", nanite_cloud, "."]
  }), (0, _inferno.createComponentVNode)(2, _components.Box, {
    "mb": 2,
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Cloud ID",
        children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": nanite_cloud,
          "width": "65px",
          "minValue": 1,
          "maxValue": 100,
          "stepPixelSize": 2,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_nanite_cloud', {
                new_cloud: value
              });
            }

            return onChange;
          }()
        })
      })
    })
  }), (0, _inferno.createComponentVNode)(2, ScannerGateMode)], 4);
};

var ScannerGateMode = function ScannerGateMode(props, context) {
  var _useBackend11 = (0, _backend.useBackend)(context),
      act = _useBackend11.act,
      data = _useBackend11.data;

  var reverse = data.reverse;
  return (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
      "label": "Scanning Mode",
      children: (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": reverse ? 'Inverted' : 'Default',
        "icon": reverse ? 'random' : 'long-arrow-alt-right',
        "onClick": function () {
          function onClick() {
            return act('toggle_reverse');
          }

          return onClick;
        }(),
        "color": reverse ? 'bad' : 'good'
      })
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/SeedExtractor.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/SeedExtractor.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SeedExtractor = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

/**
 * This method takes a seed string and splits the values
 * into an object
 */
var splitSeedString = function splitSeedString(text) {
  var re = /([^;=]+)=([^;]+)/g;
  var ret = {};
  var m;

  do {
    m = re.exec(text);

    if (m) {
      ret[m[1]] = m[2] + '';
    }
  } while (m);

  return ret;
};
/**
 * This method splits up the string "name" we get for the seeds
 * and creates an object from it include the value that is the
 * ammount
 *
 * @returns {any[]}
 */


var createSeeds = function createSeeds(seedStrings) {
  var objs = Object.keys(seedStrings).map(function (key) {
    var obj = splitSeedString(key);
    obj.amount = seedStrings[key];
    obj.key = key;
    obj.name = (0, _string.toTitleCase)(obj.name.replace('pack of ', ''));
    return obj;
  });
  return (0, _fp.flow)([(0, _collections.sortBy)(function (item) {
    return item.name;
  })])(objs);
};

var SeedExtractor = function SeedExtractor(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var seeds = createSeeds(data.seeds);
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 1000,
    "height": 400,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Stored seeds:",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          "cellpadding": "3",
          "textAlign": "center",
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            "header": true,
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Name"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Lifespan"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Endurance"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Maturation"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Production"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Yield"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Potency"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Instability"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Stock"
            })]
          }), seeds.map(function (item) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "bold": true,
                children: item.name
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: item.lifespan
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: item.endurance
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: item.maturation
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: item.production
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: item["yield"]
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: item.potency
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: item.instability
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                  "content": "Vend",
                  "onClick": function () {
                    function onClick() {
                      return act('select', {
                        item: item.key
                      });
                    }

                    return onClick;
                  }()
                }), "(", item.amount, " left)"]
              })]
            }, item.key);
          })]
        })
      })
    })
  });
};

exports.SeedExtractor = SeedExtractor;

/***/ }),

/***/ "./packages/tgui/interfaces/ShuttleConsole.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/ShuttleConsole.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ShuttleConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ShuttleConsole = function ShuttleConsole(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var authorization_required = data.authorization_required;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 230,
    children: [!!authorization_required && (0, _inferno.createComponentVNode)(2, _components.Modal, {
      "ml": 1,
      "mt": 1,
      "width": 26,
      "height": 12,
      "fontSize": "28px",
      "fontFamily": "monospace",
      "textAlign": "center",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mt": 2,
          children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
            "name": "minus-circle"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mt": 2,
          "ml": 2,
          "color": "bad",
          children: 'SHUTTLE LOCKED'
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Box, {
        "fontSize": "18px",
        "mt": 4,
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "lineHeight": "40px",
          "icon": "arrow-circle-right",
          "content": "Request Authorization",
          "color": "bad",
          "onClick": function () {
            function onClick() {
              return act('request');
            }

            return onClick;
          }()
        })
      })]
    }), (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, ShuttleConsoleContent)
    })]
  });
};

exports.ShuttleConsole = ShuttleConsole;

var getLocationNameById = function getLocationNameById(locations, id) {
  var _locations$find;

  return locations == null ? void 0 : (_locations$find = locations.find(function (location) {
    return location.id === id;
  })) == null ? void 0 : _locations$find.name;
};

var getLocationIdByName = function getLocationIdByName(locations, name) {
  var _locations$find2;

  return locations == null ? void 0 : (_locations$find2 = locations.find(function (location) {
    return location.name === name;
  })) == null ? void 0 : _locations$find2.id;
};

var ShuttleConsoleContent = function ShuttleConsoleContent(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var status = data.status,
      locked = data.locked,
      authorization_required = data.authorization_required,
      destination = data.destination,
      docked_location = data.docked_location,
      timer_str = data.timer_str,
      _data$locations = data.locations,
      locations = _data$locations === void 0 ? [] : _data$locations;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "fontSize": "26px",
      "textAlign": "center",
      "fontFamily": "monospace",
      children: timer_str || "00:00"
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "textAlign": "center",
      "fontSize": "14px",
      "mb": 1,
      children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "bold": true,
        children: "STATUS:"
      }), (0, _inferno.createComponentVNode)(2, _components.Box, {
        "inline": true,
        "color": status === "In Transit" ? 'good' : status === "Idle" ? 'average' : status === "Igniting" ? 'average' : 'bad',
        "ml": 1,
        children: status || "Not Available"
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Shuttle Controls",
      "level": 2,
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Location",
          children: docked_location || "Not Available"
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Destination",
          children: locations.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": "bad",
            children: "Not Available"
          }) || locations.length === 1 && (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": "average",
            children: getLocationNameById(locations, destination)
          }) || (0, _inferno.createComponentVNode)(2, _components.Dropdown, {
            "over": true,
            "width": "240px",
            "options": locations.map(function (location) {
              return location.name;
            }),
            "disabled": locked || authorization_required,
            "selected": getLocationNameById(locations, destination) || "Select a Destination",
            "onSelected": function () {
              function onSelected(value) {
                return act('set_destination', {
                  destination: getLocationIdByName(locations, value)
                });
              }

              return onSelected;
            }()
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "content": "Depart",
        "disabled": !getLocationNameById(locations, destination) || locked || authorization_required,
        "mt": 1.5,
        "icon": "arrow-up",
        "textAlign": "center",
        "onClick": function () {
          function onClick() {
            return act('move', {
              shuttle_id: destination
            });
          }

          return onClick;
        }()
      })]
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/ShuttleManipulator.js":
/*!********************************************************!*\
  !*** ./packages/tgui/interfaces/ShuttleManipulator.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ShuttleManipulatorModification = exports.ShuttleManipulatorTemplates = exports.ShuttleManipulatorStatus = exports.ShuttleManipulator = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ShuttleManipulator = function ShuttleManipulator(props, context) {
  var _useLocalState = (0, _backend.useLocalState)(context, 'tab', 1),
      tab = _useLocalState[0],
      setTab = _useLocalState[1];

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Shuttle Manipulator",
    "width": 800,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [(0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === 1,
          "onClick": function () {
            function onClick() {
              return setTab(1);
            }

            return onClick;
          }(),
          children: "Status"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === 2,
          "onClick": function () {
            function onClick() {
              return setTab(2);
            }

            return onClick;
          }(),
          children: "Templates"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === 3,
          "onClick": function () {
            function onClick() {
              return setTab(3);
            }

            return onClick;
          }(),
          children: "Modification"
        })]
      }), tab === 1 && (0, _inferno.createComponentVNode)(2, ShuttleManipulatorStatus), tab === 2 && (0, _inferno.createComponentVNode)(2, ShuttleManipulatorTemplates), tab === 3 && (0, _inferno.createComponentVNode)(2, ShuttleManipulatorModification)]
    })
  });
};

exports.ShuttleManipulator = ShuttleManipulator;

var ShuttleManipulatorStatus = function ShuttleManipulatorStatus(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var shuttles = data.shuttles || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: shuttles.map(function (shuttle) {
        return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "JMP",
              "onClick": function () {
                function onClick() {
                  return act('jump_to', {
                    type: 'mobile',
                    id: shuttle.id
                  });
                }

                return onClick;
              }()
            }, shuttle.id)
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Fly",
              "disabled": !shuttle.can_fly,
              "onClick": function () {
                function onClick() {
                  return act('fly', {
                    id: shuttle.id
                  });
                }

                return onClick;
              }()
            }, shuttle.id)
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: shuttle.name
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: shuttle.id
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: shuttle.status
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: [shuttle.mode, !!shuttle.timer && (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("("), shuttle.timeleft, (0, _inferno.createTextVNode)(")"), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Fast Travel",
              "disabled": !shuttle.can_fast_travel,
              "onClick": function () {
                function onClick() {
                  return act('fast_travel', {
                    id: shuttle.id
                  });
                }

                return onClick;
              }()
            }, shuttle.id)], 0)]
          })]
        }, shuttle.id);
      })
    })
  });
};

exports.ShuttleManipulatorStatus = ShuttleManipulatorStatus;

var ShuttleManipulatorTemplates = function ShuttleManipulatorTemplates(props, context) {
  var _templateObject$selec;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var templateObject = data.templates || {};
  var selected = data.selected || {};

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'templateId', Object.keys(templateObject)[0]),
      selectedTemplateId = _useLocalState2[0],
      setSelectedTemplateId = _useLocalState2[1];

  var actualTemplates = (_templateObject$selec = templateObject[selectedTemplateId]) == null ? void 0 : _templateObject$selec.templates;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
          "vertical": true,
          children: (0, _collections.map)(function (template, templateId) {
            return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": selectedTemplateId === templateId,
              "onClick": function () {
                function onClick() {
                  return setSelectedTemplateId(templateId);
                }

                return onClick;
              }(),
              children: template.port_id
            }, templateId);
          })(templateObject)
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        "basis": 0,
        children: actualTemplates.map(function (actualTemplate) {
          var isSelected = actualTemplate.shuttle_id === selected.shuttle_id; // Whoever made the structure being sent is an asshole

          return (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": actualTemplate.name,
            "level": 2,
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": isSelected ? 'Selected' : 'Select',
              "selected": isSelected,
              "onClick": function () {
                function onClick() {
                  return act('select_template', {
                    shuttle_id: actualTemplate.shuttle_id
                  });
                }

                return onClick;
              }()
            }),
            children: (!!actualTemplate.description || !!actualTemplate.admin_notes) && (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: [!!actualTemplate.description && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Description",
                children: actualTemplate.description
              }), !!actualTemplate.admin_notes && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Admin Notes",
                children: actualTemplate.admin_notes
              })]
            })
          }, actualTemplate.shuttle_id);
        })
      })]
    })
  });
};

exports.ShuttleManipulatorTemplates = ShuttleManipulatorTemplates;

var ShuttleManipulatorModification = function ShuttleManipulatorModification(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var selected = data.selected || {};
  var existingShuttle = data.existing_shuttle || {};
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: selected ? (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
      "level": 2,
      "title": selected.name,
      children: (!!selected.description || !!selected.admin_notes) && (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: [!!selected.description && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Description",
          children: selected.description
        }), !!selected.admin_notes && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Admin Notes",
          children: selected.admin_notes
        })]
      })
    }), existingShuttle ? (0, _inferno.createComponentVNode)(2, _components.Section, {
      "level": 2,
      "title": 'Existing Shuttle: ' + existingShuttle.name,
      children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
          "label": "Status",
          "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Jump To",
            "onClick": function () {
              function onClick() {
                return act('jump_to', {
                  type: 'mobile',
                  id: existingShuttle.id
                });
              }

              return onClick;
            }()
          }),
          children: [existingShuttle.status, !!existingShuttle.timer && (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("("), existingShuttle.timeleft, (0, _inferno.createTextVNode)(")")], 0)]
        })
      })
    }) : (0, _inferno.createComponentVNode)(2, _components.Section, {
      "level": 2,
      "title": "Existing Shuttle: None"
    }), (0, _inferno.createComponentVNode)(2, _components.Section, {
      "level": 2,
      "title": "Status",
      children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "Preview",
        "onClick": function () {
          function onClick() {
            return act('preview', {
              shuttle_id: selected.shuttle_id
            });
          }

          return onClick;
        }()
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": "Load",
        "color": "bad",
        "onClick": function () {
          function onClick() {
            return act('load', {
              shuttle_id: selected.shuttle_id
            });
          }

          return onClick;
        }()
      })]
    })], 0) : 'No shuttle selected'
  });
};

exports.ShuttleManipulatorModification = ShuttleManipulatorModification;

/***/ }),

/***/ "./packages/tgui/interfaces/Signaler.js":
/*!**********************************************!*\
  !*** ./packages/tgui/interfaces/Signaler.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Signaler = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Signaler = function Signaler(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var code = data.code,
      frequency = data.frequency,
      minFrequency = data.minFrequency,
      maxFrequency = data.maxFrequency;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 280,
    "height": 132,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            "size": 1.4,
            "color": "label",
            children: "Frequency:"
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animate": true,
              "unit": "kHz",
              "step": 0.2,
              "stepPixelSize": 6,
              "minValue": minFrequency / 10,
              "maxValue": maxFrequency / 10,
              "value": frequency / 10,
              "format": function () {
                function format(value) {
                  return (0, _math.toFixed)(value, 1);
                }

                return format;
              }(),
              "width": "80px",
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('freq', {
                    freq: value
                  });
                }

                return onDrag;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1.3,
              "icon": "sync",
              "content": "Reset",
              "onClick": function () {
                function onClick() {
                  return act('reset', {
                    reset: "freq"
                  });
                }

                return onClick;
              }()
            })
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
          "mt": 0.6,
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            "size": 1.4,
            "color": "label",
            children: "Code:"
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animate": true,
              "step": 1,
              "stepPixelSize": 6,
              "minValue": 1,
              "maxValue": 100,
              "value": code,
              "width": "80px",
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('code', {
                    code: value
                  });
                }

                return onDrag;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "ml": 1.3,
              "icon": "sync",
              "content": "Reset",
              "onClick": function () {
                function onClick() {
                  return act('reset', {
                    reset: "code"
                  });
                }

                return onClick;
              }()
            })
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Grid, {
          "mt": 0.8,
          children: (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "mb": -0.1,
              "fluid": true,
              "icon": "arrow-up",
              "content": "Send Signal",
              "textAlign": "center",
              "onClick": function () {
                function onClick() {
                  return act('signal');
                }

                return onClick;
              }()
            })
          })
        })]
      })
    })
  });
};

exports.Signaler = Signaler;

/***/ }),

/***/ "./packages/tgui/interfaces/SkillPanel.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/SkillPanel.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SkillPanel = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var skillgreen = {
  color: 'lightgreen',
  fontWeight: 'bold'
};
var skillyellow = {
  color: '#FFDB58',
  fontWeight: 'bold'
};

var SkillPanel = function SkillPanel(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var skills = data.skills || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Manage Skills",
    "width": 600,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": skills.playername,
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: skills.map(function (skill) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": skill.name,
              children: [(0, _inferno.createVNode)(1, "span", null, skill.desc, 0, {
                "style": skillyellow
              }), (0, _inferno.createVNode)(1, "br"), !!skill.level_based && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, Level, {
                "skill_lvl_num": skill.lvl_base_num,
                "skill_lvl": skill.lvl_base
              }), (0, _inferno.createVNode)(1, "br")], 4), "Total Experience: [", skill.value_base, " XP]", (0, _inferno.createVNode)(1, "br"), "XP To Next Level:", skill.level_based ? (0, _inferno.createVNode)(1, "span", null, skill.xp_next_lvl_base, 0) : (0, _inferno.createVNode)(1, "span", null, "[MAXXED]", 16, {
                "style": skillgreen
              }), (0, _inferno.createVNode)(1, "br"), skill.base_readout, (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
                "value": skill.percent_base,
                "color": "good"
              }), (0, _inferno.createVNode)(1, "br"), !!data.admin && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": "Adjust Exp",
                "onClick": function () {
                  function onClick() {
                    return act('adj_exp', {
                      skill: skill.path
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": "Set Exp",
                "onClick": function () {
                  function onClick() {
                    return act('set_exp', {
                      skill: skill.path
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": "Set Level",
                "onClick": function () {
                  function onClick() {
                    return act('set_lvl', {
                      skill: skill.path
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "br")], 4)]
            }, skill.name);
          })
        })
      })
    })
  });
};

exports.SkillPanel = SkillPanel;

var Level = function Level(props) {
  var skill_lvl_num = props.skill_lvl_num,
      skill_lvl = props.skill_lvl;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "inline": true,
    children: ["Level: [", (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "bold": true,
      "textColor": "hsl(" + skill_lvl_num * 50 + ", 50%, 50%)",
      children: skill_lvl
    }), "]"]
  });
};

var XPToNextLevel = function XPToNextLevel(props) {
  var xp_req = props.xp_req,
      xp_prog = props.xp_prog;

  if (xp_req === 0) {
    return (0, _inferno.createVNode)(1, "span", null, "to next level: MAXXED", 16, {
      "style": skillgreen
    });
  }

  return (0, _inferno.createVNode)(1, "span", null, [(0, _inferno.createTextVNode)("XP to next level: ["), xp_prog, (0, _inferno.createTextVNode)(" / "), xp_req, (0, _inferno.createTextVNode)("]")], 0);
};

/***/ }),

/***/ "./packages/tgui/interfaces/SkillStation.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/SkillStation.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SkillStation = exports.TimeFormat = exports.ImplantedSkillchips = exports.InsertedSkillchip = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var InsertedSkillchip = function InsertedSkillchip(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var skillchip_ready = data.skillchip_ready,
      slot_use = data.slot_use,
      slots_used = data.slots_used,
      slots_max = data.slots_max,
      implantable_reason = data.implantable_reason,
      implantable = data.implantable,
      complexity = data.complexity,
      skill_name = data.skill_name,
      skill_desc = data.skill_desc,
      skill_icon = data.skill_icon,
      working = data.working;

  if (!skillchip_ready) {
    return !working && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      "info": true,
      children: "Please insert a skillchip."
    });
  }

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Inserted Skillchip",
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "syringe",
      "disabled": !implantable || !!working,
      "color": implantable ? "good" : "default",
      "onClick": function () {
        function onClick() {
          return act("implant");
        }

        return onClick;
      }(),
      "content": "Implant",
      "tooltip": implantable_reason
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "disabled": !!working,
      "onClick": function () {
        function onClick() {
          return act("eject");
        }

        return onClick;
      }(),
      "content": "Eject"
    })], 4),
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "spacing": 2,
      "height": "100%",
      "width": "100%",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "height": "100%",
        "align": "center",
        children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
          "size": 3,
          "name": skill_icon
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "width": "100%",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Skillchip",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "bold": true,
              children: skill_name
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Description",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "italic": true,
              children: skill_desc
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Complexity",
            children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
              "name": "brain",
              "width": "15px",
              "textAlign": "center"
            }), " ", complexity]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Slot Size",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": slots_used + slot_use > slots_max && "red",
              children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
                "name": "save",
                "width": "15px",
                "textAlign": "center"
              }), " ", slot_use]
            })
          }), !!implantable_reason && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Error",
            "color": implantable ? "good" : "bad",
            children: implantable_reason
          })]
        })
      })]
    })
  });
};

exports.InsertedSkillchip = InsertedSkillchip;

var ImplantedSkillchips = function ImplantedSkillchips(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var slots_used = data.slots_used,
      slots_max = data.slots_max,
      complexity_used = data.complexity_used,
      complexity_max = data.complexity_max,
      working = data.working;
  var current = data.current || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Implanted Skillchips",
    children: [!current.length && "No skillchips detected.", !!current.length && (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
        "header": true,
        children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          children: "Chip"
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "textAlign": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "transparent",
            "icon": "brain",
            "tooltip": "Complexity",
            "tooltipPosition": "top",
            "content": complexity_used + "/" + complexity_max
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "textAlign": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "transparent",
            "icon": "save",
            "tooltip": "Slot Size",
            "tooltipPosition": "top",
            "content": slots_used + "/" + slots_max
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "textAlign": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "transparent",
            "icon": "check",
            "tooltip": "Is Active",
            "tooltipPosition": "top"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "textAlign": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "transparent",
            "icon": "hourglass-half",
            "tooltip": "Cooldown",
            "tooltipPosition": "top"
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
          "textAlign": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "color": "transparent",
            "icon": "tasks",
            "tooltip": "Actions",
            "tooltipPosition": "top"
          })
        })]
      }), current.map(function (skill) {
        return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
              "textAlign": "center",
              "width": "18px",
              "mr": 1,
              "name": skill.icon
            }), skill.name]
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "bold": true,
            "color": !!skill.active && "good" || skill.complexity + complexity_used > complexity_max && "bad" || "grey",
            "textAlign": "center",
            children: skill.complexity
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "bold": true,
            "color": "good",
            "textAlign": "center",
            children: skill.slot_use
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "textAlign": "center",
            children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
              "name": skill.active ? "check" : "times",
              "color": skill.active ? "good" : "bad"
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "textAlign": "center",
            children: skill.cooldown > 0 && Math.ceil(skill.cooldown / 10) + "s" || "0s"
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "textAlign": "center",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "onClick": function () {
                function onClick() {
                  return act("remove", {
                    "ref": skill.ref
                  });
                }

                return onClick;
              }(),
              "icon": skill.removable ? "eject" : "trash",
              "color": skill.removable ? "good" : "bad",
              "tooltip": skill.removable ? "Extract" : "Destroy",
              "tooltipPosition": "left",
              "disabled": skill.cooldown || working
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "onClick": function () {
                function onClick() {
                  return act("toggle_activate", {
                    "ref": skill.ref
                  });
                }

                return onClick;
              }(),
              "icon": skill.active ? "check-square-o" : "square-o",
              "color": skill.active ? "good" : "default",
              "tooltip": !!skill.active_error && !skill.active && skill.active_error || skill.active && "Deactivate" || "Activate",
              "tooltipPosition": "left",
              "disabled": skill.cooldown || working || !skill.active && skill.complexity + complexity_used > complexity_max
            })]
          })]
        }, skill.ref);
      })]
    })]
  });
};

exports.ImplantedSkillchips = ImplantedSkillchips;

var TimeFormat = function TimeFormat(props, context) {
  var value = props.value;
  var seconds = (0, _math.toFixed)(Math.floor(value / 10 % 60)).padStart(2, "0");
  var minutes = (0, _math.toFixed)(Math.floor(value / (10 * 60) % 60)).padStart(2, "0");
  var hours = (0, _math.toFixed)(Math.floor(value / (10 * 60 * 60) % 24)).padStart(2, "0");
  var formattedValue = hours + ":" + minutes + ":" + seconds;
  return formattedValue;
};

exports.TimeFormat = TimeFormat;

var SkillStation = function SkillStation(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      data = _useBackend3.data;

  var working = data.working,
      timeleft = data.timeleft,
      error = data.error;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Skillsoft Station",
    "width": 500,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [!!error && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: error
      }), !!working && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        "danger": true,
        children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
          "direction": "column",
          children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            "mb": 0.5,
            children: "Operation in progress. Please do not leave the chamber."
          }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: ["Time Left: ", (0, _inferno.createComponentVNode)(2, TimeFormat, {
              "value": timeleft
            })]
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, InsertedSkillchip), (0, _inferno.createComponentVNode)(2, ImplantedSkillchips)]
    })
  });
};

exports.SkillStation = SkillStation;

/***/ }),

/***/ "./packages/tgui/interfaces/Sleeper.js":
/*!*********************************************!*\
  !*** ./packages/tgui/interfaces/Sleeper.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Sleeper = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var damageTypes = [{
  label: 'Brute',
  type: 'bruteLoss'
}, {
  label: 'Burn',
  type: 'fireLoss'
}, {
  label: 'Toxin',
  type: 'toxLoss'
}, {
  label: 'Oxygen',
  type: 'oxyLoss'
}];

var Sleeper = function Sleeper(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var open = data.open,
      _data$occupant = data.occupant,
      occupant = _data$occupant === void 0 ? {} : _data$occupant,
      occupied = data.occupied;
  var preSortChems = data.chems || [];
  var chems = preSortChems.sort(function (a, b) {
    var descA = a.name.toLowerCase();
    var descB = b.name.toLowerCase();

    if (descA < descB) {
      return -1;
    }

    if (descA > descB) {
      return 1;
    }

    return 0;
  });
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 310,
    "height": 465,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": occupant.name ? occupant.name : 'No Occupant',
        "minHeight": "210px",
        "buttons": !!occupant.stat && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "bold": true,
          "color": occupant.statstate,
          children: occupant.stat
        }),
        children: !!occupied && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": occupant.health,
          "minValue": occupant.minHealth,
          "maxValue": occupant.maxHealth,
          "ranges": {
            good: [50, Infinity],
            average: [0, 50],
            bad: [-Infinity, 0]
          }
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mt": 1
        }), (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [damageTypes.map(function (type) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": occupant.is_robotic_organism && type.label === 'Toxin' ? 'Corruption' : type.label,
              children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
                "value": occupant[type.type],
                "minValue": 0,
                "maxValue": occupant.maxHealth,
                "color": "bad"
              })
            }, type.type);
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Cells",
            "color": occupant.cloneLoss ? 'bad' : 'good',
            children: occupant.cloneLoss ? 'Damaged' : 'Healthy'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Brain",
            "color": occupant.brainLoss ? 'bad' : 'good',
            children: occupant.brainLoss ? 'Abnormal' : 'Healthy'
          })]
        })], 4)
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Medicines",
        "minHeight": "205px",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": open ? 'door-open' : 'door-closed',
          "content": open ? 'Open' : 'Closed',
          "onClick": function () {
            function onClick() {
              return act('door');
            }

            return onClick;
          }()
        }),
        children: chems.map(function (chem) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "flask",
            "content": chem.name,
            "disabled": !occupied || !chem.allowed,
            "width": "140px",
            "onClick": function () {
              function onClick() {
                return act('inject', {
                  chem: chem.id
                });
              }

              return onClick;
            }()
          }, chem.name);
        })
      })]
    })
  });
};

exports.Sleeper = Sleeper;

/***/ }),

/***/ "./packages/tgui/interfaces/SlimeBodySwapper.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/SlimeBodySwapper.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SlimeBodySwapper = exports.BodyEntry = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var statusMap = {
  Dead: "bad",
  Unconscious: "average",
  Conscious: "good"
};
var occupiedMap = {
  owner: "You Are Here",
  stranger: "Occupied",
  available: "Swap"
};

var BodyEntry = function BodyEntry(props, context) {
  var body = props.body,
      swapFunc = props.swapFunc;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": body.htmlcolor,
      children: body.name
    }),
    "level": 2,
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": occupiedMap[body.occupied],
      "selected": body.occupied === 'owner',
      "color": body.occupied === 'stranger' && 'bad',
      "onClick": function () {
        function onClick() {
          return swapFunc();
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Status",
        "bold": true,
        "color": statusMap[body.status],
        children: body.status
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Jelly",
        children: body.exoticblood
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Location",
        children: body.area
      })]
    })
  });
};

exports.BodyEntry = BodyEntry;

var SlimeBodySwapper = function SlimeBodySwapper(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$bodies = data.bodies,
      bodies = _data$bodies === void 0 ? [] : _data$bodies;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 400,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: bodies.map(function (body) {
          return (0, _inferno.createComponentVNode)(2, BodyEntry, {
            "body": body,
            "swapFunc": function () {
              function swapFunc() {
                return act('swap', {
                  ref: body.ref
                });
              }

              return swapFunc;
            }()
          }, body.name);
        })
      })
    })
  });
};

exports.SlimeBodySwapper = SlimeBodySwapper;

/***/ }),

/***/ "./packages/tgui/interfaces/SmartVend.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/SmartVend.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SmartVend = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var SmartVend = function SmartVend(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 440,
    "height": 550,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Storage",
        "buttons": !!data.isdryer && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.drying ? 'stop' : 'tint',
          "onClick": function () {
            function onClick() {
              return act('Dry');
            }

            return onClick;
          }(),
          children: data.drying ? 'Stop drying' : 'Dry'
        }),
        children: data.contents.length === 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: ["Unfortunately, this ", data.name, " is empty."]
        }) || (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            "header": true,
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: "Item"
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "collapsing": true
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "collapsing": true,
              "textAlign": "center",
              children: data.verb ? data.verb : 'Dispense'
            })]
          }), (0, _collections.map)(function (value, key) {
            return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: value.name
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                "textAlign": "right",
                children: value.amount
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                "collapsing": true,
                children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                  "content": "One",
                  "disabled": value.amount < 1,
                  "onClick": function () {
                    function onClick() {
                      return act('Release', {
                        name: value.name,
                        amount: 1
                      });
                    }

                    return onClick;
                  }()
                }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "content": "Many",
                  "disabled": value.amount <= 1,
                  "onClick": function () {
                    function onClick() {
                      return act('Release', {
                        name: value.name
                      });
                    }

                    return onClick;
                  }()
                })]
              })]
            }, key);
          })(data.contents)]
        })
      })
    })
  });
};

exports.SmartVend = SmartVend;

/***/ }),

/***/ "./packages/tgui/interfaces/Smes.js":
/*!******************************************!*\
  !*** ./packages/tgui/interfaces/Smes.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Smes = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

// Common power multiplier
var POWER_MUL = 1e3;

var Smes = function Smes(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var capacityPercent = data.capacityPercent,
      capacity = data.capacity,
      charge = data.charge,
      inputAttempt = data.inputAttempt,
      inputting = data.inputting,
      inputLevel = data.inputLevel,
      inputLevelMax = data.inputLevelMax,
      inputAvailable = data.inputAvailable,
      outputAttempt = data.outputAttempt,
      outputting = data.outputting,
      outputLevel = data.outputLevel,
      outputLevelMax = data.outputLevelMax,
      outputUsed = data.outputUsed;
  var inputState = capacityPercent >= 100 && 'good' || inputting && 'average' || 'bad';
  var outputState = outputting && 'good' || charge > 0 && 'average' || 'bad';
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 340,
    "height": 350,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Stored Energy",
        children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": capacityPercent * 0.01,
          "ranges": {
            good: [0.5, Infinity],
            average: [0.15, 0.5],
            bad: [-Infinity, 0.15]
          }
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Input",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Charge Mode",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": inputAttempt ? 'sync-alt' : 'times',
              "selected": inputAttempt,
              "onClick": function () {
                function onClick() {
                  return act('tryinput');
                }

                return onClick;
              }(),
              children: inputAttempt ? 'Auto' : 'Off'
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": inputState,
              children: capacityPercent >= 100 && 'Fully Charged' || inputting && 'Charging' || 'Not Charging'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Target Input",
            children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
              "inline": true,
              "width": "100%",
              children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "fast-backward",
                  "disabled": inputLevel === 0,
                  "onClick": function () {
                    function onClick() {
                      return act('input', {
                        target: 'min'
                      });
                    }

                    return onClick;
                  }()
                }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "backward",
                  "disabled": inputLevel === 0,
                  "onClick": function () {
                    function onClick() {
                      return act('input', {
                        adjust: -10000
                      });
                    }

                    return onClick;
                  }()
                })]
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "grow": 1,
                "mx": 1,
                children: (0, _inferno.createComponentVNode)(2, _components.Slider, {
                  "value": inputLevel / POWER_MUL,
                  "fillValue": inputAvailable / POWER_MUL,
                  "minValue": 0,
                  "maxValue": inputLevelMax / POWER_MUL,
                  "step": 5,
                  "stepPixelSize": 4,
                  "format": function () {
                    function format(value) {
                      return (0, _format.formatPower)(value * POWER_MUL, 1);
                    }

                    return format;
                  }(),
                  "onDrag": function () {
                    function onDrag(e, value) {
                      return act('input', {
                        target: value * POWER_MUL
                      });
                    }

                    return onDrag;
                  }()
                })
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "forward",
                  "disabled": inputLevel === inputLevelMax,
                  "onClick": function () {
                    function onClick() {
                      return act('input', {
                        adjust: 10000
                      });
                    }

                    return onClick;
                  }()
                }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "fast-forward",
                  "disabled": inputLevel === inputLevelMax,
                  "onClick": function () {
                    function onClick() {
                      return act('input', {
                        target: 'max'
                      });
                    }

                    return onClick;
                  }()
                })]
              })]
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Available",
            children: (0, _format.formatPower)(inputAvailable)
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Output",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Output Mode",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": outputAttempt ? 'power-off' : 'times',
              "selected": outputAttempt,
              "onClick": function () {
                function onClick() {
                  return act('tryoutput');
                }

                return onClick;
              }(),
              children: outputAttempt ? 'On' : 'Off'
            }),
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": outputState,
              children: outputting ? 'Sending' : charge > 0 ? 'Not Sending' : 'No Charge'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Target Output",
            children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
              "inline": true,
              "width": "100%",
              children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "fast-backward",
                  "disabled": outputLevel === 0,
                  "onClick": function () {
                    function onClick() {
                      return act('output', {
                        target: 'min'
                      });
                    }

                    return onClick;
                  }()
                }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "backward",
                  "disabled": outputLevel === 0,
                  "onClick": function () {
                    function onClick() {
                      return act('output', {
                        adjust: -10000
                      });
                    }

                    return onClick;
                  }()
                })]
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                "grow": 1,
                "mx": 1,
                children: (0, _inferno.createComponentVNode)(2, _components.Slider, {
                  "value": outputLevel / POWER_MUL,
                  "minValue": 0,
                  "maxValue": outputLevelMax / POWER_MUL,
                  "step": 5,
                  "stepPixelSize": 4,
                  "format": function () {
                    function format(value) {
                      return (0, _format.formatPower)(value * POWER_MUL, 1);
                    }

                    return format;
                  }(),
                  "onDrag": function () {
                    function onDrag(e, value) {
                      return act('output', {
                        target: value * POWER_MUL
                      });
                    }

                    return onDrag;
                  }()
                })
              }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
                children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "forward",
                  "disabled": outputLevel === outputLevelMax,
                  "onClick": function () {
                    function onClick() {
                      return act('output', {
                        adjust: 10000
                      });
                    }

                    return onClick;
                  }()
                }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "fast-forward",
                  "disabled": outputLevel === outputLevelMax,
                  "onClick": function () {
                    function onClick() {
                      return act('output', {
                        target: 'max'
                      });
                    }

                    return onClick;
                  }()
                })]
              })]
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Outputting",
            children: (0, _format.formatPower)(outputUsed)
          })]
        })
      })]
    })
  });
};

exports.Smes = Smes;

/***/ }),

/***/ "./packages/tgui/interfaces/SmokeMachine.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/SmokeMachine.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SmokeMachine = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var SmokeMachine = function SmokeMachine(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var TankContents = data.TankContents,
      isTankLoaded = data.isTankLoaded,
      TankCurrentVolume = data.TankCurrentVolume,
      TankMaxVolume = data.TankMaxVolume,
      active = data.active,
      setting = data.setting,
      screen = data.screen,
      _data$maxSetting = data.maxSetting,
      maxSetting = _data$maxSetting === void 0 ? [] : _data$maxSetting;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 350,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Dispersal Tank",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": active ? 'power-off' : 'times',
          "selected": active,
          "content": active ? 'On' : 'Off',
          "onClick": function () {
            function onClick() {
              return act('power');
            }

            return onClick;
          }()
        }),
        children: [(0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
          "value": TankCurrentVolume / TankMaxVolume,
          "ranges": {
            bad: [-Infinity, 0.3]
          },
          children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
            "initial": 0,
            "value": TankCurrentVolume || 0
          }), ' / ' + TankMaxVolume]
        }), (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mt": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Range",
              children: [1, 2, 3, 4, 5].map(function (amount) {
                return (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "selected": setting === amount,
                  "icon": "plus",
                  "content": amount * 3,
                  "disabled": maxSetting < amount,
                  "onClick": function () {
                    function onClick() {
                      return act('setting', {
                        amount: amount
                      });
                    }

                    return onClick;
                  }()
                }, amount);
              })
            })
          })
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Contents",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "trash",
          "content": "Purge",
          "onClick": function () {
            function onClick() {
              return act('purge');
            }

            return onClick;
          }()
        }),
        children: TankContents.map(function (chemical) {
          return (0, _inferno.createComponentVNode)(2, _components.Box, {
            "color": "label",
            children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "initial": 0,
              "value": chemical.volume
            }), ' ', "units of ", chemical.name]
          }, chemical.name);
        })
      })]
    })
  });
};

exports.SmokeMachine = SmokeMachine;

/***/ }),

/***/ "./packages/tgui/interfaces/SolarControl.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/SolarControl.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SolarControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var SolarControl = function SolarControl(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var generated = data.generated,
      generated_ratio = data.generated_ratio,
      azimuth_current = data.azimuth_current,
      azimuth_rate = data.azimuth_rate,
      max_rotation_rate = data.max_rotation_rate,
      tracking_state = data.tracking_state,
      connected_panels = data.connected_panels,
      connected_tracker = data.connected_tracker;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 380,
    "height": 230,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Status",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "sync",
          "content": "Scan for new hardware",
          "onClick": function () {
            function onClick() {
              return act('refresh');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.Grid, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Solar tracker",
                "color": connected_tracker ? 'good' : 'bad',
                children: connected_tracker ? 'OK' : 'N/A'
              }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Solar panels",
                "color": connected_panels > 0 ? 'good' : 'bad',
                children: connected_panels
              })]
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            "size": 1.5,
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Power output",
                children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
                  "ranges": {
                    good: [0.66, Infinity],
                    average: [0.33, 0.66],
                    bad: [-Infinity, 0.33]
                  },
                  "minValue": 0,
                  "maxValue": 1,
                  "value": generated_ratio,
                  children: generated + ' W'
                })
              })
            })
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Controls",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Tracking",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "times",
              "content": "Off",
              "selected": tracking_state === 0,
              "onClick": function () {
                function onClick() {
                  return act('tracking', {
                    mode: 0
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "clock-o",
              "content": "Timed",
              "selected": tracking_state === 1,
              "onClick": function () {
                function onClick() {
                  return act('tracking', {
                    mode: 1
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "content": "Auto",
              "selected": tracking_state === 2,
              "disabled": !connected_tracker,
              "onClick": function () {
                function onClick() {
                  return act('tracking', {
                    mode: 2
                  });
                }

                return onClick;
              }()
            })]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Azimuth",
            children: [(tracking_state === 0 || tracking_state === 1) && (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "width": "52px",
              "unit": "°",
              "step": 1,
              "stepPixelSize": 2,
              "minValue": -360,
              "maxValue": +720,
              "value": azimuth_current,
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('azimuth', {
                    value: value
                  });
                }

                return onDrag;
              }()
            }), tracking_state === 1 && (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "width": "80px",
              "unit": "°/m",
              "step": 0.01,
              "stepPixelSize": 1,
              "minValue": -max_rotation_rate - 0.01,
              "maxValue": max_rotation_rate + 0.01,
              "value": azimuth_rate,
              "format": function () {
                function format(rate) {
                  var sign = Math.sign(rate) > 0 ? '+' : '-';
                  return sign + Math.abs(rate);
                }

                return format;
              }(),
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('azimuth_rate', {
                    value: value
                  });
                }

                return onDrag;
              }()
            }), tracking_state === 2 && (0, _inferno.createComponentVNode)(2, _components.Box, {
              "inline": true,
              "color": "label",
              "mt": "3px",
              children: [azimuth_current + ' °', " (auto)"]
            })]
          })]
        })
      })]
    })
  });
};

exports.SolarControl = SolarControl;

/***/ }),

/***/ "./packages/tgui/interfaces/SpaceHeater.js":
/*!*************************************************!*\
  !*** ./packages/tgui/interfaces/SpaceHeater.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SpaceHeater = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var SpaceHeater = function SpaceHeater(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 305,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Power",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "eject",
          "content": "Eject Cell",
          "disabled": !data.hasPowercell || !data.open,
          "onClick": function () {
            function onClick() {
              return act('eject');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.on ? 'power-off' : 'times',
          "content": data.on ? 'On' : 'Off',
          "selected": data.on,
          "disabled": !data.hasPowercell,
          "onClick": function () {
            function onClick() {
              return act('power');
            }

            return onClick;
          }()
        })], 4),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Cell",
            "color": !data.hasPowercell && 'bad',
            children: data.hasPowercell && (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.powerLevel / 100,
              "ranges": {
                good: [0.6, Infinity],
                average: [0.3, 0.6],
                bad: [-Infinity, 0.3]
              },
              children: data.powerLevel + '%'
            }) || 'None'
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Thermostat",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Temperature",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              "fontSize": "18px",
              "color": Math.abs(data.targetTemp - data.currentTemp) > 50 ? 'bad' : Math.abs(data.targetTemp - data.currentTemp) > 20 ? 'average' : 'good',
              children: [data.currentTemp, "\xB0C"]
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Target Temperature",
            children: data.open && (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": parseFloat(data.targetTemp),
              "width": "65px",
              "unit": "°C",
              "minValue": data.minTemp,
              "maxValue": data.maxTemp,
              "onChange": function () {
                function onChange(e, value) {
                  return act('target', {
                    target: value
                  });
                }

                return onChange;
              }()
            }) || data.targetTemp + '°C'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Mode",
            children: !data.open && 'Auto' || (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "thermometer-half",
              "content": "Auto",
              "selected": data.mode === 'auto',
              "onClick": function () {
                function onClick() {
                  return act('mode', {
                    mode: "auto"
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fire-alt",
              "content": "Heat",
              "selected": data.mode === 'heat',
              "onClick": function () {
                function onClick() {
                  return act('mode', {
                    mode: "heat"
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fan",
              "content": "Cool",
              "selected": data.mode === 'cool',
              "onClick": function () {
                function onClick() {
                  return act('mode', {
                    mode: 'cool'
                  });
                }

                return onClick;
              }()
            })], 4)
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Divider)]
        })
      })]
    })
  });
};

exports.SpaceHeater = SpaceHeater;

/***/ }),

/***/ "./packages/tgui/interfaces/SpawnersMenu.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/SpawnersMenu.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SpawnersMenu = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var SpawnersMenu = function SpawnersMenu(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var spawners = data.spawners || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Spawners Menu",
    "width": 700,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: spawners.map(function (spawner) {
          return (0, _inferno.createComponentVNode)(2, _components.Section, {
            "title": spawner.name + ' (' + spawner.amount_left + ' left)',
            "level": 2,
            "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Jump",
              "onClick": function () {
                function onClick() {
                  return act('jump', {
                    name: spawner.name
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Spawn",
              "onClick": function () {
                function onClick() {
                  return act('spawn', {
                    name: spawner.name
                  });
                }

                return onClick;
              }()
            })], 4),
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "bold": true,
              "mb": 1,
              "fontSize": "20px",
              children: spawner.short_desc
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: spawner.flavor_text
            }), !!spawner.important_info && (0, _inferno.createComponentVNode)(2, _components.Box, {
              "mt": 1,
              "bold": true,
              "color": "bad",
              "fontSize": "26px",
              children: spawner.important_info
            })]
          }, spawner.name);
        })
      })
    })
  });
};

exports.SpawnersMenu = SpawnersMenu;

/***/ }),

/***/ "./packages/tgui/interfaces/StationAlertConsole.js":
/*!*********************************************************!*\
  !*** ./packages/tgui/interfaces/StationAlertConsole.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.StationAlertConsoleContent = exports.StationAlertConsole = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var StationAlertConsole = function StationAlertConsole() {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 325,
    "height": 500,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, StationAlertConsoleContent)
    })
  });
};

exports.StationAlertConsole = StationAlertConsole;

var StationAlertConsoleContent = function StationAlertConsoleContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var categories = data.alarms || [];
  var fire = categories['Fire'] || [];
  var atmos = categories['Atmosphere'] || [];
  var power = categories['Power'] || [];
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Fire Alarms",
    children: (0, _inferno.createVNode)(1, "ul", null, [fire.length === 0 && (0, _inferno.createVNode)(1, "li", "color-good", "Systems Nominal", 16), fire.map(function (alert) {
      return (0, _inferno.createVNode)(1, "li", "color-average", alert, 0, null, alert);
    })], 0)
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Atmospherics Alarms",
    children: (0, _inferno.createVNode)(1, "ul", null, [atmos.length === 0 && (0, _inferno.createVNode)(1, "li", "color-good", "Systems Nominal", 16), atmos.map(function (alert) {
      return (0, _inferno.createVNode)(1, "li", "color-average", alert, 0, null, alert);
    })], 0)
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Power Alarms",
    children: (0, _inferno.createVNode)(1, "ul", null, [power.length === 0 && (0, _inferno.createVNode)(1, "li", "color-good", "Systems Nominal", 16), power.map(function (alert) {
      return (0, _inferno.createVNode)(1, "li", "color-average", alert, 0, null, alert);
    })], 0)
  })], 4);
};

exports.StationAlertConsoleContent = StationAlertConsoleContent;

/***/ }),

/***/ "./packages/tgui/interfaces/SuitStorageUnit.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/SuitStorageUnit.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SuitStorageUnit = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var SuitStorageUnit = function SuitStorageUnit(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var locked = data.locked,
      open = data.open,
      safeties = data.safeties,
      uv_active = data.uv_active,
      occupied = data.occupied,
      suit = data.suit,
      helmet = data.helmet,
      mask = data.mask,
      storage = data.storage;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 305,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [!!(occupied && safeties) && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "Biological entity detected in suit chamber. Please remove before continuing with operation."
      }), uv_active && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "Contents are currently being decontaminated. Please wait."
      }) || (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Storage",
        "minHeight": "260px",
        "buttons": (0, _inferno.createFragment)([!open && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": locked ? 'unlock' : 'lock',
          "content": locked ? 'Unlock' : 'Lock',
          "onClick": function () {
            function onClick() {
              return act('lock');
            }

            return onClick;
          }()
        }), !locked && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": open ? 'sign-out-alt' : 'sign-in-alt',
          "content": open ? 'Close' : 'Open',
          "onClick": function () {
            function onClick() {
              return act('door');
            }

            return onClick;
          }()
        })], 0),
        children: locked && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "mt": 6,
          "bold": true,
          "textAlign": "center",
          "fontSize": "40px",
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            children: "Unit Locked"
          }), (0, _inferno.createComponentVNode)(2, _components.Icon, {
            "name": "lock"
          })]
        }) || open && (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Helmet",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": helmet ? 'square' : 'square-o',
              "content": helmet || 'Empty',
              "disabled": !helmet,
              "onClick": function () {
                function onClick() {
                  return act('dispense', {
                    item: 'helmet'
                  });
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Suit",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": suit ? 'square' : 'square-o',
              "content": suit || 'Empty',
              "disabled": !suit,
              "onClick": function () {
                function onClick() {
                  return act('dispense', {
                    item: 'suit'
                  });
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Mask",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": mask ? 'square' : 'square-o',
              "content": mask || 'Empty',
              "disabled": !mask,
              "onClick": function () {
                function onClick() {
                  return act('dispense', {
                    item: 'mask'
                  });
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Storage",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": storage ? 'square' : 'square-o',
              "content": storage || 'Empty',
              "disabled": !storage,
              "onClick": function () {
                function onClick() {
                  return act('dispense', {
                    item: 'storage'
                  });
                }

                return onClick;
              }()
            })
          })]
        }) || (0, _inferno.createComponentVNode)(2, _components.Button, {
          "fluid": true,
          "icon": "recycle",
          "content": "Decontaminate",
          "disabled": occupied && safeties,
          "textAlign": "center",
          "onClick": function () {
            function onClick() {
              return act('uv');
            }

            return onClick;
          }()
        })
      })]
    })
  });
};

exports.SuitStorageUnit = SuitStorageUnit;

/***/ }),

/***/ "./packages/tgui/interfaces/SyndContractor.js":
/*!****************************************************!*\
  !*** ./packages/tgui/interfaces/SyndContractor.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SyndPane = exports.StatusPane = exports.SyndContractorContent = exports.SyndContractor = exports.FakeTerminal = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var CONTRACT_STATUS_INACTIVE = 1;
var CONTRACT_STATUS_ACTIVE = 2;
var CONTRACT_STATUS_BOUNTY_CONSOLE_ACTIVE = 3;
var CONTRACT_STATUS_EXTRACTING = 4;
var CONTRACT_STATUS_COMPLETE = 5;
var CONTRACT_STATUS_ABORTED = 6;

var FakeTerminal = /*#__PURE__*/function (_Component) {
  _inheritsLoose(FakeTerminal, _Component);

  function FakeTerminal(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.timer = null;
    _this.state = {
      currentIndex: 0,
      currentDisplay: []
    };
    return _this;
  }

  var _proto = FakeTerminal.prototype;

  _proto.tick = function () {
    function tick() {
      var props = this.props,
          state = this.state;

      if (state.currentIndex <= props.allMessages.length) {
        this.setState(function (prevState) {
          return {
            currentIndex: prevState.currentIndex + 1
          };
        });
        var currentDisplay = state.currentDisplay;
        currentDisplay.push(props.allMessages[state.currentIndex]);
      } else {
        clearTimeout(this.timer);
        setTimeout(props.onFinished, props.finishedTimeout);
      }
    }

    return tick;
  }();

  _proto.componentDidMount = function () {
    function componentDidMount() {
      var _this2 = this;

      var _this$props$linesPerS = this.props.linesPerSecond,
          linesPerSecond = _this$props$linesPerS === void 0 ? 2.5 : _this$props$linesPerS;
      this.timer = setInterval(function () {
        return _this2.tick();
      }, 1000 / linesPerSecond);
    }

    return componentDidMount;
  }();

  _proto.componentWillUnmount = function () {
    function componentWillUnmount() {
      clearTimeout(this.timer);
    }

    return componentWillUnmount;
  }();

  _proto.render = function () {
    function render() {
      return (0, _inferno.createComponentVNode)(2, _components.Box, {
        "m": 1,
        children: this.state.currentDisplay.map(function (value) {
          return (0, _inferno.createFragment)([value, (0, _inferno.createVNode)(1, "br")], 0, value);
        })
      });
    }

    return render;
  }();

  return FakeTerminal;
}(_inferno.Component);

exports.FakeTerminal = FakeTerminal;

var SyndContractor = function SyndContractor(props, context) {
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 500,
    "height": 600,
    "theme": "syndicate",
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, SyndContractorContent)
    })
  });
};

exports.SyndContractor = SyndContractor;

var SyndContractorContent = function SyndContractorContent(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data,
      act = _useBackend.act;

  var terminalMessages = ["Recording biometric data...", "Analyzing embedded syndicate info...", "STATUS CONFIRMED", "Contacting syndicate database...", "Awaiting response...", "Awaiting response...", "Awaiting response...", "Awaiting response...", "Awaiting response...", "Awaiting response...", "Response received, ack 4851234...", "CONFIRM ACC " + Math.round(Math.random() * 20000), "Setting up private accounts...", "CONTRACTOR ACCOUNT CREATED", "Searching for available contracts...", "Searching for available contracts...", "Searching for available contracts...", "Searching for available contracts...", "CONTRACTS FOUND", "WELCOME, AGENT"];
  var infoEntries = ["SyndTract v2.0", "", "We've identified potentional high-value targets that are", "currently assigned to your mission area. They are believed", "to hold valuable information which could be of immediate", "importance to our organisation.", "", "Listed below are all of the contracts available to you. You", "are to bring the specified target to the designated", "drop-off, and contact us via this uplink. We will send", "a specialised extraction unit to put the body into.", "", "We want targets alive - but we will sometimes pay slight", "amounts if they're not, you just won't recieve the shown", "bonus. You can redeem your payment through this uplink in", "the form of raw telecrystals, which can be put into your", "regular Syndicate uplink to purchase whatever you may need.", "We provide you with these crystals the moment you send the", "target up to us, which can be collected at anytime through", "this system.", "", "Targets extracted will be ransomed back to the station once", "their use to us is fulfilled, with us providing you a small", "percentage cut. You may want to be mindful of them", "identifying you when they come back. We provide you with", "a standard contractor loadout, which will help cover your", "identity."];
  var errorPane = !!data.error && (0, _inferno.createComponentVNode)(2, _components.Modal, {
    "backgroundColor": "red",
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "align": "center",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "mr": 2,
        children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
          "size": 4,
          "name": "exclamation-triangle"
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "mr": 2,
        "grow": 1,
        "textAlign": "center",
        children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
          "width": "260px",
          "textAlign": "left",
          "minHeight": "80px",
          children: data.error
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Dismiss",
          "onClick": function () {
            function onClick() {
              return act('PRG_clear_error');
            }

            return onClick;
          }()
        })]
      })]
    })
  });

  if (!data.logged_in) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "minHeight": "525px",
      children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
        "width": "100%",
        "textAlign": "center",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "REGISTER USER",
          "color": "transparent",
          "onClick": function () {
            function onClick() {
              return act('PRG_login');
            }

            return onClick;
          }()
        })
      }), !!data.error && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: data.error
      })]
    });
  }

  if (data.logged_in && data.first_load) {
    return (0, _inferno.createComponentVNode)(2, _components.Box, {
      "backgroundColor": "rgba(0, 0, 0, 0.8)",
      "minHeight": "525px",
      children: (0, _inferno.createComponentVNode)(2, FakeTerminal, {
        "allMessages": terminalMessages,
        "finishedTimeout": 3000,
        "onFinished": function () {
          function onFinished() {
            return act('PRG_set_first_load_finished');
          }

          return onFinished;
        }()
      })
    });
  }

  if (data.info_screen) {
    return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
      "backgroundColor": "rgba(0, 0, 0, 0.8)",
      "minHeight": "500px",
      children: (0, _inferno.createComponentVNode)(2, FakeTerminal, {
        "allMessages": infoEntries,
        "linesPerSecond": 10
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "content": "CONTINUE",
      "color": "transparent",
      "textAlign": "center",
      "onClick": function () {
        function onClick() {
          return act('PRG_toggle_info');
        }

        return onClick;
      }()
    })], 4);
  }

  return (0, _inferno.createFragment)([errorPane, (0, _inferno.createComponentVNode)(2, SyndPane)], 0);
};

exports.SyndContractorContent = SyndContractorContent;

var StatusPane = function StatusPane(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("Contractor Status"), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "View Information Again",
      "color": "transparent",
      "mb": 0,
      "ml": 1,
      "onClick": function () {
        function onClick() {
          return act('PRG_toggle_info');
        }

        return onClick;
      }()
    })], 4),
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      "mr": 1,
      children: [data.contract_rep, " Rep"]
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.Grid, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        "size": 0.85,
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "TC Available",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Claim",
              "disabled": data.redeemable_tc <= 0,
              "onClick": function () {
                function onClick() {
                  return act('PRG_redeem_TC');
                }

                return onClick;
              }()
            }),
            children: data.redeemable_tc
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "TC Earned",
            children: data.earned_tc
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Contracts Completed",
            children: data.contracts_completed
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Status",
            children: "ACTIVE"
          })]
        })
      })]
    })
  });
};

exports.StatusPane = StatusPane;

var SyndPane = function SyndPane(props, context) {
  var _useLocalState = (0, _backend.useLocalState)(context, 'tab', 1),
      tab = _useLocalState[0],
      setTab = _useLocalState[1];

  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, StatusPane, {
    "state": props.state
  }), (0, _inferno.createComponentVNode)(2, _components.Tabs, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
      "selected": tab === 1,
      "onClick": function () {
        function onClick() {
          return setTab(1);
        }

        return onClick;
      }(),
      children: "Contracts"
    }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
      "selected": tab === 2,
      "onClick": function () {
        function onClick() {
          return setTab(2);
        }

        return onClick;
      }(),
      children: "Hub"
    })]
  }), tab === 1 && (0, _inferno.createComponentVNode)(2, ContractsTab), tab === 2 && (0, _inferno.createComponentVNode)(2, HubTab)], 0);
};

exports.SyndPane = SyndPane;

var ContractsTab = function ContractsTab(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var contracts = data.contracts || [];
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Available Contracts",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "content": "Call Extraction",
      "disabled": !data.ongoing_contract || data.extraction_enroute,
      "onClick": function () {
        function onClick() {
          return act('PRG_call_extraction');
        }

        return onClick;
      }()
    }),
    children: contracts.map(function (contract) {
      if (data.ongoing_contract && contract.status !== CONTRACT_STATUS_ACTIVE) {
        return;
      }

      var active = contract.status > CONTRACT_STATUS_INACTIVE;

      if (contract.status >= CONTRACT_STATUS_COMPLETE) {
        return;
      }

      return (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": contract.target ? contract.target + " (" + contract.target_rank + ")" : "Invalid Target",
        "level": active ? 1 : 2,
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "bold": true,
          "mr": 1,
          children: [contract.payout, " (+", contract.payout_bonus, ") TC"]
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": active ? "Abort" : "Accept",
          "disabled": contract.extraction_enroute,
          "color": active && "bad",
          "onClick": function () {
            function onClick() {
              return act('PRG_contract' + (active ? '_abort' : '-accept'), {
                contract_id: contract.id
              });
            }

            return onClick;
          }()
        })], 4),
        children: (0, _inferno.createComponentVNode)(2, _components.Grid, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            children: contract.message
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            "size": 0.5,
            children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
              "bold": true,
              "mb": 1,
              children: "Dropoff Location:"
            }), (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: contract.dropoff
            })]
          })]
        })
      }, contract.target);
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Dropoff Locator",
    "textAlign": "center",
    "opacity": data.ongoing_contract ? 100 : 0,
    children: (0, _inferno.createComponentVNode)(2, _components.Box, {
      "bold": true,
      children: data.dropoff_direction
    })
  })], 4);
};

var HubTab = function HubTab(props, context) {
  var _useBackend4 = (0, _backend.useBackend)(context),
      act = _useBackend4.act,
      data = _useBackend4.data;

  var contractor_hub_items = data.contractor_hub_items || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    children: contractor_hub_items.map(function (item) {
      var repInfo = item.cost ? item.cost + ' Rep' : 'FREE';
      var limited = item.limited !== -1;
      return (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": item.name + ' - ' + repInfo,
        "level": 2,
        "buttons": (0, _inferno.createFragment)([limited && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "inline": true,
          "bold": true,
          "mr": 1,
          children: [item.limited, " remaining"]
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Purchase",
          "disabled": data.contract_rep < item.cost || limited && item.limited <= 0,
          "onClick": function () {
            function onClick() {
              return act('buy_hub', {
                item: item.name,
                cost: item.cost
              });
            }

            return onClick;
          }()
        })], 0),
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              children: (0, _inferno.createComponentVNode)(2, _components.Icon, {
                "fontSize": "60px",
                "name": item.item_icon
              })
            }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
              "verticalAlign": "top",
              children: item.desc
            })]
          })
        })
      }, item.name);
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/TachyonArray.js":
/*!**************************************************!*\
  !*** ./packages/tgui/interfaces/TachyonArray.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TachyonArrayContent = exports.TachyonArray = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var TachyonArray = function TachyonArray(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$records = data.records,
      records = _data$records === void 0 ? [] : _data$records,
      is_research = data.is_research;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 500,
    "height": 225,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "direction": "column",
        "height": "100%",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          "className": "TachyonArray__Content",
          children: !records.length ? (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
            children: "No Records"
          }) : (0, _inferno.createComponentVNode)(2, TachyonArrayContent)
        }), !!is_research && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "className": "TachyonArray__ResearchFooter",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "onClick": function () {
              function onClick() {
                return act("open_experiments");
              }

              return onClick;
            }(),
            "icon": "tasks",
            children: "View Experiments"
          })
        })]
      })
    })
  });
};

exports.TachyonArray = TachyonArray;

var TachyonArrayContent = function TachyonArrayContent(props, context) {
  var _records$;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _data$records2 = data.records,
      records = _data$records2 === void 0 ? [] : _data$records2;

  var _useSharedState = (0, _backend.useSharedState)(context, 'record', (_records$ = records[0]) == null ? void 0 : _records$.name),
      activeRecordName = _useSharedState[0],
      setActiveRecordName = _useSharedState[1];

  var activeRecord = records.find(function (record) {
    return record.name === activeRecordName;
  });
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "height": "100%",
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
          "vertical": true,
          children: records.map(function (record) {
            return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "icon": "file",
              "selected": record.name === activeRecordName,
              "onClick": function () {
                function onClick() {
                  return setActiveRecordName(record.name);
                }

                return onClick;
              }(),
              children: record.name
            }, record.name);
          })
        })
      }), activeRecord ? (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "className": "TachyonArray__ActiveRecord",
        children: (0, _inferno.createComponentVNode)(2, _components.Section, {
          "level": "2",
          "title": activeRecord.name,
          "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
            "icon": "trash",
            "content": "Delete",
            "color": "bad",
            "onClick": function () {
              function onClick() {
                return act('delete_record', {
                  'ref': activeRecord.ref
                });
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "print",
            "content": "Print",
            "onClick": function () {
              function onClick() {
                return act('print_record', {
                  'ref': activeRecord.ref
                });
              }

              return onClick;
            }()
          })], 4),
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Timestamp",
              children: activeRecord.timestamp
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Coordinates",
              children: activeRecord.coordinates
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Displacement",
              children: [activeRecord.displacement, " seconds"]
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Epicenter Radius",
              children: [activeRecord.factual_epicenter_radius, activeRecord.theory_epicenter_radius && " (Theoretical: " + activeRecord.theory_epicenter_radius + ")"]
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Outer Radius",
              children: [activeRecord.factual_outer_radius, activeRecord.theory_outer_radius && " (Theoretical: " + activeRecord.theory_outer_radius + ")"]
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Shockwave Radius",
              children: [activeRecord.factual_shockwave_radius, activeRecord.theory_shockwave_radius && " (Theoretical: " + activeRecord.theory_shockwave_radius + ")"]
            })]
          })
        })
      }) : (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        "basis": 0,
        children: (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: "No Record Selected"
        })
      })]
    })
  });
};

exports.TachyonArrayContent = TachyonArrayContent;

/***/ }),

/***/ "./packages/tgui/interfaces/Tank.js":
/*!******************************************!*\
  !*** ./packages/tgui/interfaces/Tank.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Tank = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Tank = function Tank(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 400,
    "height": 120,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Pressure",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.tankPressure / 1013,
              "ranges": {
                good: [0.35, Infinity],
                average: [0.15, 0.35],
                bad: [-Infinity, 0.15]
              },
              children: data.tankPressure + ' kPa'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Pressure Regulator",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fast-backward",
              "disabled": data.ReleasePressure === data.minReleasePressure,
              "onClick": function () {
                function onClick() {
                  return act('pressure', {
                    pressure: 'min'
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": parseFloat(data.releasePressure),
              "width": "65px",
              "unit": "kPa",
              "minValue": data.minReleasePressure,
              "maxValue": data.maxReleasePressure,
              "onChange": function () {
                function onChange(e, value) {
                  return act('pressure', {
                    pressure: value
                  });
                }

                return onChange;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fast-forward",
              "disabled": data.ReleasePressure === data.maxReleasePressure,
              "onClick": function () {
                function onClick() {
                  return act('pressure', {
                    pressure: 'max'
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "undo",
              "content": "",
              "disabled": data.ReleasePressure === data.defaultReleasePressure,
              "onClick": function () {
                function onClick() {
                  return act('pressure', {
                    pressure: 'reset'
                  });
                }

                return onClick;
              }()
            })]
          })]
        })
      })
    })
  });
};

exports.Tank = Tank;

/***/ }),

/***/ "./packages/tgui/interfaces/TankDispenser.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/TankDispenser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TankDispenser = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var TankDispenser = function TankDispenser(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 275,
    "height": 103,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Plasma",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.plasma ? 'square' : 'square-o',
              "content": "Dispense",
              "disabled": !data.plasma,
              "onClick": function () {
                function onClick() {
                  return act('plasma');
                }

                return onClick;
              }()
            }),
            children: data.plasma
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Oxygen",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": data.oxygen ? 'square' : 'square-o',
              "content": "Dispense",
              "disabled": !data.oxygen,
              "onClick": function () {
                function onClick() {
                  return act('oxygen');
                }

                return onClick;
              }()
            }),
            children: data.oxygen
          })]
        })
      })
    })
  });
};

exports.TankDispenser = TankDispenser;

/***/ }),

/***/ "./packages/tgui/interfaces/Techweb.js":
/*!*********************************************!*\
  !*** ./packages/tgui/interfaces/Techweb.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TechwebContent = exports.AppTechweb = exports.Techweb = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _ExperimentConfigure = __webpack_require__(/*! ./ExperimentConfigure */ "./packages/tgui/interfaces/ExperimentConfigure.js");

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Data reshaping / ingestion (thanks stylemistake for the help, very cool!)
// This is primarily necessary due to measures that are taken to reduce the size
// of the sent static JSON payload to as minimal of a size as possible
// as larger sizes cause a delay for the user when opening the UI.
var remappingIdCache = {};

var remapId = function remapId(id) {
  return remappingIdCache[id];
};

var selectRemappedStaticData = function selectRemappedStaticData(data) {
  // Handle reshaping of node cache to fill in unsent fields, and
  // decompress the node IDs
  var node_cache = {};

  var _loop = function _loop() {
    var id = _Object$keys[_i];
    var node = data.static_data.node_cache[id];
    var costs = Object.keys(node.costs || {}).map(function (x) {
      return {
        type: remapId(x),
        value: node.costs[x]
      };
    });
    node_cache[remapId(id)] = Object.assign({}, node, {
      id: remapId(id),
      costs: costs,
      prereq_ids: (0, _collections.map)(remapId)(node.prereq_ids || []),
      design_ids: (0, _collections.map)(remapId)(node.design_ids || []),
      unlock_ids: (0, _collections.map)(remapId)(node.unlock_ids || []),
      required_experiments: node.required_experiments || [],
      discount_experiments: node.discount_experiments || []
    });
  };

  for (var _i = 0, _Object$keys = Object.keys(data.static_data.node_cache); _i < _Object$keys.length; _i++) {
    _loop();
  } // Do the same as the above for the design cache


  var design_cache = {};

  for (var _i2 = 0, _Object$keys2 = Object.keys(data.static_data.design_cache); _i2 < _Object$keys2.length; _i2++) {
    var id = _Object$keys2[_i2];
    var _data$static_data$des = data.static_data.design_cache[id],
        name = _data$static_data$des[0],
        classes = _data$static_data$des[1];
    design_cache[remapId(id)] = {
      name: name,
      "class": classes.startsWith("design") ? classes : "design32x32 " + classes
    };
  }

  return {
    node_cache: node_cache,
    design_cache: design_cache
  };
};

var remappedStaticData;

var useRemappedBackend = function useRemappedBackend(context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data,
      rest = _objectWithoutPropertiesLoose(_useBackend, ["data"]); // Only remap the static data once, cache for future use


  if (!remappedStaticData) {
    var id_cache = data.static_data.id_cache;

    for (var i = 0; i < id_cache.length; i++) {
      remappingIdCache[i + 1] = id_cache[i];
    }

    remappedStaticData = selectRemappedStaticData(data);
  }

  return Object.assign({
    data: Object.assign({}, data, remappedStaticData)
  }, rest);
}; // Utility Functions


var abbreviations = {
  "General Research": "Gen. Res.",
  "Nanite Research": "Nanite Res."
};

var abbreviateName = function abbreviateName(name) {
  var _abbreviations$name;

  return (_abbreviations$name = abbreviations[name]) != null ? _abbreviations$name : name;
}; // Actual Components


var Techweb = function Techweb(props, context) {
  var _useRemappedBackend = useRemappedBackend(context),
      act = _useRemappedBackend.act,
      data = _useRemappedBackend.data;

  var locked = data.locked;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 640,
    "height": 735,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [!!locked && (0, _inferno.createComponentVNode)(2, _components.Modal, {
        "width": "15em",
        "align": "center",
        "className": "Techweb__LockedModal",
        children: [(0, _inferno.createVNode)(1, "div", null, (0, _inferno.createVNode)(1, "b", null, "Console Locked", 16), 2), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "unlock",
          "onClick": function () {
            function onClick() {
              return act("toggleLock");
            }

            return onClick;
          }(),
          children: "Unlock"
        })]
      }), (0, _inferno.createComponentVNode)(2, TechwebContent)]
    })
  });
};

exports.Techweb = Techweb;

var AppTechweb = function AppTechweb(props, context) {
  var _useRemappedBackend2 = useRemappedBackend(context),
      act = _useRemappedBackend2.act,
      data = _useRemappedBackend2.data;

  var locked = data.locked;
  return (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow, {
    "width": 640,
    "height": 735,
    children: (0, _inferno.createComponentVNode)(2, _layouts.NtosWindow.Content, {
      "scrollable": true,
      children: [!!locked && (0, _inferno.createComponentVNode)(2, _components.Modal, {
        "width": "15em",
        "align": "center",
        "className": "Techweb__LockedModal",
        children: [(0, _inferno.createVNode)(1, "div", null, (0, _inferno.createVNode)(1, "b", null, "Console Locked", 16), 2), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "unlock",
          "onClick": function () {
            function onClick() {
              return act("toggleLock");
            }

            return onClick;
          }(),
          children: "Unlock"
        })]
      }), (0, _inferno.createComponentVNode)(2, TechwebContent)]
    })
  });
};

exports.AppTechweb = AppTechweb;

var TechwebContent = function TechwebContent(props, context) {
  var _useRemappedBackend3 = useRemappedBackend(context),
      act = _useRemappedBackend3.act,
      data = _useRemappedBackend3.data;

  var points = data.points,
      points_last_tick = data.points_last_tick,
      web_org = data.web_org,
      sec_protocols = data.sec_protocols,
      t_disk = data.t_disk,
      d_disk = data.d_disk,
      locked = data.locked;

  var _useLocalState = (0, _backend.useLocalState)(context, 'techwebRoute', null),
      techwebRoute = _useLocalState[0],
      setTechwebRoute = _useLocalState[1];

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'lastPoints', {}),
      lastPoints = _useLocalState2[0],
      setLastPoints = _useLocalState2[1];

  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "direction": "column",
    "className": "Techweb__Viewport",
    "height": "100%",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "className": "Techweb__HeaderSection",
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "className": "Techweb__HeaderContent",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Box, {
            children: ["Available points:", (0, _inferno.createVNode)(1, "ul", "Techweb__PointSummary", Object.keys(points).map(function (k) {
              return (0, _inferno.createVNode)(1, "li", null, [(0, _inferno.createVNode)(1, "b", null, k, 0), (0, _inferno.createTextVNode)(": "), points[k], !!points_last_tick[k] && " (+" + points_last_tick[k] + "/sec)"], 0, null, k);
            }), 0)]
          }), (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: ["Security protocols:", (0, _inferno.createVNode)(1, "span", "Techweb__SecProtocol " + (!!sec_protocols && "engaged"), sec_protocols ? "Engaged" : "Disengaged", 0)]
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "onClick": function () {
              function onClick() {
                return act("toggleLock");
              }

              return onClick;
            }(),
            "icon": "lock",
            children: "Lock Console"
          }), d_disk && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "onClick": function () {
                function onClick() {
                  return setTechwebRoute({
                    route: "disk",
                    diskType: "design"
                  });
                }

                return onClick;
              }(),
              children: "Design Disk Inserted"
            })
          }), t_disk && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "onClick": function () {
                function onClick() {
                  return setTechwebRoute({
                    route: "disk",
                    diskType: "tech"
                  });
                }

                return onClick;
              }(),
              children: "Tech Disk Inserted"
            })
          })]
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "className": "Techweb__RouterContent",
      "height": "100%",
      children: (0, _inferno.createComponentVNode)(2, TechwebRouter)
    })]
  });
};

exports.TechwebContent = TechwebContent;

var TechwebRouter = function TechwebRouter(props, context) {
  var _useLocalState3 = (0, _backend.useLocalState)(context, 'techwebRoute', null),
      techwebRoute = _useLocalState3[0];

  var route = techwebRoute == null ? void 0 : techwebRoute.route;
  var RoutedComponent = route === "details" && TechwebNodeDetail || route === "disk" && TechwebDiskMenu || TechwebOverview;
  return (0, _inferno.normalizeProps)((0, _inferno.createComponentVNode)(2, RoutedComponent, Object.assign({}, techwebRoute)));
};

var TechwebOverview = function TechwebOverview(props, context) {
  var _useRemappedBackend4 = useRemappedBackend(context),
      act = _useRemappedBackend4.act,
      data = _useRemappedBackend4.data;

  var nodes = data.nodes,
      node_cache = data.node_cache,
      design_cache = data.design_cache;

  var _useLocalState4 = (0, _backend.useLocalState)(context, 'overviewTabIndex', 1),
      tabIndex = _useLocalState4[0],
      setTabIndex = _useLocalState4[1];

  var _useLocalState5 = (0, _backend.useLocalState)(context, 'searchText'),
      searchText = _useLocalState5[0],
      setSearchText = _useLocalState5[1]; // Only search when 3 or more characters have been input


  var searching = searchText && searchText.trim().length > 1;
  var displayedNodes = nodes;

  if (searching) {
    displayedNodes = displayedNodes.filter(function (x) {
      var n = node_cache[x.id];
      return n.name.toLowerCase().includes(searchText) || n.description.toLowerCase().includes(searchText) || n.design_ids.some(function (e) {
        return design_cache[e].name.toLowerCase().includes(searchText);
      });
    });
  } else {
    displayedNodes = (0, _collections.sortBy)(function (x) {
      return node_cache[x.id].name;
    })(tabIndex < 2 ? nodes.filter(function (x) {
      return x.tier === tabIndex;
    }) : nodes.filter(function (x) {
      return x.tier >= tabIndex;
    }));
  }

  var switchTab = function switchTab(tab) {
    setTabIndex(tab);
    setSearchText(null);
  };

  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "direction": "column",
    "height": "100%",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "justify": "space-between",
        "className": "Techweb__HeaderSectionTabs",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "align": "center",
          "className": "Techweb__HeaderTabTitle",
          children: "Web View"
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": !searching && tabIndex === 0,
              "onClick": function () {
                function onClick() {
                  return switchTab(0);
                }

                return onClick;
              }(),
              children: "Researched"
            }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": !searching && tabIndex === 1,
              "onClick": function () {
                function onClick() {
                  return switchTab(1);
                }

                return onClick;
              }(),
              children: "Available"
            }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": !searching && tabIndex === 2,
              "onClick": function () {
                function onClick() {
                  return switchTab(2);
                }

                return onClick;
              }(),
              children: "Future"
            }), !!searching && (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": true,
              children: "Search Results"
            })]
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "align": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.Input, {
            "value": searchText,
            "onInput": function () {
              function onInput(e, value) {
                return setSearchText(value);
              }

              return onInput;
            }(),
            "placeholder": "Search..."
          })
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "className": "Techweb__OverviewNodes",
      "height": "100%",
      children: displayedNodes.map(function (n) {
        return (0, _inferno.createComponentVNode)(2, TechNode, {
          "node": n
        }, n.id);
      })
    })]
  });
};

var TechwebNodeDetail = function TechwebNodeDetail(props, context) {
  var _useRemappedBackend5 = useRemappedBackend(context),
      act = _useRemappedBackend5.act,
      data = _useRemappedBackend5.data;

  var nodes = data.nodes;
  var selectedNode = props.selectedNode;
  var selectedNodeData = selectedNode && nodes.find(function (x) {
    return x.id === selectedNode;
  });
  return (0, _inferno.createComponentVNode)(2, TechNodeDetail, {
    "node": selectedNodeData
  });
};

var TechwebDiskMenu = function TechwebDiskMenu(props, context) {
  var _useRemappedBackend6 = useRemappedBackend(context),
      act = _useRemappedBackend6.act,
      data = _useRemappedBackend6.data;

  var diskType = props.diskType;
  var t_disk = data.t_disk,
      d_disk = data.d_disk;

  var _useLocalState6 = (0, _backend.useLocalState)(context, 'techwebRoute', null),
      techwebRoute = _useLocalState6[0],
      setTechwebRoute = _useLocalState6[1]; // Check for the disk actually being inserted


  if (diskType === "design" && !d_disk || diskType === "tech" && !t_disk) {
    return null;
  }

  var DiskContent = diskType === "design" && TechwebDesignDisk || TechwebTechDisk;
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "direction": "column",
    "height": "100%",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "justify": "space-between",
        "className": "Techweb__HeaderSectionTabs",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "align": "center",
          "className": "Techweb__HeaderTabTitle",
          children: [diskType.charAt(0).toUpperCase() + diskType.slice(1), " Disk"]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
            children: (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": true,
              children: "Stored Data"
            })
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "align": "center",
          children: [diskType === "tech" && (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "save",
            "onClick": function () {
              function onClick() {
                return act("loadTech");
              }

              return onClick;
            }(),
            children: "Web \u2192 Disk"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "upload",
            "onClick": function () {
              function onClick() {
                return act("uploadDisk", {
                  type: diskType
                });
              }

              return onClick;
            }(),
            children: "Disk \u2192 Web"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "trash",
            "onClick": function () {
              function onClick() {
                return act("eraseDisk", {
                  type: diskType
                });
              }

              return onClick;
            }(),
            children: "Erase"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "eject",
            "onClick": function () {
              function onClick() {
                act("ejectDisk", {
                  type: diskType
                });
                setTechwebRoute(null);
              }

              return onClick;
            }(),
            children: "Eject"
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "home",
            "onClick": function () {
              function onClick() {
                return setTechwebRoute(null);
              }

              return onClick;
            }(),
            children: "Home"
          })]
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "grow": 1,
      "className": "Techweb__OverviewNodes",
      children: (0, _inferno.createComponentVNode)(2, DiskContent)
    })]
  });
};

var TechwebDesignDisk = function TechwebDesignDisk(props, context) {
  var _useRemappedBackend7 = useRemappedBackend(context),
      act = _useRemappedBackend7.act,
      data = _useRemappedBackend7.data;

  var design_cache = data.design_cache,
      researched_designs = data.researched_designs,
      d_disk = data.d_disk;
  var blueprints = d_disk.blueprints;

  var _useLocalState7 = (0, _backend.useLocalState)(context, "designDiskSelect", null),
      selectedDesign = _useLocalState7[0],
      setSelectedDesign = _useLocalState7[1];

  var _useLocalState8 = (0, _backend.useLocalState)(context, 'showDesignModal', -1),
      showModal = _useLocalState8[0],
      setShowModal = _useLocalState8[1];

  var designIdByIdx = Object.keys(researched_designs);
  var designOptions = (0, _fp.flow)([(0, _collections.filter)(function (x) {
    return x.toLowerCase() !== "error";
  }), (0, _collections.map)(function (id, idx) {
    return design_cache[id].name + " [" + idx + "]";
  }), (0, _collections.sortBy)(function (x) {
    return x;
  })])(designIdByIdx);
  return (0, _inferno.createFragment)([showModal >= 0 && (0, _inferno.createComponentVNode)(2, _components.Modal, {
    "width": "20em",
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "direction": "column",
      "className": "Techweb__DesignModal",
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: "Select a design to save..."
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.Dropdown, {
          "width": "100%",
          "options": designOptions,
          "onSelected": function () {
            function onSelected(val) {
              var idx = parseInt(val.split('[').pop().split(']')[0], 10);
              setSelectedDesign(designIdByIdx[idx]);
            }

            return onSelected;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "align": "center",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "onClick": function () {
            function onClick() {
              return setShowModal(-1);
            }

            return onClick;
          }(),
          children: "Cancel"
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "disabled": selectedDesign === null,
          "onClick": function () {
            function onClick() {
              act("writeDesign", {
                slot: showModal + 1,
                selectedDesign: selectedDesign
              });
              setShowModal(-1);
              setSelectedDesign(null);
            }

            return onClick;
          }(),
          children: "Select"
        })]
      })]
    })
  }), blueprints.map(function (x, i) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Slot " + (i + 1),
      "buttons": (0, _inferno.createFragment)([x !== null && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "upload",
        "onClick": function () {
          function onClick() {
            return act("uploadDesignSlot", {
              slot: i + 1
            });
          }

          return onClick;
        }(),
        children: "Upload Design to Web"
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "save",
        "onClick": function () {
          function onClick() {
            return setShowModal(i);
          }

          return onClick;
        }(),
        children: x !== null ? "Overwrite Slot" : "Load Design to Slot"
      }), x !== null && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "icon": "trash",
        "onClick": function () {
          function onClick() {
            return act("clearDesignSlot", {
              slot: i + 1
            });
          }

          return onClick;
        }(),
        children: "Clear Slot"
      })], 0),
      children: x === null && 'Empty' || (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("Contains the design for "), (0, _inferno.createVNode)(1, "b", null, design_cache[x].name, 0), (0, _inferno.createTextVNode)(":"), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "span", design_cache[x]["class"] + " Techweb__DesignIcon")], 4)
    }, i);
  })], 0);
};

var TechwebTechDisk = function TechwebTechDisk(props, context) {
  var _useRemappedBackend8 = useRemappedBackend(context),
      act = _useRemappedBackend8.act,
      data = _useRemappedBackend8.data;

  var t_disk = data.t_disk;
  var stored_research = t_disk.stored_research;
  return Object.keys(stored_research).map(function (x) {
    return {
      id: x
    };
  }).map(function (n) {
    return (0, _inferno.createComponentVNode)(2, TechNode, {
      "nocontrols": true,
      "node": n
    }, n.id);
  });
};

var TechNodeDetail = function TechNodeDetail(props, context) {
  var _useRemappedBackend9 = useRemappedBackend(context),
      act = _useRemappedBackend9.act,
      data = _useRemappedBackend9.data;

  var nodes = data.nodes,
      node_cache = data.node_cache;
  var node = props.node;
  var id = node.id;
  var _node_cache$id = node_cache[id],
      prereq_ids = _node_cache$id.prereq_ids,
      unlock_ids = _node_cache$id.unlock_ids;

  var _useLocalState9 = (0, _backend.useLocalState)(context, 'nodeDetailTabIndex', 0),
      tabIndex = _useLocalState9[0],
      setTabIndex = _useLocalState9[1];

  var _useLocalState10 = (0, _backend.useLocalState)(context, 'techwebRoute', null),
      techwebRoute = _useLocalState10[0],
      setTechwebRoute = _useLocalState10[1];

  var prereqNodes = nodes.filter(function (x) {
    return prereq_ids.includes(x.id);
  });
  var complPrereq = prereq_ids.filter(function (x) {
    var _nodes$find;

    return ((_nodes$find = nodes.find(function (y) {
      return y.id === x;
    })) == null ? void 0 : _nodes$find.tier) === 0;
  }).length;
  var unlockedNodes = nodes.filter(function (x) {
    return unlock_ids.includes(x.id);
  });
  return (0, _inferno.createComponentVNode)(2, _components.Flex, {
    "direction": "column",
    "height": "100%",
    children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "shrink": 1,
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "justify": "space-between",
        "className": "Techweb__HeaderSectionTabs",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "align": "center",
          "className": "Techweb__HeaderTabTitle",
          children: "Node"
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
            children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": tabIndex === 0,
              "onClick": function () {
                function onClick() {
                  return setTabIndex(0);
                }

                return onClick;
              }(),
              children: ["Required (", complPrereq, "/", prereqNodes.length, ")"]
            }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": tabIndex === 1,
              "disabled": unlockedNodes.length === 0,
              "onClick": function () {
                function onClick() {
                  return setTabIndex(1);
                }

                return onClick;
              }(),
              children: ["Unlocks (", unlockedNodes.length, ")"]
            })]
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "align": "center",
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": "home",
            "onClick": function () {
              function onClick() {
                return setTechwebRoute(null);
              }

              return onClick;
            }(),
            children: "Home"
          })
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "className": "Techweb__OverviewNodes",
      "shrink": 0,
      children: [(0, _inferno.createComponentVNode)(2, TechNode, {
        "node": node,
        "nodetails": true
      }), (0, _inferno.createComponentVNode)(2, _components.Divider)]
    }), tabIndex === 0 && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "className": "Techweb__OverviewNodes",
      "grow": 1,
      children: prereqNodes.map(function (n) {
        return (0, _inferno.createComponentVNode)(2, TechNode, {
          "node": n
        }, n.id);
      })
    }), tabIndex === 1 && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
      "className": "Techweb__OverviewNodes",
      "grow": 1,
      children: unlockedNodes.map(function (n) {
        return (0, _inferno.createComponentVNode)(2, TechNode, {
          "node": n
        }, n.id);
      })
    })]
  });
};

var TechNode = function TechNode(props, context) {
  var _useRemappedBackend10 = useRemappedBackend(context),
      act = _useRemappedBackend10.act,
      data = _useRemappedBackend10.data;

  var node_cache = data.node_cache,
      design_cache = data.design_cache,
      experiments = data.experiments,
      points = data.points,
      nodes = data.nodes;
  var node = props.node,
      nodetails = props.nodetails,
      nocontrols = props.nocontrols;
  var id = node.id,
      can_unlock = node.can_unlock,
      tier = node.tier;
  var _node_cache$id2 = node_cache[id],
      name = _node_cache$id2.name,
      description = _node_cache$id2.description,
      costs = _node_cache$id2.costs,
      design_ids = _node_cache$id2.design_ids,
      prereq_ids = _node_cache$id2.prereq_ids,
      required_experiments = _node_cache$id2.required_experiments,
      discount_experiments = _node_cache$id2.discount_experiments;

  var _useLocalState11 = (0, _backend.useLocalState)(context, 'techwebRoute', null),
      techwebRoute = _useLocalState11[0],
      setTechwebRoute = _useLocalState11[1];

  var _useLocalState12 = (0, _backend.useLocalState)(context, 'nodeDetailTabIndex', 0),
      tabIndex = _useLocalState12[0],
      setTabIndex = _useLocalState12[1];

  var expcompl = required_experiments.filter(function (x) {
    var _experiments$x;

    return (_experiments$x = experiments[x]) == null ? void 0 : _experiments$x.completed;
  }).length;
  var experimentProgress = (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
    "ranges": {
      good: [0.5, Infinity],
      average: [0.25, 0.5],
      bad: [-Infinity, 0.25]
    },
    "value": expcompl / required_experiments.length,
    children: ["Experiments (", expcompl, "/", required_experiments.length, ")"]
  });
  var techcompl = prereq_ids.filter(function (x) {
    var _nodes$find2;

    return ((_nodes$find2 = nodes.find(function (y) {
      return y.id === x;
    })) == null ? void 0 : _nodes$find2.tier) === 0;
  }).length;
  var techProgress = (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
    "ranges": {
      good: [0.5, Infinity],
      average: [0.25, 0.5],
      bad: [-Infinity, 0.25]
    },
    "value": techcompl / prereq_ids.length,
    children: ["Tech (", techcompl, "/", prereq_ids.length, ")"]
  }); // Notice this logic will have te be changed if we make the discounts
  // pool-specific

  var nodeDiscount = Object.keys(discount_experiments).filter(function (x) {
    var _experiments$x2;

    return (_experiments$x2 = experiments[x]) == null ? void 0 : _experiments$x2.completed;
  }).reduce(function (tot, curr) {
    return tot + discount_experiments[curr];
  }, 0);
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "className": "Techweb__NodeContainer",
    "title": name,
    "buttons": !nocontrols && (0, _inferno.createFragment)([!nodetails && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "tasks",
      "onClick": function () {
        function onClick() {
          setTechwebRoute({
            route: "details",
            selectedNode: id
          });
          setTabIndex(0);
        }

        return onClick;
      }(),
      children: "Details"
    }), tier > 0 && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "lightbulb",
      "disabled": !can_unlock || tier > 1,
      "onClick": function () {
        function onClick() {
          return act("researchNode", {
            node_id: id
          });
        }

        return onClick;
      }(),
      children: "Research"
    })], 0),
    children: [tier !== 0 && (0, _inferno.createComponentVNode)(2, _components.Flex, {
      "className": "Techweb__NodeProgress",
      children: [costs.map(function (k) {
        var reqPts = Math.max(0, k.value - nodeDiscount);
        var nodeProg = Math.min(reqPts, points[k.type]) || 0;
        return (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          "basis": 0,
          children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
            "ranges": {
              good: [0.5, Infinity],
              average: [0.25, 0.5],
              bad: [-Infinity, 0.25]
            },
            "value": reqPts === 0 ? 1 : Math.min(1, (points[k.type] || 0) / reqPts),
            children: [abbreviateName(k.type), " (", nodeProg, "/", reqPts, ")"]
          })
        }, k.type);
      }), prereq_ids.length > 0 && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        "basis": 0,
        children: techProgress
      }), (required_experiments == null ? void 0 : required_experiments.length) > 0 && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        "basis": 0,
        children: experimentProgress
      })]
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "className": "Techweb__NodeDescription",
      "mb": 2,
      children: description
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "className": "Techweb__NodeUnlockedDesigns",
      "mb": 2,
      children: design_ids.map(function (k, i) {
        return (0, _inferno.createComponentVNode)(2, _components.Button, {
          "className": design_cache[k]["class"] + " Techweb__DesignIcon",
          "tooltip": design_cache[k].name,
          "tooltipPosition": i % 15 < 7 ? "right" : "left"
        }, id);
      })
    }), (required_experiments == null ? void 0 : required_experiments.length) > 0 && (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
      "className": "Techweb__NodeExperimentsRequired",
      "title": "Required Experiments",
      children: required_experiments.map(function (k) {
        var thisExp = experiments[k];

        if (thisExp === null || thisExp === undefined) {
          return (0, _inferno.createComponentVNode)(2, LockedExperiment);
        }

        return (0, _inferno.createComponentVNode)(2, _ExperimentConfigure.Experiment, {
          "exp": thisExp
        }, thisExp);
      })
    }), Object.keys(discount_experiments).length > 0 && (0, _inferno.createComponentVNode)(2, _components.Collapsible, {
      "className": "TechwebNodeExperimentsRequired",
      "title": "Discount-Eligible Experiments",
      children: Object.keys(discount_experiments).map(function (k) {
        var thisExp = experiments[k];

        if (thisExp === null || thisExp === undefined) {
          return (0, _inferno.createComponentVNode)(2, LockedExperiment);
        }

        return (0, _inferno.createComponentVNode)(2, _ExperimentConfigure.Experiment, {
          "exp": thisExp,
          children: (0, _inferno.createComponentVNode)(2, _components.Box, {
            "className": "Techweb__ExperimentDiscount",
            children: ["Provides a discount of ", discount_experiments[k], " points to all required point pools."]
          })
        }, thisExp);
      })
    })]
  });
};

var LockedExperiment = function LockedExperiment(props, context) {
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    "m": 1,
    "className": "ExperimentConfigure__ExperimentPanel",
    children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
      "fluid": true,
      "backgroundColor": "#40628a",
      "className": "ExperimentConfigure__ExperimentName",
      "disabled": true,
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "align": "center",
        "justify": "space-between",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "color": "rgba(0, 0, 0, 0.6)",
          children: [(0, _inferno.createComponentVNode)(2, _components.Icon, {
            "name": "lock"
          }), "Undiscovered Experiment"]
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "color": "rgba(0, 0, 0, 0.5)",
          children: "???"
        })]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Box, {
      "className": "ExperimentConfigure__ExperimentContent",
      children: "This experiment has not been discovered yet, continue researching nodes in the tree to discover the contents of this experiment."
    })]
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Telecomms.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/Telecomms.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Telecomms = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _fp = __webpack_require__(/*! common/fp */ "./packages/common/fp.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Telecomms = function Telecomms(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var type = data.type,
      minfreq = data.minfreq,
      maxfreq = data.maxfreq,
      frequency = data.frequency,
      multitool = data.multitool,
      multibuff = data.multibuff,
      toggled = data.toggled,
      id = data.id,
      network = data.network,
      prefab = data.prefab,
      changefrequency = data.changefrequency,
      currfrequency = data.currfrequency,
      broadcasting = data.broadcasting,
      receiving = data.receiving;
  var linked = data.linked || [];
  var frequencies = data.frequencies || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    "title": id,
    "width": 400,
    "height": 600,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [!multitool && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: "Use a multitool to make changes."
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Settings",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": toggled ? "power-off" : "times",
              "content": toggled ? "On" : "Off",
              "color": toggled ? "good" : "bad",
              "disabled": !multitool,
              "onClick": function () {
                function onClick() {
                  return act('toggle');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Identification String",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Input, {
              "width": 13,
              "value": id,
              "onChange": function () {
                function onChange(e, value) {
                  return act('id', {
                    value: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Network",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Input, {
              "width": 10,
              "value": network,
              "defaultValue": "tcommsat",
              "onChange": function () {
                function onChange(e, value) {
                  return act('network', {
                    value: value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Prefabrication",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": prefab ? "check" : "times",
              "content": prefab ? "True" : "False",
              "disabled": "True"
            })
          })]
        })
      }), !!(toggled && multitool) && (0, _inferno.createComponentVNode)(2, _components.Box, {
        children: [type === 'bus' && (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Bus",
          children: (0, _inferno.createComponentVNode)(2, _components.Table, {
            children: (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: "Change Frequency:"
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: _constants.RADIO_CHANNELS.find(function (channel) {
                  return channel.freq === changefrequency;
                }) && (0, _inferno.createComponentVNode)(2, _components.Box, {
                  "inline": true,
                  "color": _constants.RADIO_CHANNELS.find(function (channel) {
                    return channel.freq === changefrequency;
                  }).color,
                  "ml": 2,
                  children: ["[", _constants.RADIO_CHANNELS.find(function (channel) {
                    return channel.freq === changefrequency;
                  }).name, "]"]
                })
              }), (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
                "animate": true,
                "unit": "GHz",
                "step": 0.2,
                "stepPixelSize": 10,
                "minValue": minfreq / 10,
                "maxValue": maxfreq / 10,
                "value": changefrequency / 10,
                "onChange": function () {
                  function onChange(e, value) {
                    return act('change_freq', {
                      value: value
                    });
                  }

                  return onChange;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "times",
                "disabled": changefrequency === 0,
                "onClick": function () {
                  function onClick() {
                    return act('change_freq', {
                      value: 10001
                    });
                  }

                  return onClick;
                }()
              })]
            })
          })
        }), type === 'relay' && (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Relay",
          children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Receiving",
            "icon": receiving ? 'volume-up' : 'volume-mute',
            "color": receiving ? '' : 'bad',
            "onClick": function () {
              function onClick() {
                return act('receive');
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button, {
            "content": "Broadcasting",
            "icon": broadcasting ? 'microphone' : 'microphone-slash',
            "color": broadcasting ? '' : 'bad',
            "onClick": function () {
              function onClick() {
                return act('broadcast');
              }

              return onClick;
            }()
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Linked Network Entities",
          children: (0, _inferno.createComponentVNode)(2, _components.Table, {
            children: linked.map(function (entry) {
              return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
                "className": "candystripe",
                children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                  "bold": true,
                  children: [entry.index, ". ", entry.id, " (", entry.name, ")"]
                }), !!multitool && (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "times",
                  "disabled": !multitool,
                  "onClick": function () {
                    function onClick() {
                      return act('unlink', {
                        value: entry.index
                      });
                    }

                    return onClick;
                  }()
                })]
              }, entry.id);
            })
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Filtered Frequencies",
          children: (0, _inferno.createComponentVNode)(2, _components.Table, {
            children: [frequencies.map(function (entry) {
              return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
                "className": "candystripe",
                children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                  "bold": true,
                  children: [entry / 10, " GHz"]
                }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                  children: _constants.RADIO_CHANNELS.find(function (channel) {
                    return channel.freq === entry;
                  }) && (0, _inferno.createComponentVNode)(2, _components.Box, {
                    "inline": true,
                    "color": _constants.RADIO_CHANNELS.find(function (channel) {
                      return channel.freq === entry;
                    }).color,
                    "ml": 2,
                    children: ["[", _constants.RADIO_CHANNELS.find(function (channel) {
                      return channel.freq === entry;
                    }).name, " ]"]
                  })
                }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell), !!multitool && (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "icon": "times",
                  "disabled": !multitool,
                  "onClick": function () {
                    function onClick() {
                      return act('delete', {
                        value: entry
                      });
                    }

                    return onClick;
                  }()
                })]
              }, frequencies.i);
            }), !!multitool && (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
              "className": "candystripe",
              "collapsing": true,
              children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: "Add Frequency"
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: _constants.RADIO_CHANNELS.find(function (channel) {
                  return channel.freq === frequency;
                }) && (0, _inferno.createComponentVNode)(2, _components.Box, {
                  "inline": true,
                  "color": _constants.RADIO_CHANNELS.find(function (channel) {
                    return channel.freq === frequency;
                  }).color,
                  "ml": 2,
                  children: ["[", _constants.RADIO_CHANNELS.find(function (channel) {
                    return channel.freq === frequency;
                  }).name, "]"]
                })
              }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
                children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
                  "animate": true,
                  "unit": "GHz",
                  "step": 0.2,
                  "stepPixelSize": 10,
                  "minValue": minfreq / 10,
                  "maxValue": maxfreq / 10,
                  "value": frequency / 10,
                  "onChange": function () {
                    function onChange(e, value) {
                      return act("tempfreq", {
                        value: value
                      });
                    }

                    return onChange;
                  }()
                })
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "plus",
                "disabled": !multitool,
                "onClick": function () {
                  function onClick() {
                    return act('freq');
                  }

                  return onClick;
                }()
              })]
            })]
          })
        }), !!multitool && (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Multitool",
          children: [!!multibuff && (0, _inferno.createComponentVNode)(2, _components.Box, {
            "bold": true,
            "m": 1,
            children: ["Current Buffer: ", multibuff]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledControls, {
            "m": 1,
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "plus",
              "content": "Add Machine",
              "disabled": !multitool,
              "onClick": function () {
                function onClick() {
                  return act('buffer');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "link",
              "content": "Link",
              "disabled": !multibuff,
              "onClick": function () {
                function onClick() {
                  return act('link');
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "times",
              "content": "Flush",
              "disabled": !multibuff,
              "onClick": function () {
                function onClick() {
                  return act('flush');
                }

                return onClick;
              }()
            })]
          })]
        })]
      })]
    })
  });
};

exports.Telecomms = Telecomms;

/***/ }),

/***/ "./packages/tgui/interfaces/TelecommsInteraction.js":
/*!**********************************************************!*\
  !*** ./packages/tgui/interfaces/TelecommsInteraction.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TelecommsInteraction = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

/**
 * @file
 * @copyright 2020 LetterN (https://github.com/LetterN)
 * @license MIT
 */
var TelecommsInteraction = function TelecommsInteraction(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _data$notice = data.notice,
      notice = _data$notice === void 0 ? "" : _data$notice,
      _data$multitool = data.multitool,
      multitool = _data$multitool === void 0 ? false : _data$multitool,
      _data$multitool_buf = data.multitool_buf,
      multitool_buf = _data$multitool_buf === void 0 ? null : _data$multitool_buf,
      _data$machine = data.machine,
      machine = _data$machine === void 0 ? null : _data$machine,
      _data$links = data.links,
      links = _data$links === void 0 ? [] : _data$links,
      _data$freq_listening = data.freq_listening,
      freq_listening = _data$freq_listening === void 0 ? [] : _data$freq_listening;
  var _machine$power = machine.power,
      power = _machine$power === void 0 ? false : _machine$power,
      _machine$id = machine.id,
      id = _machine$id === void 0 ? "NULL" : _machine$id,
      network = machine.network,
      _machine$prefab = machine.prefab,
      prefab = _machine$prefab === void 0 ? false : _machine$prefab,
      _machine$hidden = machine.hidden,
      hidden = _machine$hidden === void 0 ? false : _machine$hidden,
      _machine$isrelay = machine.isrelay,
      isrelay = _machine$isrelay === void 0 ? false : _machine$isrelay,
      _machine$isbus = machine.isbus,
      isbus = _machine$isbus === void 0 ? false : _machine$isbus;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    "width": 520,
    "height": 500,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createFragment)([!!notice && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: notice
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Network Access",
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Power Status",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": power ? 'power-off' : 'times',
              "color": power ? 'good' : 'bad',
              "onClick": function () {
                function onClick() {
                  return act('toggle');
                }

                return onClick;
              }(),
              children: power ? 'On' : 'Off'
            })
          }), power ? (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Identification String",
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "value": id,
              "width": "150px",
              "maxLength": 255,
              "onChange": function () {
                function onChange(e, value) {
                  return act('machine', {
                    'id': value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Network",
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "value": network,
              "width": "150px",
              "maxLength": 15,
              "onChange": function () {
                function onChange(e, value) {
                  return act('machine', {
                    'network': value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Prefabrication",
            "color": power ? 'good' : 'bad',
            children: prefab ? 'TRUE' : 'FALSE'
          }), !!isrelay && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Broadcasting",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": machine.broadcast ? 'check' : 'times',
              "color": machine.broadcast ? 'good' : 'bad',
              "onClick": function () {
                function onClick() {
                  return act('relay', {
                    'broadcast': true
                  });
                }

                return onClick;
              }(),
              children: machine.broadcast ? 'YES' : 'NO'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Receiving",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": machine.receiving ? 'check' : 'times',
              "color": machine.receiving ? 'good' : 'bad',
              "onClick": function () {
                function onClick() {
                  return act('relay', {
                    'receiving': true
                  });
                }

                return onClick;
              }(),
              children: machine.receiving ? 'YES' : 'NO'
            })
          })], 4), !!isbus && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Change Signal Frequency",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": machine.chang_frequency ? 'power-off' : 'times',
              "color": machine.chang_frequency ? 'good' : 'bad',
              "onClick": function () {
                function onClick() {
                  return act('frequency', {
                    'toggle': true
                  });
                }

                return onClick;
              }(),
              children: machine.chang_frequency ? 'Enabled' : 'Disabled'
            }), !!machine.chang_frequency && (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animate": true,
              "unit": "kHz",
              "step": 0.2,
              "stepPixelSize": 10,
              "minValue": 1201 / 10,
              "maxValue": 1599 / 10,
              "value": machine.chang_freq_value / 10,
              "format": function () {
                function format(value) {
                  return (0, _math.toFixed)(value, 1);
                }

                return format;
              }(),
              "onChange": function () {
                function onChange(e, value) {
                  return act('frequency', {
                    'adjust': value
                  });
                }

                return onChange;
              }()
            })]
          }), !!hidden && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Shadow Link",
            children: 'ACTIVE'
          }), !!multitool && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Multitool buffer",
            "buttons": multitool_buf ? (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "onClick": function () {
                function onClick() {
                  return act('multitool', {
                    'Link': true
                  });
                }

                return onClick;
              }(),
              children: "Link"
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "onClick": function () {
                function onClick() {
                  return act('multitool', {
                    'Flush': true
                  });
                }

                return onClick;
              }(),
              children: "Flush"
            })], 4) : (0, _inferno.createComponentVNode)(2, _components.Button, {
              "onClick": function () {
                function onClick() {
                  return act('multitool', {
                    'Add': true
                  });
                }

                return onClick;
              }(),
              children: "Add Machine"
            }),
            children: !!multitool_buf && multitool_buf.name + " (" + multitool_buf.id + ")"
          })], 0) : '']
        }), power ? (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Linked Network Entities",
          "level": 2,
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: links.map(function (entity) {
              return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": entity.ref,
                "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "onClick": function () {
                    function onClick() {
                      return act('unlink', {
                        'value': entity.ref
                      });
                    }

                    return onClick;
                  }(),
                  children: "Remove"
                }),
                children: entity.name + " (" + entity.id + ")"
              }, entity.name);
            })
          })
        }), (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Filtering Frequencies",
          "level": 2,
          children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
            "onClick": function () {
              function onClick() {
                return act('freq', {
                  'add': true
                });
              }

              return onClick;
            }(),
            children: "Add Filter"
          }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "br"), freq_listening && freq_listening.length ? freq_listening.map(function (thing) {
            var valid = _constants.RADIO_CHANNELS.find(function (channel) {
              return channel.freq === thing;
            });

            return (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "times",
              "onClick": function () {
                function onClick() {
                  return act('freq', {
                    'remove': thing
                  });
                }

                return onClick;
              }(),
              children: valid ? (0, _inferno.createVNode)(1, "span", null, thing + " (" + valid.name + ")", 0, {
                "style": "color: " + valid.color
              }) : thing
            }, thing);
          }) : '']
        })], 4) : '']
      })], 0)
    })
  });
};

exports.TelecommsInteraction = TelecommsInteraction;

/***/ }),

/***/ "./packages/tgui/interfaces/TelecommsLogBrowser.js":
/*!*********************************************************!*\
  !*** ./packages/tgui/interfaces/TelecommsLogBrowser.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TelecommsLogBrowser = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

/**
 * @file
 * @copyright 2020 LetterN (https://github.com/LetterN)
 * @license MIT
 */
var TelecommsLogBrowser = function TelecommsLogBrowser(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var notice = data.notice,
      _data$network = data.network,
      network = _data$network === void 0 ? "NULL" : _data$network,
      servers = data.servers,
      _data$selected = data.selected,
      selected = _data$selected === void 0 ? null : _data$selected,
      selected_logs = data.selected_logs;

  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 'servers'),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  var operational = selected && selected.status;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "theme": "ntos",
    "width": 575,
    "height": 400,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createFragment)([!!notice && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: notice
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Network Control",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Network",
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "value": network,
              "width": "150px",
              "maxLength": 15,
              "onChange": function () {
                function onChange(e, value) {
                  return act('network', {
                    'value': value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Memory",
            "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "minus-circle",
              "disabled": !servers.length || !!selected,
              "onClick": function () {
                function onClick() {
                  return act('release');
                }

                return onClick;
              }(),
              children: "Flush Buffer"
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "disabled": selected,
              "onClick": function () {
                function onClick() {
                  return act('probe');
                }

                return onClick;
              }(),
              children: "Probe Network"
            })], 4),
            children: servers ? servers.length + " currently probed and buffered" : 'Buffer is empty!'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Selected Server",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "disabled": !selected,
              "onClick": function () {
                function onClick() {
                  return act('mainmenu');
                }

                return onClick;
              }(),
              children: "Disconnect"
            }),
            children: selected ? selected.name + " (" + selected.id + ")" : "None (None)"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Recorded Traffic",
            children: selected ? selected.traffic <= 1024 ? selected.traffic + " Gigabytes" : Math.round(selected.traffic / 1024) + " Terrabytes" : '0 Gigabytes'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Server Status",
            "color": operational ? 'good' : 'bad',
            children: operational ? 'Running' : 'Server down!'
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === "servers",
          "icon": "server",
          "onClick": function () {
            function onClick() {
              return setTab("servers");
            }

            return onClick;
          }(),
          children: "Servers"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "disabled": !operational,
          "icon": "file",
          "selected": tab === "messages",
          "onClick": function () {
            function onClick() {
              return setTab("messages");
            }

            return onClick;
          }(),
          children: "Messages"
        })]
      }), tab === "messages" && operational ? (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Logs",
        children: operational && selected_logs ? selected_logs.map(function (logs) {
          return (0, _inferno.createComponentVNode)(2, _components.Section, {
            "level": 4,
            children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
              children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Filename",
                "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "onClick": function () {
                    function onClick() {
                      return act('delete', {
                        'value': logs.ref
                      });
                    }

                    return onClick;
                  }(),
                  children: "Delete"
                }),
                children: logs.name
              }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Data type",
                children: logs.input_type
              }), logs.source && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Source",
                children: "[" + logs.source.name + "]\n                          (Job: [" + logs.source.job + "])"
              }), logs.race && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Class",
                children: logs.race
              }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": "Contents",
                children: logs.message
              })]
            })
          }, logs.ref);
        }) : "No server selected!"
      }) : (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: servers && servers.length ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: servers.map(function (server) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "" + server.ref,
              "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                "selected": data.selected && server.ref === data.selected.ref,
                "onClick": function () {
                  function onClick() {
                    return act('viewmachine', {
                      'value': server.id
                    });
                  }

                  return onClick;
                }(),
                children: "Connect"
              }),
              children: server.name + " (" + server.id + ")"
            }, server.name);
          })
        }) : '404 Servers not found. Have you tried scanning the network?'
      })], 0)
    })
  });
};

exports.TelecommsLogBrowser = TelecommsLogBrowser;

/***/ }),

/***/ "./packages/tgui/interfaces/TelecommsMonitor.js":
/*!******************************************************!*\
  !*** ./packages/tgui/interfaces/TelecommsMonitor.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TelecommsMonitor = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _constants = __webpack_require__(/*! ../constants */ "./packages/tgui/constants.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

/**
 * @file
 * @copyright 2020 LetterN (https://github.com/LetterN)
 * @license MIT
 */
var TelecommsMonitor = function TelecommsMonitor(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var notice = data.notice,
      _data$network = data.network,
      network = _data$network === void 0 ? "NULL" : _data$network,
      servers = data.servers,
      _data$selected = data.selected,
      selected = _data$selected === void 0 ? null : _data$selected,
      selected_servers = data.selected_servers;

  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 'network-entity'),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  var operational = selected && selected.status;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "theme": "ntos",
    "resizable": true,
    "width": 575,
    "height": 400,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createFragment)([!!notice && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: notice
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Network Control",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Network",
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "value": network,
              "width": "150px",
              "maxLength": 15,
              "onChange": function () {
                function onChange(e, value) {
                  return act('network', {
                    'value': value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Memory",
            "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "minus-circle",
              "disabled": !servers.length || !!selected,
              "onClick": function () {
                function onClick() {
                  return act('release');
                }

                return onClick;
              }(),
              children: "Flush Buffer"
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "disabled": selected,
              "onClick": function () {
                function onClick() {
                  return act('probe');
                }

                return onClick;
              }(),
              children: "Probe Network"
            })], 4),
            children: !selected ? servers ? servers.length + " currently probed and buffered" : 'Buffer is empty!' : selected_servers ? selected_servers.length + " currently probed and buffered" : 'Connected devices is empty!'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Selected Entity",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "content": "Disconnect",
              "icon": "minus-circle",
              "disabled": !selected,
              "onClick": function () {
                function onClick() {
                  return act('mainmenu');
                }

                return onClick;
              }()
            }),
            children: selected ? selected.name + " (" + selected.id + ")" : "None (None)"
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "selected": tab === "network-entity",
          "icon": "server",
          "onClick": function () {
            function onClick() {
              return setTab("network-entity");
            }

            return onClick;
          }(),
          children: "Network Entities"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "disabled": !selected,
          "icon": "tasks",
          "selected": tab === "network-stat",
          "onClick": function () {
            function onClick() {
              return setTab("network-stat");
            }

            return onClick;
          }(),
          children: "Entity Status"
        })]
      }), tab === "network-stat" && selected ? (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Network Entity Status",
        children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            "color": operational ? 'good' : 'bad',
            children: operational ? 'Running' : 'Server down!'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Network Traffic",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": selected.traffic,
              "ranges": {
                good: [// 0-30%
                -Infinity, selected.netspeed * 0.30],
                average: [// 30-70%
                selected.netspeed * 0.31, selected.traffic * 0.70],
                bad: [// 70-100%
                selected.netspeed * 0.71, Infinity]
              },
              children: operational ? // Not to be confused to totaltraffic
              selected.traffic <= 1024 ? Math.max(selected.traffic, 0) + " Gigabytes" : Math.round(selected.traffic / 1024) + " Terrabytes" : '0 Gigabytes'
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Network Speed",
            children: operational ? selected.netspeed <= 1024 ? selected.netspeed + " Gigabytes/second" : Math.round(selected.netspeed / 1024) + " Terrabytes/second" : '0 Gigabytes/second'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Multi-Z Link",
            "color": operational && selected.long_range_link ? 'good' : 'bad',
            children: operational && selected.long_range_link ? 'true' // was capitalized before
            : 'false'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Frequency Listening",
            children: (0, _inferno.createComponentVNode)(2, _components.Box, {
              children: operational && selected.freq_listening.map(function (thing) {
                var valid = _constants.RADIO_CHANNELS.find(function (channel) {
                  return channel.freq === thing;
                });

                return valid ? (0, _inferno.createComponentVNode)(2, _components.Box, {
                  "as": "span",
                  "color": valid.color,
                  children: "[" + thing + "] (" + valid.name + ") "
                }) : "[" + thing + "] ";
              })
            })
          })]
        }), (0, _inferno.createComponentVNode)(2, _components.Section, {
          "title": "Servers Linked",
          "level": 3,
          children: operational && selected_servers ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: selected_servers.map(function (server) {
              return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
                "label": server.ref,
                "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                  "content": "Connect",
                  "onClick": function () {
                    function onClick() {
                      return act('viewmachine', {
                        'value': server.id
                      });
                    }

                    return onClick;
                  }()
                }),
                children: server.name + " (" + server.id + ")"
              }, server.name);
            })
          }) : !operational ? "Server currently down! Cannot fetch the buffer list!" : "Buffer is empty!"
        })]
      }) : (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Detected Network Entities",
        children: servers && servers.length ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: servers.map(function (server) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": server.ref,
              "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": "Connect",
                "selected": selected && server.ref === selected.ref,
                "onClick": function () {
                  function onClick() {
                    return act('viewmachine', {
                      'value': server.id
                    });
                  }

                  return onClick;
                }()
              }),
              children: server.name + " (" + server.id + ")"
            }, server.name);
          })
        }) : '404 Servers not found. Have you tried scanning the network?'
      })], 0)
    })
  });
};

exports.TelecommsMonitor = TelecommsMonitor;

/***/ }),

/***/ "./packages/tgui/interfaces/TelecommsPDALog.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/TelecommsPDALog.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CustomMsg = exports.TeleLogs = exports.TelecommsPDALog = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

/**
 * @file
 * @copyright 2020 LetterN (https://github.com/LetterN)
 * @license MIT
 */
// This is the entrypoint, don't mind the others
var TelecommsPDALog = function TelecommsPDALog(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var network = data.network,
      _data$notice = data.notice,
      notice = _data$notice === void 0 ? "" : _data$notice,
      _data$authenticated = data.authenticated,
      authenticated = _data$authenticated === void 0 ? false : _data$authenticated,
      _data$canhack = data.canhack,
      canhack = _data$canhack === void 0 ? false : _data$canhack,
      _data$silicon = data.silicon,
      silicon = _data$silicon === void 0 ? false : _data$silicon,
      _data$hack_status = data.hack_status,
      hack_status = _data$hack_status === void 0 ? null : _data$hack_status,
      _data$selected = data.selected,
      selected = _data$selected === void 0 ? null : _data$selected,
      _data$servers = data.servers,
      servers = _data$servers === void 0 ? [] : _data$servers;

  var _useSharedState = (0, _backend.useSharedState)(context, 'tab', 'pdalog-servers'),
      tab = _useSharedState[0],
      setTab = _useSharedState[1];

  var valid = selected && selected.status && authenticated;

  if (hack_status) {
    return (// should have used en -> jp unicode -> other encoding method->utf8
      (0, _inferno.createComponentVNode)(2, _layouts.Window, {
        "theme": "ntos",
        "resizable": true,
        "width": 727,
        "height": 510,
        children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
          "scrollable": true,
          children: (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
            children: [(0, _inferno.createVNode)(1, "b", null, (0, _inferno.createVNode)(1, "h3", null, "INTRN@L ACfES VIOL�TIa█ DEtE₡TED! Ree3ARcinG A█ \
                BAaKUP RdST�RE PbINT [0xcff32ca] - PLfASE aAIT", 0), 2), (0, _inferno.createVNode)(1, "i", null, silicon && !hack_status.emagging ? (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("Brute-forcing for server key. "), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createTextVNode)("It will take 20 seconds for every character that the password has."), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createTextVNode)("In the meantime, this console can reveal your true intentions if you let someone access it. Make sure no humans enter the room during that time.")], 4) : (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("QnJ1dGUtZm9yY2luZyBmb3Igc2VydmVyIGtleS48YnI+IEl0IHdpbG"), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createTextVNode)("wgdGFrZSAyMCBzZWNvbmRzIGZvciBldmVyeSBjaGFyYWN0ZXIgdGhh"), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createTextVNode)("dCB0aGUgcGFzc3dvcmQgaGFzLiBJbiB0aGUgbWVhbnRpbWUsIHRoaX"), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createTextVNode)("MgY29uc29sZSBjYW4gcmV2ZWFsIHlvdXIgdHJ1ZSBpbnRlbnRpb25z"), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createTextVNode)("IGlmIHlvdSBsZXQgc29tZW9uZSBhY2Nlc3MgaXQuIE1ha2Ugc3VyZS"), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createTextVNode)("BubyBodW1hbnMgZW50ZXIgdGhlIHJvb20gZHVyaW5nIHRoYXQgdGltZS4="), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "br")], 4), 0)]
          })
        })
      })
    );
  }

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "theme": "ntos",
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createFragment)([!!notice && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        children: notice
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Network Control",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Network",
            children: (0, _inferno.createComponentVNode)(2, _components.Input, {
              "value": network,
              "width": "150px",
              "maxLength": 15,
              "onChange": function () {
                function onChange(e, value) {
                  return act('network', {
                    'value': value
                  });
                }

                return onChange;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Memory",
            "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "minus-circle",
              "disabled": !servers.length,
              "onClick": function () {
                function onClick() {
                  return act('release');
                }

                return onClick;
              }(),
              children: "Flush Buffer"
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "disabled": servers.length,
              "onClick": function () {
                function onClick() {
                  return act('probe');
                }

                return onClick;
              }(),
              children: "Probe Network"
            })], 4),
            children: servers ? servers.length + " currently probed and buffered" : 'Buffer is empty!'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Authentication",
            "color": authenticated ? 'good' : 'bad',
            "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "disabled": !authenticated || !selected,
              "onClick": function () {
                function onClick() {
                  return act('change_auth');
                }

                return onClick;
              }(),
              children: "Change Password"
            }), !!canhack && (0, _inferno.createComponentVNode)(2, _components.Button, {
              "color": "bad",
              "disabled": authenticated || !selected,
              "onClick": function () {
                function onClick() {
                  return act('hack');
                }

                return onClick;
              }(),
              children: "Brute Force"
            })], 0),
            children: authenticated ? "KEY OK" : "KEY FAIL"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "PDA Server",
            "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": authenticated ? 'unlock' : 'lock',
              "color": authenticated ? 'good' : 'bad',
              "disabled": !selected,
              "onClick": function () {
                function onClick() {
                  return act('auth');
                }

                return onClick;
              }(),
              children: !authenticated ? 'Login' : 'Logout'
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "minus-circle",
              "disabled": !selected,
              "onClick": function () {
                function onClick() {
                  return act('mainmenu');
                }

                return onClick;
              }(),
              children: "Disconnect"
            })], 4),
            children: selected ? selected.name + " (" + selected.id + ")" : "None (None)"
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "PDA Server Status",
            "color": selected && selected.status ? 'good' : 'bad',
            children: selected ? selected.status ? 'Running' : "Server down! Logging and messaging\n                    functionality unavailable!" : 'No server selected'
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Tabs, {
        children: [(0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "icon": "server",
          "selected": tab === "pdalog-servers",
          "onClick": function () {
            function onClick() {
              return setTab("pdalog-servers");
            }

            return onClick;
          }(),
          children: "Servers"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "disabled": !valid,
          "icon": "file",
          "selected": tab === "pdalog-message",
          "onClick": function () {
            function onClick() {
              return setTab("pdalog-message");
            }

            return onClick;
          }(),
          children: "Message Logs"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "disabled": !valid,
          "icon": "file",
          "selected": tab === "pdalog-reqmsg",
          "onClick": function () {
            function onClick() {
              return setTab("pdalog-reqmsg");
            }

            return onClick;
          }(),
          children: "Req. Console Logs"
        }), (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
          "disabled": !valid,
          "icon": "server",
          "selected": tab === "pdalog-custommsg",
          "onClick": function () {
            function onClick() {
              return setTab("pdalog-custommsg");
            }

            return onClick;
          }(),
          children: "Set Admin Message"
        })]
      }), tab === "pdalog-servers" ? (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: servers && servers.length ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: servers.map(function (server) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "" + server.ref,
              "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                "selected": data.selected && server.ref === data.selected.ref,
                "onClick": function () {
                  function onClick() {
                    return act('viewmachine', {
                      'value': server.id
                    });
                  }

                  return onClick;
                }(),
                children: "Connect"
              }),
              children: server.name + " (" + server.id + ")"
            }, server.name);
          })
        }) : '404 Servers not found. Have you tried scanning the network?'
      }) : (0, _inferno.createFragment)([tab === "pdalog-message" && authenticated && (0, _inferno.createComponentVNode)(2, TeleLogs), tab === "pdalog-reqmsg" && authenticated && (0, _inferno.createComponentVNode)(2, TeleLogs, {
        "msgs_log": true
      }), tab === "pdalog-custommsg" && authenticated && (0, _inferno.createComponentVNode)(2, CustomMsg)], 0)], 0)
    })
  });
}; // They're the same, so merged it into this. Idea stolen from cargonia


exports.TelecommsPDALog = TelecommsPDALog;

var TeleLogs = function TeleLogs(props, context) {
  var _props$msgs_log = props.msgs_log,
      msgs_log = _props$msgs_log === void 0 ? false : _props$msgs_log;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var _data$message_logs = data.message_logs,
      message_logs = _data$message_logs === void 0 ? [] : _data$message_logs,
      _data$recon_logs = data.recon_logs,
      recon_logs = _data$recon_logs === void 0 ? [] : _data$recon_logs;
  var prioritycolorMap = {
    'Normal': 'warning',
    'High': 'bad',
    'Extreme': 'bad'
  };
  var log_to_use = (msgs_log ? recon_logs : message_logs) || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Logs",
    children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "sync",
      "onClick": function () {
        function onClick() {
          return act('refresh');
        }

        return onClick;
      }(),
      children: "Refresh"
    }), (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
      "icon": "trash",
      "disabled": !log_to_use || !(log_to_use && log_to_use.length),
      "onClick": function () {
        function onClick() {
          return act('clear_log', {
            'value': msgs_log ? 'rc_msgs' : 'pda_logs'
          });
        }

        return onClick;
      }(),
      children: "Delete All Logs"
    }), (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": "Messages",
      "level": 2,
      children: log_to_use == null ? void 0 : log_to_use.map(function (message) {
        return (0, _inferno.createComponentVNode)(2, _components.Section, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
            children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": msgs_log ? "Sending Dep." : "Sender",
              "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
                "onClick": function () {
                  function onClick() {
                    return act('del_log', {
                      'ref': message.ref
                    });
                  }

                  return onClick;
                }(),
                children: "Delete"
              }),
              children: message.sender
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": msgs_log ? "Receiving Dep." : "Recipient",
              children: message.recipient
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Message",
              "buttons": !!message.picture && // don't send img over req
              (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "image",
                "onClick": function () {
                  function onClick() {
                    return Byond.topic({
                      'src': message.ref,
                      'photo': 1
                    });
                  }

                  return onClick;
                }(),
                children: "Image"
              }),
              children: message.message
            }), !!msgs_log && (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Stamp",
              "color": message.stamp !== "Unstamped" ? 'label' : 'bad',
              "bold": message.stamp !== 'Unstamped',
              children: message.stamp
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "ID Authentication",
              "color": message.auth !== "Unauthenticated" ? 'good' : 'bad',
              children: message.auth
            }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "label": "Priority",
              "color": message.priority in prioritycolorMap ? prioritycolorMap[message.priority] : 'good',
              "bold": message.priority === 'Extreme',
              children: message.priority === 'Extreme' ? "!!" + message.priority + "!!" : message.priority
            })], 4)]
          })
        }, message.ref);
      })
    })]
  });
};

exports.TeleLogs = TeleLogs;

var CustomMsg = function CustomMsg(props, context) {
  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act,
      data = _useBackend3.data;

  var fake_message = data.fake_message !== {} ? data.fake_message : {
    'sender': 'System Administrator',
    'job': 'Admin',
    'recepient': null,
    'message': 'This is a test, please ignore'
  };
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Custom Message",
    children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "sync",
      "onClick": function () {
        function onClick() {
          return act('fake', {
            'reset': true
          });
        }

        return onClick;
      }(),
      children: "Reset"
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "disabled": !fake_message.recepient || !fake_message.message,
      "onClick": function () {
        function onClick() {
          return act('fake', {
            'send': true
          });
        }

        return onClick;
      }(),
      children: "Send"
    }), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createVNode)(1, "br"), (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Sender",
        children: (0, _inferno.createComponentVNode)(2, _components.Input, {
          "value": fake_message.sender,
          "width": "250px",
          "maxLength": 42,
          "onChange": function () {
            function onChange(e, value) {
              return act('fake', {
                'sender': value
              });
            }

            return onChange;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Sender's Job",
        children: (0, _inferno.createComponentVNode)(2, _components.Input, {
          "value": fake_message.job,
          "width": "250px",
          "maxLength": 100,
          "onChange": function () {
            function onChange(e, value) {
              return act('fake', {
                'job': value
              });
            }

            return onChange;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Recipient",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "selected": fake_message.recepient,
          "onClick": function () {
            function onClick() {
              return act('fake', {
                'recepient': true
              });
            }

            return onClick;
          }(),
          children: fake_message.recepient ? fake_message.recepient : 'Select'
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Message",
        children: (0, _inferno.createComponentVNode)(2, _components.Input, {
          "value": fake_message.message,
          "width": "500px",
          "height": "150px",
          "maxLength": 2048,
          "onChange": function () {
            function onChange(e, value) {
              return act('fake', {
                'message': value
              });
            }

            return onChange;
          }()
        })
      })]
    })]
  });
};

exports.CustomMsg = CustomMsg;

/***/ }),

/***/ "./packages/tgui/interfaces/Teleporter.js":
/*!************************************************!*\
  !*** ./packages/tgui/interfaces/Teleporter.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Teleporter = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Teleporter = function Teleporter(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var calibrated = data.calibrated,
      calibrating = data.calibrating,
      power_station = data.power_station,
      regime_set = data.regime_set,
      teleporter_hub = data.teleporter_hub,
      target = data.target;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 470,
    "height": 140,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: !power_station && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "bad",
          "textAlign": "center",
          children: "No power station linked."
        }) || !teleporter_hub && (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "bad",
          "textAlign": "center",
          children: "No hub linked."
        }) || (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Regime",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "tools",
              "content": "Change Regime",
              "onClick": function () {
                function onClick() {
                  return act('regimeset');
                }

                return onClick;
              }()
            }),
            children: regime_set
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Current Target",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "tools",
              "content": "Set Target",
              "onClick": function () {
                function onClick() {
                  return act('settarget');
                }

                return onClick;
              }()
            }),
            children: target
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Calibration",
            "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "tools",
              "content": "Calibrate Hub",
              "onClick": function () {
                function onClick() {
                  return act('calibrate');
                }

                return onClick;
              }()
            }),
            children: calibrating && (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "average",
              children: "In Progress"
            }) || calibrated && (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "good",
              children: "Optimal"
            }) || (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "bad",
              children: "Sub-Optimal"
            })
          })]
        })
      })
    })
  });
};

exports.Teleporter = Teleporter;

/***/ }),

/***/ "./packages/tgui/interfaces/ThermoMachine.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/ThermoMachine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ThermoMachine = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var ThermoMachine = function ThermoMachine(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 230,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Status",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Temperature",
            children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "value": data.temperature,
              "format": function () {
                function format(value) {
                  return (0, _math.toFixed)(value, 2);
                }

                return format;
              }()
            }), ' K']
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Pressure",
            children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
              "value": data.pressure,
              "format": function () {
                function format(value) {
                  return (0, _math.toFixed)(value, 2);
                }

                return format;
              }()
            }), ' kPa']
          })]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Controls",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.on ? 'power-off' : 'times',
          "content": data.on ? 'On' : 'Off',
          "selected": data.on,
          "onClick": function () {
            function onClick() {
              return act('power');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Target Temperature",
            children: (0, _inferno.createComponentVNode)(2, _components.NumberInput, {
              "animated": true,
              "value": Math.round(data.target),
              "unit": "K",
              "width": "62px",
              "minValue": Math.round(data.min),
              "maxValue": Math.round(data.max),
              "step": 5,
              "stepPixelSize": 3,
              "onDrag": function () {
                function onDrag(e, value) {
                  return act('target', {
                    target: value
                  });
                }

                return onDrag;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Presets",
            children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fast-backward",
              "disabled": data.target === data.min,
              "title": "Minimum temperature",
              "onClick": function () {
                function onClick() {
                  return act('target', {
                    target: data.min
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "sync",
              "disabled": data.target === data.initial,
              "title": "Room Temperature",
              "onClick": function () {
                function onClick() {
                  return act('target', {
                    target: data.initial
                  });
                }

                return onClick;
              }()
            }), (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "fast-forward",
              "disabled": data.target === data.max,
              "title": "Maximum Temperature",
              "onClick": function () {
                function onClick() {
                  return act('target', {
                    target: data.max
                  });
                }

                return onClick;
              }()
            })]
          })]
        })
      })]
    })
  });
};

exports.ThermoMachine = ThermoMachine;

/***/ }),

/***/ "./packages/tgui/interfaces/Timer.js":
/*!*******************************************!*\
  !*** ./packages/tgui/interfaces/Timer.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Timer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Timer = function Timer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var minutes = data.minutes,
      seconds = data.seconds,
      timing = data.timing,
      loop = data.loop;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 275,
    "height": 115,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Timing Unit",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": 'sync',
          "content": loop ? 'Repeating' : 'Repeat',
          "selected": loop,
          "onClick": function () {
            function onClick() {
              return act('repeat');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "clock-o",
          "content": timing ? 'Stop' : 'Start',
          "selected": timing,
          "onClick": function () {
            function onClick() {
              return act('time');
            }

            return onClick;
          }()
        })], 4),
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "fast-backward",
          "disabled": timing,
          "onClick": function () {
            function onClick() {
              return act('input', {
                adjust: -30
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "backward",
          "disabled": timing,
          "onClick": function () {
            function onClick() {
              return act('input', {
                adjust: -1
              });
            }

            return onClick;
          }()
        }), ' ', String(minutes).padStart(2, '0'), ":", String(seconds).padStart(2, '0'), ' ', (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "forward",
          "disabled": timing,
          "onClick": function () {
            function onClick() {
              return act('input', {
                adjust: 1
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "fast-forward",
          "disabled": timing,
          "onClick": function () {
            function onClick() {
              return act('input', {
                adjust: 30
              });
            }

            return onClick;
          }()
        })]
      })
    })
  });
};

exports.Timer = Timer;

/***/ }),

/***/ "./packages/tgui/interfaces/TransferValve.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/TransferValve.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TransferValve = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var TransferValve = function TransferValve(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var tank_one = data.tank_one,
      tank_two = data.tank_two,
      attached_device = data.attached_device,
      valve = data.valve;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 310,
    "height": 300,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Valve Status",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": valve ? "unlock" : "lock",
              "content": valve ? "Open" : "Closed",
              "disabled": !tank_one || !tank_two,
              "onClick": function () {
                function onClick() {
                  return act('toggle');
                }

                return onClick;
              }()
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Valve Attachment",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": "Configure",
          "icon": "cog",
          "disabled": !attached_device,
          "onClick": function () {
            function onClick() {
              return act('device');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Attachment",
            children: attached_device ? (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "eject",
              "content": attached_device,
              "disabled": !attached_device,
              "onClick": function () {
                function onClick() {
                  return act('remove_device');
                }

                return onClick;
              }()
            }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "average",
              children: "No Assembly"
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Attachment One",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Attachment",
            children: tank_one ? (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "eject",
              "content": tank_one,
              "disabled": !tank_one,
              "onClick": function () {
                function onClick() {
                  return act('tankone');
                }

                return onClick;
              }()
            }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "average",
              children: "No Tank"
            })
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Attachment Two",
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Attachment",
            children: tank_two ? (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": "eject",
              "content": tank_two,
              "disabled": !tank_two,
              "onClick": function () {
                function onClick() {
                  return act('tanktwo');
                }

                return onClick;
              }()
            }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
              "color": "average",
              children: "No Tank"
            })
          })
        })
      })]
    })
  });
};

exports.TransferValve = TransferValve;

/***/ }),

/***/ "./packages/tgui/interfaces/TurbineComputer.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/TurbineComputer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TurbineComputer = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var TurbineComputer = function TurbineComputer(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var operational = Boolean(data.compressor && !data.compressor_broke && data.turbine && !data.turbine_broke);
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 310,
    "height": 150,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Status",
        "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.online ? 'power-off' : 'times',
          "content": data.online ? 'Online' : 'Offline',
          "selected": data.online,
          "disabled": !operational,
          "onClick": function () {
            function onClick() {
              return act('toggle_power');
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "sync",
          "content": "Reconnect",
          "onClick": function () {
            function onClick() {
              return act('reconnect');
            }

            return onClick;
          }()
        })], 4),
        children: !operational && (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Compressor Status",
            "color": !data.compressor || data.compressor_broke ? 'bad' : 'good',
            children: data.compressor_broke ? data.compressor ? 'Offline' : 'Missing' : 'Online'
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Turbine Status",
            "color": !data.turbine || data.turbine_broke ? 'bad' : 'good',
            children: data.turbine_broke ? data.turbine ? 'Offline' : 'Missing' : 'Online'
          })]
        }) || (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Turbine Speed",
            children: [data.rpm, " RPM"]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Internal Temp",
            children: [data.temp, " K"]
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Generated Power",
            children: data.power
          })]
        })
      })
    })
  });
};

exports.TurbineComputer = TurbineComputer;

/***/ }),

/***/ "./packages/tgui/interfaces/TurretControl.js":
/*!***************************************************!*\
  !*** ./packages/tgui/interfaces/TurretControl.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TurretControl = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var _InterfaceLockNoticeBox = __webpack_require__(/*! ./common/InterfaceLockNoticeBox */ "./packages/tgui/interfaces/common/InterfaceLockNoticeBox.js");

var TurretControl = function TurretControl(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var locked = data.locked && !data.siliconUser;
  var enabled = data.enabled,
      lethal = data.lethal,
      shootCyborgs = data.shootCyborgs;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 305,
    "height": 172,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _InterfaceLockNoticeBox.InterfaceLockNoticeBox), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Turret Status",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": enabled ? 'power-off' : 'times',
              "content": enabled ? 'Enabled' : 'Disabled',
              "selected": enabled,
              "disabled": locked,
              "onClick": function () {
                function onClick() {
                  return act('power');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Turret Mode",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": lethal ? 'exclamation-triangle' : 'minus-circle',
              "content": lethal ? 'Lethal' : 'Stun',
              "color": lethal ? "bad" : "average",
              "disabled": locked,
              "onClick": function () {
                function onClick() {
                  return act('mode');
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Target Cyborgs",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "icon": shootCyborgs ? 'check' : 'times',
              "content": shootCyborgs ? 'Yes' : 'No',
              "selected": shootCyborgs,
              "disabled": locked,
              "onClick": function () {
                function onClick() {
                  return act('shoot_silicons');
                }

                return onClick;
              }()
            })
          })]
        })
      })]
    })
  });
};

exports.TurretControl = TurretControl;

/***/ }),

/***/ "./packages/tgui/interfaces/Uplink.js":
/*!********************************************!*\
  !*** ./packages/tgui/interfaces/Uplink.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.GenericUplink = exports.Uplink = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _format = __webpack_require__(/*! ../format */ "./packages/tgui/format.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var MAX_SEARCH_RESULTS = 25;

var Uplink = function Uplink(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      data = _useBackend.data;

  var telecrystals = data.telecrystals;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 620,
    "height": 580,
    "theme": "syndicate",
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: (0, _inferno.createComponentVNode)(2, GenericUplink, {
        "currencyAmount": telecrystals,
        "currencySymbol": "TC"
      })
    })
  });
};

exports.Uplink = Uplink;

var GenericUplink = function GenericUplink(props, context) {
  var _categories$, _categories$find;

  var _props$currencyAmount = props.currencyAmount,
      currencyAmount = _props$currencyAmount === void 0 ? 0 : _props$currencyAmount,
      _props$currencySymbol = props.currencySymbol,
      currencySymbol = _props$currencySymbol === void 0 ? 'cr' : _props$currencySymbol;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var compactMode = data.compactMode,
      lockable = data.lockable,
      _data$categories = data.categories,
      categories = _data$categories === void 0 ? [] : _data$categories;

  var _useLocalState = (0, _backend.useLocalState)(context, 'searchText', ''),
      searchText = _useLocalState[0],
      setSearchText = _useLocalState[1];

  var _useLocalState2 = (0, _backend.useLocalState)(context, 'category', (_categories$ = categories[0]) == null ? void 0 : _categories$.name),
      selectedCategory = _useLocalState2[0],
      setSelectedCategory = _useLocalState2[1];

  var testSearch = (0, _string.createSearch)(searchText, function (item) {
    return item.name + item.desc;
  });
  var items = searchText.length > 0 // Flatten all categories and apply search to it
  && categories.flatMap(function (category) {
    return category.items || [];
  }).filter(testSearch).filter(function (item, i) {
    return i < MAX_SEARCH_RESULTS;
  }) // Select a category and show all items in it
  || ((_categories$find = categories.find(function (category) {
    return category.name === selectedCategory;
  })) == null ? void 0 : _categories$find.items) // If none of that results in a list, return an empty list
  || [];
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": (0, _inferno.createComponentVNode)(2, _components.Box, {
      "inline": true,
      "color": currencyAmount > 0 ? 'good' : 'bad',
      children: [(0, _format.formatMoney)(currencyAmount), " ", currencySymbol]
    }),
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createTextVNode)("Search"), (0, _inferno.createComponentVNode)(2, _components.Input, {
      "autoFocus": true,
      "value": searchText,
      "onInput": function () {
        function onInput(e, value) {
          return setSearchText(value);
        }

        return onInput;
      }(),
      "mx": 1
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": compactMode ? 'list' : 'info',
      "content": compactMode ? 'Compact' : 'Detailed',
      "onClick": function () {
        function onClick() {
          return act('compact_toggle');
        }

        return onClick;
      }()
    }), !!lockable && (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "lock",
      "content": "Lock",
      "onClick": function () {
        function onClick() {
          return act('lock');
        }

        return onClick;
      }()
    })], 0),
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: [searchText.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
          "vertical": true,
          children: categories.map(function (category) {
            var _category$items;

            return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "selected": category.name === selectedCategory,
              "onClick": function () {
                function onClick() {
                  return setSelectedCategory(category.name);
                }

                return onClick;
              }(),
              children: [category.name, " (", ((_category$items = category.items) == null ? void 0 : _category$items.length) || 0, ")"]
            }, category.name);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        "basis": 0,
        children: [items.length === 0 && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
          children: searchText.length === 0 ? 'No items in this category.' : 'No results found.'
        }), (0, _inferno.createComponentVNode)(2, ItemList, {
          "compactMode": searchText.length > 0 || compactMode,
          "currencyAmount": currencyAmount,
          "currencySymbol": currencySymbol,
          "items": items
        })]
      })]
    })
  });
};

exports.GenericUplink = GenericUplink;

var ItemList = function ItemList(props, context) {
  var compactMode = props.compactMode,
      currencyAmount = props.currencyAmount,
      currencySymbol = props.currencySymbol;

  var _useBackend3 = (0, _backend.useBackend)(context),
      act = _useBackend3.act;

  var _useLocalState3 = (0, _backend.useLocalState)(context, 'hoveredItem', {}),
      hoveredItem = _useLocalState3[0],
      setHoveredItem = _useLocalState3[1];

  var hoveredCost = hoveredItem && hoveredItem.cost || 0; // Append extra hover data to items

  var items = props.items.map(function (item) {
    var notSameItem = hoveredItem && hoveredItem.name !== item.name;
    var notEnoughHovered = currencyAmount - hoveredCost < item.cost;
    var disabledDueToHovered = notSameItem && notEnoughHovered;
    var disabled = currencyAmount < item.cost || disabledDueToHovered;
    return Object.assign({}, item, {
      disabled: disabled
    });
  });

  if (compactMode) {
    return (0, _inferno.createComponentVNode)(2, _components.Table, {
      children: items.map(function (item) {
        return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
          "className": "candystripe",
          children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "bold": true,
            children: (0, _string.decodeHtmlEntities)(item.name)
          }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
            "collapsing": true,
            "textAlign": "right",
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "content": (0, _format.formatMoney)(item.cost) + ' ' + currencySymbol,
              "disabled": item.disabled,
              "tooltip": item.desc,
              "tooltipPosition": "left",
              "onmouseover": function () {
                function onmouseover() {
                  return setHoveredItem(item);
                }

                return onmouseover;
              }(),
              "onmouseout": function () {
                function onmouseout() {
                  return setHoveredItem({});
                }

                return onmouseout;
              }(),
              "onClick": function () {
                function onClick() {
                  return act('buy', {
                    name: item.name
                  });
                }

                return onClick;
              }()
            })
          })]
        }, item.name);
      })
    });
  }

  return items.map(function (item) {
    return (0, _inferno.createComponentVNode)(2, _components.Section, {
      "title": item.name,
      "level": 2,
      "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
        "content": item.cost + ' ' + currencySymbol,
        "disabled": item.disabled,
        "onmouseover": function () {
          function onmouseover() {
            return setHoveredItem(item);
          }

          return onmouseover;
        }(),
        "onmouseout": function () {
          function onmouseout() {
            return setHoveredItem({});
          }

          return onmouseout;
        }(),
        "onClick": function () {
          function onClick() {
            return act('buy', {
              name: item.name
            });
          }

          return onClick;
        }()
      }),
      children: (0, _string.decodeHtmlEntities)(item.desc)
    }, item.name);
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/VaultController.js":
/*!*****************************************************!*\
  !*** ./packages/tgui/interfaces/VaultController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.VaultController = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _math = __webpack_require__(/*! common/math */ "./packages/common/math.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var VaultController = function VaultController(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 120,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Lock Status: ",
        "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
          "content": data.doorstatus ? 'Locked' : 'Unlocked',
          "icon": data.doorstatus ? 'lock' : 'unlock',
          "disabled": data.stored < data.max,
          "onClick": function () {
            function onClick() {
              return act('togglelock');
            }

            return onClick;
          }()
        }),
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Charge",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.stored / data.max,
              "ranges": {
                good: [1, Infinity],
                average: [0.30, 1],
                bad: [-Infinity, 0.30]
              },
              children: (0, _math.toFixed)(data.stored / 1000) + ' / ' + (0, _math.toFixed)(data.max / 1000) + ' kW'
            })
          })
        })
      })
    })
  });
};

exports.VaultController = VaultController;

/***/ }),

/***/ "./packages/tgui/interfaces/Vendatray.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/Vendatray.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Vendatray = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Vendatray = function Vendatray(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var product_name = data.product_name,
      product_cost = data.product_cost,
      tray_open = data.tray_open,
      registered = data.registered,
      owner_name = data.owner_name;
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 300,
    "height": 270,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex, {
        "mb": 1,
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "mr": 1,
          children: !!product_name && (0, _inferno.createComponentVNode)(2, VendingImage)
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1,
          children: [(0, _inferno.createComponentVNode)(2, _components.Section, {
            "fontSize": "18px",
            "align": "center",
            children: [(0, _inferno.createVNode)(1, "b", null, product_name ? product_name : "Empty", 0), (0, _inferno.createComponentVNode)(2, _components.Box, {
              "fontSize": "16px",
              children: [(0, _inferno.createVNode)(1, "i", null, [product_name ? product_cost : "N/A", (0, _inferno.createTextVNode)(" cr ")], 0), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "icon": "pen",
                "onClick": function () {
                  function onClick() {
                    return act('Adjust');
                  }

                  return onClick;
                }()
              })]
            })]
          }), (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
            "fluid": true,
            "icon": "window-restore",
            "content": tray_open ? 'Open' : 'Closed',
            "selected": tray_open,
            "onClick": function () {
              function onClick() {
                return act('Open');
              }

              return onClick;
            }()
          }), (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
            "fluid": true,
            "icon": "money-bill-wave",
            "content": "Purchase Item",
            "disabled": !product_name,
            "onClick": function () {
              function onClick() {
                return act('Buy');
              }

              return onClick;
            }()
          })], 4)]
        })]
      }), registered ? (0, _inferno.createComponentVNode)(2, _components.Section, {
        "italics": true,
        children: ["Pays to the account of ", owner_name, "."]
      }) : (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
        children: "Tray is unregistered."
      }), (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "icon": "cash-register",
        "content": "Register Tray",
        "disabled": registered,
        "onClick": function () {
          function onClick() {
            return act('Register');
          }

          return onClick;
        }()
      })], 4)]
    })
  });
};

exports.Vendatray = Vendatray;

var VendingImage = function VendingImage(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      data = _useBackend2.data;

  var product_icon = data.product_icon;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "height": "100%",
    children: (0, _inferno.createComponentVNode)(2, _components.Box, {
      "as": "img",
      "m": 1,
      "src": "data:image/jpeg;base64," + product_icon,
      "height": "96px",
      "width": "96px",
      "style": {
        '-ms-interpolation-mode': 'nearest-neighbor',
        'vertical-align': 'middle'
      }
    })
  });
};

/***/ }),

/***/ "./packages/tgui/interfaces/Vending.js":
/*!*********************************************!*\
  !*** ./packages/tgui/interfaces/Vending.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Vending = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _react = __webpack_require__(/*! common/react */ "./packages/common/react.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var VendingRow = function VendingRow(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var product = props.product,
      productStock = props.productStock,
      custom = props.custom;
  var onstation = data.onstation,
      department = data.department,
      user = data.user;
  var free = !onstation || product.price === 0 || !product.premium && department && user && department === user.department;
  return (0, _inferno.createComponentVNode)(2, _components.Table.Row, {
    children: [(0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      children: product.base64 && (0, _inferno.createVNode)(1, "img", null, null, 1, {
        "src": "data:image/jpeg;base64," + product.img,
        "style": {
          'vertical-align': 'middle',
          'horizontal-align': 'middle'
        }
      }) || (0, _inferno.createVNode)(1, "span", (0, _react.classes)(['vending32x32', product.path]), null, 1, {
        "style": {
          'vertical-align': 'middle',
          'horizontal-align': 'middle'
        }
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "bold": true,
      children: product.name
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      "textAlign": "center",
      children: (0, _inferno.createComponentVNode)(2, _components.Box, {
        "color": custom && 'good' || productStock <= 0 && 'bad' || productStock <= product.max_amount / 2 && 'average' || 'good',
        children: [productStock, " in stock"]
      })
    }), (0, _inferno.createComponentVNode)(2, _components.Table.Cell, {
      "collapsing": true,
      "textAlign": "center",
      children: custom && (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "content": data.access ? 'FREE' : product.price + ' cr',
        "onClick": function () {
          function onClick() {
            return act('dispense', {
              'item': product.name
            });
          }

          return onClick;
        }()
      }) || (0, _inferno.createComponentVNode)(2, _components.Button, {
        "fluid": true,
        "disabled": productStock === 0 || !free && (!data.user || product.price > data.user.cash),
        "content": free ? 'FREE' : product.price + ' cr',
        "onClick": function () {
          function onClick() {
            return act('vend', {
              'ref': product.ref
            });
          }

          return onClick;
        }()
      })
    })]
  });
};

var Vending = function Vending(props, context) {
  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act,
      data = _useBackend2.data;

  var user = data.user,
      onstation = data.onstation,
      _data$product_records = data.product_records,
      product_records = _data$product_records === void 0 ? [] : _data$product_records,
      _data$coin_records = data.coin_records,
      coin_records = _data$coin_records === void 0 ? [] : _data$coin_records,
      _data$hidden_records = data.hidden_records,
      hidden_records = _data$hidden_records === void 0 ? [] : _data$hidden_records,
      stock = data.stock;
  var inventory;
  var custom = false;

  if (data.vending_machine_input) {
    inventory = data.vending_machine_input || [];
    custom = true;
  } else {
    inventory = [].concat(product_records, coin_records);

    if (data.extended_inventory) {
      inventory = [].concat(inventory, hidden_records);
    }
  } // Just in case we still have undefined values in the list


  inventory = inventory.filter(function (item) {
    return !!item;
  });
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "title": "Vending Machine",
    "width": 450,
    "height": 600,
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true,
      children: [!!onstation && (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "User",
        children: user && (0, _inferno.createComponentVNode)(2, _components.Box, {
          children: ["Welcome, ", (0, _inferno.createVNode)(1, "b", null, user.name, 0), ",", ' ', (0, _inferno.createVNode)(1, "b", null, user.job || 'Unemployed', 0), "!", (0, _inferno.createVNode)(1, "br"), "Your balance is ", (0, _inferno.createVNode)(1, "b", null, [user.cash, (0, _inferno.createTextVNode)(" credits")], 0), "."]
        }) || (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "light-grey",
          children: ["No registered ID card!", (0, _inferno.createVNode)(1, "br"), "Please contact your local HoP!"]
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Products",
        children: (0, _inferno.createComponentVNode)(2, _components.Table, {
          children: inventory.map(function (product) {
            return (0, _inferno.createComponentVNode)(2, VendingRow, {
              "custom": custom,
              "product": product,
              "productStock": stock[product.name]
            }, product.name);
          })
        })
      })]
    })
  });
};

exports.Vending = Vending;

/***/ }),

/***/ "./packages/tgui/interfaces/VrSleeper.js":
/*!***********************************************!*\
  !*** ./packages/tgui/interfaces/VrSleeper.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.VrSleeper = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var VrSleeper = function VrSleeper(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 475,
    "height": 340,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [!!data.emagged && (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.Box, {
          "color": "bad",
          children: "Safety restraints disabled."
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "Virtual Avatar",
        children: data.vr_avatar ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Name",
            children: data.vr_avatar.name
          }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Status",
            children: data.vr_avatar.status
          }), !!data.vr_avatar && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
            "label": "Health",
            children: (0, _inferno.createComponentVNode)(2, _components.ProgressBar, {
              "value": data.vr_avatar.health / data.vr_avatar.maxhealth,
              "ranges": {
                good: [0.9, Infinity],
                average: [0.7, 0.8],
                bad: [-Infinity, 0.5]
              }
            })
          })]
        }) : "No Virtual Avatar detected"
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        "title": "VR Commands",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": data.toggle_open ? 'unlock' : 'lock',
          "disabled": data.stored < data.max,
          "onClick": function () {
            function onClick() {
              return act('toggle_open');
            }

            return onClick;
          }(),
          children: data.toggle_open ? 'Close VR Sleeper' : 'Open VR Sleeper'
        }), (0, _inferno.createComponentVNode)(2, _components.Section, {
          children: data.isoccupant ? (0, _inferno.createComponentVNode)(2, _components.Button.Confirm, {
            "color": 'blue',
            "onClick": function () {
              function onClick() {
                act('vr_connect');
                act('tgui:close');
              }

              return onClick;
            }(),
            "icon": 'unlock',
            children: "Connect to VR"
          }) : "You need to be inside the VR sleeper to connect to VR"
        }), !!data.vr_avatar && (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": 'recycle',
          "onClick": function () {
            function onClick() {
              act('delete_avatar');
            }

            return onClick;
          }(),
          children: "Delete VR avatar"
        })]
      })]
    })
  });
};

exports.VrSleeper = VrSleeper;

/***/ }),

/***/ "./packages/tgui/interfaces/Wires.js":
/*!*******************************************!*\
  !*** ./packages/tgui/interfaces/Wires.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Wires = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../components */ "./packages/tgui/components/index.js");

var _layouts = __webpack_require__(/*! ../layouts */ "./packages/tgui/layouts/index.js");

var Wires = function Wires(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var proper_name = data.proper_name;
  var wires = data.wires || [];
  var statuses = data.status || [];
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "width": 350,
    "height": 150 + wires.length * 30 + (!!proper_name && 30),
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      children: [!!proper_name && (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
        "textAlign": "center",
        children: [proper_name, " Wire Configuration"]
      }), (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
          children: wires.map(function (wire) {
            return (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
              "className": "candystripe",
              "label": wire.color,
              "labelColor": wire.color,
              "color": wire.color,
              "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": wire.cut ? 'Mend' : 'Cut',
                "onClick": function () {
                  function onClick() {
                    return act('cut', {
                      wire: wire.color
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": "Pulse",
                "onClick": function () {
                  function onClick() {
                    return act('pulse', {
                      wire: wire.color
                    });
                  }

                  return onClick;
                }()
              }), (0, _inferno.createComponentVNode)(2, _components.Button, {
                "content": wire.attached ? 'Detach' : 'Attach',
                "onClick": function () {
                  function onClick() {
                    return act('attach', {
                      wire: wire.color
                    });
                  }

                  return onClick;
                }()
              })], 4),
              children: !!wire.wire && (0, _inferno.createVNode)(1, "i", null, [(0, _inferno.createTextVNode)("("), wire.wire, (0, _inferno.createTextVNode)(")")], 0)
            }, wire.color);
          })
        })
      }), !!statuses.length && (0, _inferno.createComponentVNode)(2, _components.Section, {
        children: statuses.map(function (status) {
          return (0, _inferno.createComponentVNode)(2, _components.Box, {
            children: status
          }, status);
        })
      })]
    })
  });
};

exports.Wires = Wires;

/***/ }),

/***/ "./packages/tgui/interfaces/common/AccessList.js":
/*!*******************************************************!*\
  !*** ./packages/tgui/interfaces/common/AccessList.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AccessList = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _collections = __webpack_require__(/*! common/collections */ "./packages/common/collections.js");

var _backend = __webpack_require__(/*! ../../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../../components */ "./packages/tgui/components/index.js");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var diffMap = {
  0: {
    icon: 'times-circle',
    color: 'bad'
  },
  1: {
    icon: 'stop-circle',
    color: null
  },
  2: {
    icon: 'check-circle',
    color: 'good'
  }
};

var AccessList = function AccessList(props, context) {
  var _accesses$;

  var _props$accesses = props.accesses,
      accesses = _props$accesses === void 0 ? [] : _props$accesses,
      _props$selectedList = props.selectedList,
      selectedList = _props$selectedList === void 0 ? [] : _props$selectedList,
      accessMod = props.accessMod,
      grantAll = props.grantAll,
      denyAll = props.denyAll,
      grantDep = props.grantDep,
      denyDep = props.denyDep;

  var _useLocalState = (0, _backend.useLocalState)(context, 'accessName', (_accesses$ = accesses[0]) == null ? void 0 : _accesses$.name),
      selectedAccessName = _useLocalState[0],
      setSelectedAccessName = _useLocalState[1];

  var selectedAccess = accesses.find(function (access) {
    return access.name === selectedAccessName;
  });
  var selectedAccessEntries = (0, _collections.sortBy)(function (entry) {
    return entry.desc;
  })((selectedAccess == null ? void 0 : selectedAccess.accesses) || []);

  var checkAccessIcon = function checkAccessIcon(accesses) {
    var oneAccess = false;
    var oneInaccess = false;

    for (var _iterator = _createForOfIteratorHelperLoose(accesses), _step; !(_step = _iterator()).done;) {
      var element = _step.value;

      if (selectedList.includes(element.ref)) {
        oneAccess = true;
      } else {
        oneInaccess = true;
      }
    }

    if (!oneAccess && oneInaccess) {
      return 0;
    } else if (oneAccess && oneInaccess) {
      return 1;
    } else {
      return 2;
    }
  };

  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Access",
    "buttons": (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "check-double",
      "content": "Grant All",
      "color": "good",
      "onClick": function () {
        function onClick() {
          return grantAll();
        }

        return onClick;
      }()
    }), (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "undo",
      "content": "Deny All",
      "color": "bad",
      "onClick": function () {
        function onClick() {
          return denyAll();
        }

        return onClick;
      }()
    })], 4),
    children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
      children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        children: (0, _inferno.createComponentVNode)(2, _components.Tabs, {
          "vertical": true,
          children: accesses.map(function (access) {
            var entries = access.accesses || [];
            var icon = diffMap[checkAccessIcon(entries)].icon;
            var color = diffMap[checkAccessIcon(entries)].color;
            return (0, _inferno.createComponentVNode)(2, _components.Tabs.Tab, {
              "altSelection": true,
              "color": color,
              "icon": icon,
              "selected": access.name === selectedAccessName,
              "onClick": function () {
                function onClick() {
                  return setSelectedAccessName(access.name);
                }

                return onClick;
              }(),
              children: access.name
            }, access.name);
          })
        })
      }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
        "grow": 1,
        children: [(0, _inferno.createComponentVNode)(2, _components.Grid, {
          children: [(0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            "mr": 0,
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "icon": "check",
              "content": "Grant Region",
              "color": "good",
              "onClick": function () {
                function onClick() {
                  return grantDep(selectedAccess.regid);
                }

                return onClick;
              }()
            })
          }), (0, _inferno.createComponentVNode)(2, _components.Grid.Column, {
            "ml": 0,
            children: (0, _inferno.createComponentVNode)(2, _components.Button, {
              "fluid": true,
              "icon": "times",
              "content": "Deny Region",
              "color": "bad",
              "onClick": function () {
                function onClick() {
                  return denyDep(selectedAccess.regid);
                }

                return onClick;
              }()
            })
          })]
        }), selectedAccessEntries.map(function (entry) {
          return (0, _inferno.createComponentVNode)(2, _components.Button.Checkbox, {
            "fluid": true,
            "content": entry.desc,
            "checked": selectedList.includes(entry.ref),
            "onClick": function () {
              function onClick() {
                return accessMod(entry.ref);
              }

              return onClick;
            }()
          }, entry.desc);
        })]
      })]
    })
  });
};

exports.AccessList = AccessList;

/***/ }),

/***/ "./packages/tgui/interfaces/common/AtmosControls.js":
/*!**********************************************************!*\
  !*** ./packages/tgui/interfaces/common/AtmosControls.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Scrubber = exports.Vent = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _string = __webpack_require__(/*! common/string */ "./packages/common/string.js");

var _backend = __webpack_require__(/*! ../../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../../components */ "./packages/tgui/components/index.js");

var _constants = __webpack_require__(/*! ../../constants */ "./packages/tgui/constants.js");

var Vent = function Vent(props, context) {
  var vent = props.vent;

  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act;

  var id_tag = vent.id_tag,
      long_name = vent.long_name,
      power = vent.power,
      checks = vent.checks,
      excheck = vent.excheck,
      incheck = vent.incheck,
      direction = vent.direction,
      external = vent.external,
      internal = vent.internal,
      extdefault = vent.extdefault,
      intdefault = vent.intdefault;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "level": 2,
    "title": (0, _string.decodeHtmlEntities)(long_name),
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": power ? 'power-off' : 'times',
      "selected": power,
      "content": power ? 'On' : 'Off',
      "onClick": function () {
        function onClick() {
          return act('power', {
            id_tag: id_tag,
            val: Number(!power)
          });
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Mode",
        children: (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "sign-in-alt",
          "content": direction ? 'Pressurizing' : 'Scrubbing',
          "color": !direction && 'danger',
          "onClick": function () {
            function onClick() {
              return act('direction', {
                id_tag: id_tag,
                val: Number(!direction)
              });
            }

            return onClick;
          }()
        })
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Pressure Regulator",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "sign-in-alt",
          "content": "Internal",
          "selected": incheck,
          "onClick": function () {
            function onClick() {
              return act('incheck', {
                id_tag: id_tag,
                val: checks
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "sign-out-alt",
          "content": "External",
          "selected": excheck,
          "onClick": function () {
            function onClick() {
              return act('excheck', {
                id_tag: id_tag,
                val: checks
              });
            }

            return onClick;
          }()
        })]
      }), !!incheck && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Internal Target",
        children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": Math.round(internal),
          "unit": "kPa",
          "width": "75px",
          "minValue": 0,
          "step": 10,
          "maxValue": 5066,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_internal_pressure', {
                id_tag: id_tag,
                value: value
              });
            }

            return onChange;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "undo",
          "disabled": intdefault,
          "content": "Reset",
          "onClick": function () {
            function onClick() {
              return act('reset_internal_pressure', {
                id_tag: id_tag
              });
            }

            return onClick;
          }()
        })]
      }), !!excheck && (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "External Target",
        children: [(0, _inferno.createComponentVNode)(2, _components.NumberInput, {
          "value": Math.round(external),
          "unit": "kPa",
          "width": "75px",
          "minValue": 0,
          "step": 10,
          "maxValue": 5066,
          "onChange": function () {
            function onChange(e, value) {
              return act('set_external_pressure', {
                id_tag: id_tag,
                value: value
              });
            }

            return onChange;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": "undo",
          "disabled": extdefault,
          "content": "Reset",
          "onClick": function () {
            function onClick() {
              return act('reset_external_pressure', {
                id_tag: id_tag
              });
            }

            return onClick;
          }()
        })]
      })]
    })
  });
};

exports.Vent = Vent;

var Scrubber = function Scrubber(props, context) {
  var scrubber = props.scrubber;

  var _useBackend2 = (0, _backend.useBackend)(context),
      act = _useBackend2.act;

  var long_name = scrubber.long_name,
      power = scrubber.power,
      scrubbing = scrubber.scrubbing,
      id_tag = scrubber.id_tag,
      widenet = scrubber.widenet,
      filter_types = scrubber.filter_types;
  return (0, _inferno.createComponentVNode)(2, _components.Section, {
    "level": 2,
    "title": (0, _string.decodeHtmlEntities)(long_name),
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": power ? 'power-off' : 'times',
      "content": power ? 'On' : 'Off',
      "selected": power,
      "onClick": function () {
        function onClick() {
          return act('power', {
            id_tag: id_tag,
            val: Number(!power)
          });
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Mode",
        children: [(0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": scrubbing ? 'filter' : 'sign-in-alt',
          "color": scrubbing || 'danger',
          "content": scrubbing ? 'Scrubbing' : 'Siphoning',
          "onClick": function () {
            function onClick() {
              return act('scrubbing', {
                id_tag: id_tag,
                val: Number(!scrubbing)
              });
            }

            return onClick;
          }()
        }), (0, _inferno.createComponentVNode)(2, _components.Button, {
          "icon": widenet ? 'expand' : 'compress',
          "selected": widenet,
          "content": widenet ? 'Expanded range' : 'Normal range',
          "onClick": function () {
            function onClick() {
              return act('widenet', {
                id_tag: id_tag,
                val: Number(!widenet)
              });
            }

            return onClick;
          }()
        })]
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Filters",
        children: scrubbing && filter_types.map(function (filter) {
          return (0, _inferno.createComponentVNode)(2, _components.Button, {
            "icon": filter.enabled ? 'check-square-o' : 'square-o',
            "content": (0, _constants.getGasLabel)(filter.gas_id, filter.gas_name),
            "title": filter.gas_name,
            "selected": filter.enabled,
            "onClick": function () {
              function onClick() {
                return act('toggle_filter', {
                  id_tag: id_tag,
                  val: filter.gas_id
                });
              }

              return onClick;
            }()
          }, filter.gas_id);
        }) || 'N/A'
      })]
    })
  });
};

exports.Scrubber = Scrubber;

/***/ }),

/***/ "./packages/tgui/interfaces/common/BeakerContents.js":
/*!***********************************************************!*\
  !*** ./packages/tgui/interfaces/common/BeakerContents.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BeakerContents = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _components = __webpack_require__(/*! ../../components */ "./packages/tgui/components/index.js");

var BeakerContents = function BeakerContents(props) {
  var beakerLoaded = props.beakerLoaded,
      beakerContents = props.beakerContents;
  return (0, _inferno.createComponentVNode)(2, _components.Box, {
    children: [!beakerLoaded && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      children: "No beaker loaded."
    }) || beakerContents.length === 0 && (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "label",
      children: "Beaker is empty."
    }), beakerContents.map(function (chemical) {
      return (0, _inferno.createComponentVNode)(2, _components.Box, {
        "color": "label",
        children: [chemical.volume, " units of ", chemical.name, " ", chemical.purity < 1 && "(Purity: " + chemical.purity + ")"]
      }, chemical.name);
    })]
  });
};

exports.BeakerContents = BeakerContents;

/***/ }),

/***/ "./packages/tgui/interfaces/common/InterfaceLockNoticeBox.js":
/*!*******************************************************************!*\
  !*** ./packages/tgui/interfaces/common/InterfaceLockNoticeBox.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.InterfaceLockNoticeBox = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../../components */ "./packages/tgui/components/index.js");

/**
 * This component by expects the following fields to be returned
 * from ui_data:
 *
 * - siliconUser: boolean
 * - locked: boolean
 *
 * And expects the following ui_act action to be implemented:
 *
 * - lock - for toggling the lock as a silicon user.
 *
 * All props can be redefined if you want custom behavior, but
 * it's preferred to stick to defaults.
 */
var InterfaceLockNoticeBox = function InterfaceLockNoticeBox(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var _props$siliconUser = props.siliconUser,
      siliconUser = _props$siliconUser === void 0 ? data.siliconUser : _props$siliconUser,
      _props$locked = props.locked,
      locked = _props$locked === void 0 ? data.locked : _props$locked,
      _props$onLockStatusCh = props.onLockStatusChange,
      onLockStatusChange = _props$onLockStatusCh === void 0 ? function () {
    return act('lock');
  } : _props$onLockStatusCh,
      _props$accessText = props.accessText,
      accessText = _props$accessText === void 0 ? 'an ID card' : _props$accessText; // For silicon users

  if (siliconUser) {
    return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
      "color": siliconUser && 'grey',
      children: (0, _inferno.createComponentVNode)(2, _components.Flex, {
        "align": "center",
        children: [(0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: "Interface lock status:"
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          "grow": 1
        }), (0, _inferno.createComponentVNode)(2, _components.Flex.Item, {
          children: (0, _inferno.createComponentVNode)(2, _components.Button, {
            "m": 0,
            "color": locked ? 'red' : 'green',
            "icon": locked ? 'lock' : 'unlock',
            "content": locked ? 'Locked' : 'Unlocked',
            "onClick": function () {
              function onClick() {
                if (onLockStatusChange) {
                  onLockStatusChange(!locked);
                }
              }

              return onClick;
            }()
          })
        })]
      })
    });
  } // For everyone else


  return (0, _inferno.createComponentVNode)(2, _components.NoticeBox, {
    children: ["Swipe ", accessText, ' ', "to ", locked ? 'unlock' : 'lock', " this interface."]
  });
};

exports.InterfaceLockNoticeBox = InterfaceLockNoticeBox;

/***/ }),

/***/ "./packages/tgui/interfaces/common/PortableAtmos.js":
/*!**********************************************************!*\
  !*** ./packages/tgui/interfaces/common/PortableAtmos.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.PortableBasicInfo = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ../../backend */ "./packages/tgui/backend.js");

var _components = __webpack_require__(/*! ../../components */ "./packages/tgui/components/index.js");

var PortableBasicInfo = function PortableBasicInfo(props, context) {
  var _useBackend = (0, _backend.useBackend)(context),
      act = _useBackend.act,
      data = _useBackend.data;

  var connected = data.connected,
      holding = data.holding,
      on = data.on,
      pressure = data.pressure;
  return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Status",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": on ? 'power-off' : 'times',
      "content": on ? 'On' : 'Off',
      "selected": on,
      "onClick": function () {
        function onClick() {
          return act('power');
        }

        return onClick;
      }()
    }),
    children: (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Pressure",
        children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
          "value": pressure
        }), ' kPa']
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Port",
        "color": connected ? 'good' : 'average',
        children: connected ? 'Connected' : 'Not Connected'
      })]
    })
  }), (0, _inferno.createComponentVNode)(2, _components.Section, {
    "title": "Holding Tank",
    "minHeight": "82px",
    "buttons": (0, _inferno.createComponentVNode)(2, _components.Button, {
      "icon": "eject",
      "content": "Eject",
      "disabled": !holding,
      "onClick": function () {
        function onClick() {
          return act('eject');
        }

        return onClick;
      }()
    }),
    children: holding ? (0, _inferno.createComponentVNode)(2, _components.LabeledList, {
      children: [(0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Label",
        children: holding.name
      }), (0, _inferno.createComponentVNode)(2, _components.LabeledList.Item, {
        "label": "Pressure",
        children: [(0, _inferno.createComponentVNode)(2, _components.AnimatedNumber, {
          "value": holding.pressure
        }), ' kPa']
      })]
    }) : (0, _inferno.createComponentVNode)(2, _components.Box, {
      "color": "average",
      children: "No holding tank"
    })
  })], 4);
};

exports.PortableBasicInfo = PortableBasicInfo;

/***/ }),

/***/ "./packages/tgui/routes.js":
/*!*********************************!*\
  !*** ./packages/tgui/routes.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRoutedComponent = void 0;

var _inferno = __webpack_require__(/*! inferno */ "./.yarn/unplugged/inferno-npm-7.4.2-80e5e35292/node_modules/inferno/index.esm.js");

var _backend = __webpack_require__(/*! ./backend */ "./packages/tgui/backend.js");

var _selectors = __webpack_require__(/*! ./debug/selectors */ "./packages/tgui/debug/selectors.js");

var _layouts = __webpack_require__(/*! ./layouts */ "./packages/tgui/layouts/index.js");

/**
 * @file
 * @copyright 2020 Aleksej Komarov
 * @license MIT
 */
var requireInterface = __webpack_require__("./packages/tgui/interfaces sync \\.js$");

var routingError = function routingError(type, name) {
  return function () {
    return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
      "resizable": true,
      children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
        "scrollable": true,
        children: [type === 'notFound' && (0, _inferno.createVNode)(1, "div", null, [(0, _inferno.createTextVNode)("Interface "), (0, _inferno.createVNode)(1, "b", null, name, 0), (0, _inferno.createTextVNode)(" was not found.")], 4), type === 'missingExport' && (0, _inferno.createVNode)(1, "div", null, [(0, _inferno.createTextVNode)("Interface "), (0, _inferno.createVNode)(1, "b", null, name, 0), (0, _inferno.createTextVNode)(" is missing an export.")], 4)]
      })
    });
  };
};

var SuspendedWindow = function SuspendedWindow() {
  return (0, _inferno.createComponentVNode)(2, _layouts.Window, {
    "resizable": true,
    children: (0, _inferno.createComponentVNode)(2, _layouts.Window.Content, {
      "scrollable": true
    })
  });
};

var getRoutedComponent = function getRoutedComponent(store) {
  var state = store.getState();

  var _selectBackend = (0, _backend.selectBackend)(state),
      suspended = _selectBackend.suspended,
      config = _selectBackend.config;

  if (suspended) {
    return SuspendedWindow;
  }

  if (true) {
    var debug = (0, _selectors.selectDebug)(state); // Show a kitchen sink

    if (debug.kitchenSink) {
      return __webpack_require__(/*! ./debug */ "./packages/tgui/debug/index.js").KitchenSink;
    }
  }

  var name = config == null ? void 0 : config["interface"];
  var esModule;

  try {
    esModule = requireInterface("./" + name + ".js");
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      return routingError('notFound', name);
    }

    throw err;
  }

  var Component = esModule[name];

  if (!Component) {
    return routingError('missingExport', name);
  }

  return Component;
};

exports.getRoutedComponent = getRoutedComponent;

/***/ }),

/***/ "./packages/tgui/styles/main.scss":
/*!****************************************!*\
  !*** ./packages/tgui/styles/main.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/abductor.scss":
/*!***************************************************!*\
  !*** ./packages/tgui/styles/themes/abductor.scss ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/cardtable.scss":
/*!****************************************************!*\
  !*** ./packages/tgui/styles/themes/cardtable.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/hackerman.scss":
/*!****************************************************!*\
  !*** ./packages/tgui/styles/themes/hackerman.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/malfunction.scss":
/*!******************************************************!*\
  !*** ./packages/tgui/styles/themes/malfunction.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/neutral.scss":
/*!**************************************************!*\
  !*** ./packages/tgui/styles/themes/neutral.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/ntos.scss":
/*!***********************************************!*\
  !*** ./packages/tgui/styles/themes/ntos.scss ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/paper.scss":
/*!************************************************!*\
  !*** ./packages/tgui/styles/themes/paper.scss ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/retro.scss":
/*!************************************************!*\
  !*** ./packages/tgui/styles/themes/retro.scss ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ "./packages/tgui/styles/themes/syndicate.scss":
/*!****************************************************!*\
  !*** ./packages/tgui/styles/themes/syndicate.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin

/***/ }),

/***/ 0:
/*!******************************************************!*\
  !*** multi ./packages/tgui-polyfill ./packages/tgui ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./packages/tgui-polyfill */"./packages/tgui-polyfill/index.js");
module.exports = __webpack_require__(/*! ./packages/tgui */"./packages/tgui/index.js");


/***/ })

/******/ });
//# sourceMappingURL=tgui.bundle.js.map