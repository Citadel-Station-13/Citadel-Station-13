diff a/code/controllers/subsystem/ticker.dm b/code/controllers/subsystem/ticker.dm	(rejected hunks)
@@ -1,16 +1,20 @@
+#define ROUND_START_MUSIC_LIST "strings/round_start_sounds.txt"
+
 var/round_start_time = 0
 
-var/datum/subsystem/ticker/ticker
+var/datum/controller/subsystem/ticker/ticker
 
-/datum/subsystem/ticker
+/datum/controller/subsystem/ticker
 	name = "Ticker"
-	init_order = 0
+	init_order = 13
 
 	priority = 200
 	flags = SS_FIRE_IN_LOBBY|SS_KEEP_TIMING
 
 	var/current_state = GAME_STATE_STARTUP	//state of current round (used by process()) Use the defines GAME_STATE_* !
 	var/force_ending = 0					//Round was ended by admin intervention
+	// If true, there is no lobby phase, the game starts immediately.
+	var/start_immediately = FALSE
 
 	var/hide_mode = 0
 	var/datum/game_mode/mode = null
@@ -37,7 +41,8 @@ var/datum/subsystem/ticker/ticker
 	var/tipped = 0							//Did we broadcast the tip of the day yet?
 	var/selected_tip						// What will be the tip of the day?
 
-	var/timeLeft = 1200						//pregame timer
+	var/timeLeft						//pregame timer
+	var/start_at
 
 	var/totalPlayers = 0					//used for pregame stats on statpanel
 	var/totalPlayersReady = 0				//used for pregame stats on statpanel
@@ -51,37 +56,46 @@ var/datum/subsystem/ticker/ticker
 
 	var/news_report
 
-/datum/subsystem/ticker/New()
+	var/late_join_disabled
+
+/datum/controller/subsystem/ticker/New()
 	NEW_SS_GLOBAL(ticker)
 
-	login_music = pickweight(list('sound/ambience/title2.ogg' = 15, 'sound/ambience/title1.ogg' =15, 'sound/ambience/title3.ogg' =14, 'sound/ambience/title4.ogg' =14, 'sound/misc/i_did_not_grief_them.ogg' =14, 'sound/ambience/clown.ogg' = 9)) // choose title music!
-	if(SSevent.holidays && SSevent.holidays[APRIL_FOOLS])
-		login_music = 'sound/ambience/clown.ogg'
+/datum/controller/subsystem/ticker/Initialize(timeofday)
+	var/list/music = file2list(ROUND_START_MUSIC_LIST, "\n")
+	login_music = pick(music)
 
-/datum/subsystem/ticker/Initialize(timeofday)
 	if(!syndicate_code_phrase)
 		syndicate_code_phrase	= generate_code_phrase()
 	if(!syndicate_code_response)
 		syndicate_code_response	= generate_code_phrase()
 	..()
+	start_at = world.time + (config.lobby_countdown * 10)
 
-/datum/subsystem/ticker/fire()
+/datum/controller/subsystem/ticker/fire()
 	switch(current_state)
 		if(GAME_STATE_STARTUP)
-			timeLeft = config.lobby_countdown * 10
-			world << "<span class='boldnotice'>Welcome to [station_name()]!</span>"
-			world << "Please set up your character and select \"Ready\". The game will start in [config.lobby_countdown] seconds."
+			if(Master.initializations_finished_with_no_players_logged_in)
+				start_at = world.time + (config.lobby_countdown * 10)
+			for(var/client/C in clients)
+				window_flash(C, ignorepref = TRUE) //let them know lobby has opened up.
+			to_chat(world, "<span class='boldnotice'>Welcome to [station_name()]!</span>")
 			current_state = GAME_STATE_PREGAME
-
+			fire()
 		if(GAME_STATE_PREGAME)
 				//lobby stats for statpanels
+			if(isnull(timeLeft))
+				timeLeft = max(0,start_at - world.time)
 			totalPlayers = 0
 			totalPlayersReady = 0
-			for(var/mob/new_player/player in player_list)
+			for(var/mob/dead/new_player/player in player_list)
 				++totalPlayers
 				if(player.ready)
 					++totalPlayersReady
 
+			if(start_immediately)
+				timeLeft = 0
+
 			//countdown
 			if(timeLeft < 0)
 				return
@@ -93,6 +107,8 @@ var/datum/subsystem/ticker/ticker
 
 			if(timeLeft <= 0)
 				current_state = GAME_STATE_SETTING_UP
+				if(start_immediately)
+					fire()
 
 		if(GAME_STATE_SETTING_UP)
 			if(!setup())
@@ -109,13 +125,10 @@ var/datum/subsystem/ticker/ticker
 				current_state = GAME_STATE_FINISHED
 				toggle_ooc(1) // Turn it on
 				declare_completion(force_ending)
-				spawn(50)
-					if(mode.station_was_nuked)
-						world.Reboot("Station destroyed by Nuclear Device.", "end_proper", "nuke")
-					else
-						world.Reboot("Round ended.", "end_proper", "proper completion")
 
-/datum/subsystem/ticker/proc/setup()
+/datum/controller/subsystem/ticker/proc/setup()
+	to_chat(world, "<span class='boldannounce'>Starting game...</span>")
+	var/init_start = world.timeofday
 		//Create and announce mode
 	var/list/datum/game_mode/runnable_modes
 	if(master_mode == "random" || master_mode == "secret")
@@ -132,107 +145,125 @@ var/datum/subsystem/ticker/ticker
 
 		if(!mode)
 			if(!runnable_modes.len)
-				world << "<B>Unable to choose playable game mode.</B> Reverting to pre-game lobby."
+				to_chat(world, "<B>Unable to choose playable game mode.</B> Reverting to pre-game lobby.")
 				return 0
 			mode = pickweight(runnable_modes)
 
 	else
 		mode = config.pick_mode(master_mode)
 		if(!mode.can_start())
-			world << "<B>Unable to start [mode.name].</B> Not enough players, [mode.required_players] players and [mode.required_enemies] eligible antagonists needed. Reverting to pre-game lobby."
+			to_chat(world, "<B>Unable to start [mode.name].</B> Not enough players, [mode.required_players] players and [mode.required_enemies] eligible antagonists needed. Reverting to pre-game lobby.")
 			qdel(mode)
 			mode = null
 			SSjob.ResetOccupations()
 			return 0
 
+	CHECK_TICK
 	//Configure mode and assign player to special mode stuff
 	var/can_continue = 0
 	can_continue = src.mode.pre_setup()		//Choose antagonists
+	CHECK_TICK
 	SSjob.DivideOccupations() 				//Distribute jobs
+	CHECK_TICK
 
 	if(!Debug2)
 		if(!can_continue)
 			qdel(mode)
 			mode = null
-			world << "<B>Error setting up [master_mode].</B> Reverting to pre-game lobby."
+			to_chat(world, "<B>Error setting up [master_mode].</B> Reverting to pre-game lobby.")
 			SSjob.ResetOccupations()
 			return 0
 	else
 		message_admins("<span class='notice'>DEBUG: Bypassing prestart checks...</span>")
 
+	CHECK_TICK
 	if(hide_mode)
 		var/list/modes = new
 		for (var/datum/game_mode/M in runnable_modes)
 			modes += M.name
 		modes = sortList(modes)
-		world << "<b>The gamemode is: secret!\n\
-		Possibilities:</B> [english_list(modes)]"
+		to_chat(world, "<b>The gamemode is: secret!\nPossibilities:</B> [english_list(modes)]")
 	else
 		mode.announce()
 
-	current_state = GAME_STATE_PLAYING
 	if(!config.ooc_during_round)
 		toggle_ooc(0) // Turn it off
-	round_start_time = world.time
 
+	CHECK_TICK
 	start_landmarks_list = shuffle(start_landmarks_list) //Shuffle the order of spawn points so they dont always predictably spawn bottom-up and right-to-left
-	create_characters() //Create player characters and transfer them
+	create_characters() //Create player characters
 	collect_minds()
 	equip_characters()
+
+	SSoverlays.Flush()	//Flush the majority of the shit
+
 	data_core.manifest()
 
-	Master.RoundStart()
+	transfer_characters()	//transfer keys to the new mobs
+
+	Master.RoundStart()	//let the party begin...
 
-	world << "<FONT color='blue'><B>Welcome to [station_name()], enjoy your stay!</B></FONT>"
+	log_world("Game start took [(world.timeofday - init_start)/10]s")
+	round_start_time = world.time
+
+	to_chat(world, "<FONT color='blue'><B>Welcome to [station_name()], enjoy your stay!</B></FONT>")
 	world << sound('sound/AI/welcome.ogg')
 
+	current_state = GAME_STATE_PLAYING
+
 	if(SSevent.holidays)
-		world << "<font color='blue'>and...</font>"
+		to_chat(world, "<font color='blue'>and...</font>")
 		for(var/holidayname in SSevent.holidays)
 			var/datum/holiday/holiday = SSevent.holidays[holidayname]
-			world << "<h4>[holiday.greet()]</h4>"
-
-
-	spawn(0)//Forking here so we dont have to wait for this to finish
-		mode.post_setup()
-		//Cleanup some stuff
-		for(var/obj/effect/landmark/start/S in landmarks_list)
-			//Deleting Startpoints but we need the ai point to AI-ize people later
-			if(S.name != "AI")
-				qdel(S)
+			to_chat(world, "<h4>[holiday.greet()]</h4>")
 
-		var/list/adm = get_admin_counts()
-		if(!adm["present"])
-			send2irc("Server", "Round just started with no active admins online!")
+	PostSetup()
 
 	return 1
 
+/datum/controller/subsystem/ticker/proc/PostSetup()
+	set waitfor = 0
+	mode.post_setup()
+	//Cleanup some stuff
+	for(var/obj/effect/landmark/start/S in landmarks_list)
+		//Deleting Startpoints but we need the ai point to AI-ize people later
+		if(S.name != "AI")
+			qdel(S)
+
+	var/list/adm = get_admin_counts()
+	var/list/allmins = adm["present"]
+	send2irc("Server", "Round of [hide_mode ? "secret":"[mode.name]"] has started[allmins.len ? ".":" with no active admins online!"]")
+
+/datum/controller/subsystem/ticker/proc/station_explosion_detonation(atom/bomb)
+	if(bomb)	//BOOM
+		var/turf/epi = bomb.loc
+		qdel(bomb)
+		if(epi)
+			explosion(epi, 0, 256, 512, 0, TRUE, TRUE, 0, TRUE)
+
 //Plus it provides an easy way to make cinematics for other events. Just use this as a template
-/datum/subsystem/ticker/proc/station_explosion_cinematic(station_missed=0, override = null)
+/datum/controller/subsystem/ticker/proc/station_explosion_cinematic(station_missed=0, override = null, atom/bomb = null)
 	if( cinematic )
 		return	//already a cinematic in progress!
 
 	for (var/datum/html_interface/hi in html_interfaces)
 		hi.closeAll()
+	SStgui.close_all_uis()
+
+	//Turn off the shuttles, there's no escape now
+	if(!station_missed && bomb)
+		SSshuttle.registerHostileEnvironment(src)
+		SSshuttle.lockdown = TRUE
+
 	//initialise our cinematic screen object
 	cinematic = new /obj/screen{icon='icons/effects/station_explosion.dmi';icon_state="station_intact";layer=21;mouse_opacity=0;screen_loc="1,0";}(src)
 
-	if(station_missed)
-		for(var/mob/M in mob_list)
-			M.notransform = TRUE //stop everything moving
-			if(M.client)
-				M.client.screen += cinematic	//show every client the cinematic
-	else	//nuke kills everyone on z-level 1 to prevent "hurr-durr I survived"
-		for(var/mob/M in mob_list)
-			if(M.client)
-				M.client.screen += cinematic
-			if(M.stat != DEAD)
-				var/turf/T = get_turf(M)
-				if(T && T.z==1)
-					M.death(0) //no mercy
-				else
-					M.notransform=TRUE //no moving for you
+	for(var/mob/M in mob_list)
+		M.notransform = TRUE //stop everything moving
+		if(M.client)
+			M.client.screen += cinematic	//show every client the cinematic
 
+	var/actually_blew_up = TRUE
 	//Now animate the cinematic
 	switch(station_missed)
 		if(NUKE_NEAR_MISS)	//nuke was nearby but (mostly) missed
@@ -243,27 +274,32 @@ var/datum/subsystem/ticker/ticker
 					flick("intro_nuke",cinematic)
 					sleep(35)
 					world << sound('sound/effects/explosionfar.ogg')
+					station_explosion_detonation(bomb)
 					flick("station_intact_fade_red",cinematic)
 					cinematic.icon_state = "summary_nukefail"
 				if("gang war") //Gang Domination (just show the override screen)
 					cinematic.icon_state = "intro_malf_still"
 					flick("intro_malf",cinematic)
+					actually_blew_up = FALSE
 					sleep(70)
 				if("fake") //The round isn't over, we're just freaking people out for fun
 					flick("intro_nuke",cinematic)
 					sleep(35)
 					world << sound('sound/items/bikehorn.ogg')
 					flick("summary_selfdes",cinematic)
+					actually_blew_up = FALSE
 				else
 					flick("intro_nuke",cinematic)
 					sleep(35)
 					world << sound('sound/effects/explosionfar.ogg')
-					//flick("end",cinematic)
+					station_explosion_detonation(bomb)
 
 
 		if(NUKE_MISS_STATION || NUKE_SYNDICATE_BASE)	//nuke was nowhere nearby	//TODO: a really distant explosion animation
 			sleep(50)
 			world << sound('sound/effects/explosionfar.ogg')
+			station_explosion_detonation(bomb)
+			actually_blew_up = station_missed == NUKE_SYNDICATE_BASE	//don't kill everyone on station if it detonated off station
 		else	//station was destroyed
 			if( mode && !override )
 				override = mode.name
@@ -273,89 +309,121 @@ var/datum/subsystem/ticker/ticker
 					sleep(35)
 					flick("station_explode_fade_red",cinematic)
 					world << sound('sound/effects/explosionfar.ogg')
+					station_explosion_detonation(bomb)
 					cinematic.icon_state = "summary_nukewin"
 				if("AI malfunction") //Malf (screen,explosion,summary)
 					flick("intro_malf",cinematic)
 					sleep(76)
 					flick("station_explode_fade_red",cinematic)
 					world << sound('sound/effects/explosionfar.ogg')
+					station_explosion_detonation(bomb)	//TODO: If we ever decide to actually detonate the vault bomb
 					cinematic.icon_state = "summary_malf"
 				if("blob") //Station nuked (nuke,explosion,summary)
 					flick("intro_nuke",cinematic)
 					sleep(35)
 					flick("station_explode_fade_red",cinematic)
 					world << sound('sound/effects/explosionfar.ogg')
+					station_explosion_detonation(bomb)	//TODO: no idea what this case could be
 					cinematic.icon_state = "summary_selfdes"
 				if("no_core") //Nuke failed to detonate as it had no core
 					flick("intro_nuke",cinematic)
 					sleep(35)
 					flick("station_intact",cinematic)
 					world << sound('sound/ambience/signal.ogg')
-					sleep(100)
-					if(cinematic)
-						qdel(cinematic)
-						cinematic = null
-					for(var/mob/M in mob_list)
-						M.notransform = FALSE
+					addtimer(CALLBACK(src, .proc/finish_cinematic, null, FALSE), 100)
 					return	//Faster exit, since nothing happened
 				else //Station nuked (nuke,explosion,summary)
 					flick("intro_nuke",cinematic)
 					sleep(35)
 					flick("station_explode_fade_red", cinematic)
 					world << sound('sound/effects/explosionfar.ogg')
+					station_explosion_detonation(bomb)
 					cinematic.icon_state = "summary_selfdes"
 	//If its actually the end of the round, wait for it to end.
 	//Otherwise if its a verb it will continue on afterwards.
-	spawn(300)
-		if(cinematic)
-			qdel(cinematic)		//end the cinematic
-		for(var/mob/M in mob_list)
-			M.notransform = FALSE //gratz you survived
-	return
-
-
 
-/datum/subsystem/ticker/proc/create_characters()
-	for(var/mob/new_player/player in player_list)
+	var/bombloc = null
+	if(actually_blew_up)
+		if(bomb && bomb.loc)
+			bombloc = bomb.z
+		else if(!station_missed)
+			bombloc = ZLEVEL_STATION
+
+		if(mode)
+			mode.explosion_in_progress = 0
+			to_chat(world, "<B>The station was destoyed by the nuclear blast!</B>")
+			mode.station_was_nuked = (station_missed<2)	//station_missed==1 is a draw. the station becomes irradiated and needs to be evacuated.
+
+	addtimer(CALLBACK(src, .proc/finish_cinematic, bombloc, actually_blew_up), 300)
+
+/datum/controller/subsystem/ticker/proc/finish_cinematic(killz, actually_blew_up)
+	if(cinematic)
+		qdel(cinematic)		//end the cinematic
+		cinematic = null
+	for(var/mob/M in mob_list)
+		M.notransform = FALSE
+		if(actually_blew_up && !isnull(killz) && M.stat != DEAD && M.z == killz)
+			M.gib()
+
+/datum/controller/subsystem/ticker/proc/create_characters()
+	for(var/mob/dead/new_player/player in player_list)
 		if(player.ready && player.mind)
 			joined_player_list += player.ckey
-			if(player.mind.assigned_role=="AI")
-				player.close_spawn_windows()
-				player.AIize()
-			else
-				player.create_character()
-				qdel(player)
+			player.create_character(FALSE)
 		else
 			player.new_player_panel()
+		CHECK_TICK
 
-
-/datum/subsystem/ticker/proc/collect_minds()
-	for(var/mob/living/player in player_list)
-		if(player.mind)
-			ticker.minds += player.mind
+/datum/controller/subsystem/ticker/proc/collect_minds()
+	for(var/mob/dead/new_player/P in player_list)
+		if(P.new_character && P.new_character.mind)
+			ticker.minds += P.new_character.mind
+		CHECK_TICK
 
 
-/datum/subsystem/ticker/proc/equip_characters()
+/datum/controller/subsystem/ticker/proc/equip_characters()
 	var/captainless=1
-	for(var/mob/living/carbon/human/player in player_list)
-		if(player && player.mind && player.mind.assigned_role)
+	for(var/mob/dead/new_player/N in player_list)
+		var/mob/living/carbon/human/player = N.new_character
+		if(istype(player) && player.mind && player.mind.assigned_role)
 			if(player.mind.assigned_role == "Captain")
 				captainless=0
 			if(player.mind.assigned_role != player.mind.special_role)
-				SSjob.EquipRank(player, player.mind.assigned_role, 0)
+				SSjob.EquipRank(N, player.mind.assigned_role, 0)
+		CHECK_TICK
 	if(captainless)
-		for(var/mob/M in player_list)
-			if(!isnewplayer(M))
-				M << "Captainship not forced on anyone."
-
-
-
-/datum/subsystem/ticker/proc/declare_completion()
+		for(var/mob/dead/new_player/N in player_list)
+			if(N.new_character)
+				to_chat(N, "Captainship not forced on anyone.")
+			CHECK_TICK
+
+/datum/controller/subsystem/ticker/proc/transfer_characters()
+	var/list/livings = list()
+	for(var/mob/dead/new_player/player in player_list)
+		var/mob/living = player.transfer_character()
+		if(living)
+			qdel(player)
+			living.notransform = TRUE
+			if(living.client)
+				var/obj/screen/splash/S = new(living.client, TRUE)
+				S.Fade(TRUE)
+			livings += living
+	if(livings.len)
+		addtimer(CALLBACK(src, .proc/release_characters, livings), 30, TIMER_CLIENT_TIME)
+
+/datum/controller/subsystem/ticker/proc/release_characters(list/livings)
+	for(var/I in livings)
+		var/mob/living/L = I
+		L.notransform = FALSE
+
+/datum/controller/subsystem/ticker/proc/declare_completion()
+	set waitfor = FALSE
 	var/station_evacuated = EMERGENCY_ESCAPED_OR_ENDGAMED
 	var/num_survivors = 0
 	var/num_escapees = 0
+	var/num_shuttle_escapees = 0
 
-	world << "<BR><BR><BR><FONT size=3><B>The round has ended.</B></FONT>"
+	to_chat(world, "<BR><BR><BR><FONT size=3><B>The round has ended.</B></FONT>")
 
 	//Player status report
 	for(var/mob/Player in mob_list)
@@ -363,72 +431,94 @@ var/datum/subsystem/ticker/ticker
 			if(Player.stat != DEAD && !isbrain(Player))
 				num_survivors++
 				if(station_evacuated) //If the shuttle has already left the station
+					var/area/shuttle_area
+					if(SSshuttle && SSshuttle.emergency)
+						shuttle_area = SSshuttle.emergency.areaInstance
 					if(!Player.onCentcom() && !Player.onSyndieBase())
-						Player << "<font color='blue'><b>You managed to survive, but were marooned on [station_name()]...</b></FONT>"
+						to_chat(Player, "<font color='blue'><b>You managed to survive, but were marooned on [station_name()]...</b></FONT>")
 					else
 						num_escapees++
-						Player << "<font color='green'><b>You managed to survive the events on [station_name()] as [Player.real_name].</b></FONT>"
+						to_chat(Player, "<font color='green'><b>You managed to survive the events on [station_name()] as [Player.real_name].</b></FONT>")
+						if(get_area(Player) == shuttle_area)
+							num_shuttle_escapees++
 				else
-					Player << "<font color='green'><b>You managed to survive the events on [station_name()] as [Player.real_name].</b></FONT>"
+					to_chat(Player, "<font color='green'><b>You managed to survive the events on [station_name()] as [Player.real_name].</b></FONT>")
 			else
-				Player << "<font color='red'><b>You did not survive the events on [station_name()]...</b></FONT>"
+				to_chat(Player, "<font color='red'><b>You did not survive the events on [station_name()]...</b></FONT>")
+
+		CHECK_TICK
 
 	//Round statistics report
 	var/datum/station_state/end_state = new /datum/station_state()
 	end_state.count()
-	var/station_integrity = min(round( 100 * start_state.score(end_state), 0.1), 100)
+	var/station_integrity = min(PERCENT(start_state.score(end_state)), 100)
 
-	world << "<BR>[TAB]Shift Duration: <B>[round(world.time / 36000)]:[add_zero("[world.time / 600 % 60]", 2)]:[world.time / 100 % 6][world.time / 100 % 10]</B>"
-	world << "<BR>[TAB]Station Integrity: <B>[mode.station_was_nuked ? "<font color='red'>Destroyed</font>" : "[station_integrity]%"]</B>"
+	to_chat(world, "<BR>[TAB]Shift Duration: <B>[round(world.time / 36000)]:[add_zero("[world.time / 600 % 60]", 2)]:[world.time / 100 % 6][world.time / 100 % 10]</B>")
+	to_chat(world, "<BR>[TAB]Station Integrity: <B>[mode.station_was_nuked ? "<font color='red'>Destroyed</font>" : "[station_integrity]%"]</B>")
 	if(mode.station_was_nuked)
 		ticker.news_report = STATION_DESTROYED_NUKE
+	var/total_players = joined_player_list.len
 	if(joined_player_list.len)
-		world << "<BR>[TAB]Total Population: <B>[joined_player_list.len]</B>"
+		to_chat(world, "<BR>[TAB]Total Population: <B>[total_players]</B>")
 		if(station_evacuated)
-			world << "<BR>[TAB]Evacuation Rate: <B>[num_escapees] ([round((num_escapees/joined_player_list.len)*100, 0.1)]%)</B>"
+			to_chat(world, "<BR>[TAB]Evacuation Rate: <B>[num_escapees] ([PERCENT(num_escapees/total_players)]%)</B>")
+			to_chat(world, "<BR>[TAB](on emergency shuttle): <B>[num_shuttle_escapees] ([PERCENT(num_shuttle_escapees/total_players)]%)</B>")
 			news_report = STATION_EVACUATED
 			if(SSshuttle.emergency.is_hijacked())
 				news_report = SHUTTLE_HIJACK
-		world << "<BR>[TAB]Survival Rate: <B>[num_survivors] ([round((num_survivors/joined_player_list.len)*100, 0.1)]%)</B>"
-	world << "<BR>"
+		to_chat(world, "<BR>[TAB]Survival Rate: <B>[num_survivors] ([PERCENT(num_survivors/total_players)]%)</B>")
+	to_chat(world, "<BR>")
+
+	CHECK_TICK
 
 	//Silicon laws report
 	for (var/mob/living/silicon/ai/aiPlayer in mob_list)
 		if (aiPlayer.stat != 2 && aiPlayer.mind)
-			world << "<b>[aiPlayer.name] (Played by: [aiPlayer.mind.key])'s laws at the end of the round were:</b>"
+			to_chat(world, "<b>[aiPlayer.name] (Played by: [aiPlayer.mind.key])'s laws at the end of the round were:</b>")
 			aiPlayer.show_laws(1)
 		else if (aiPlayer.mind) //if the dead ai has a mind, use its key instead
-			world << "<b>[aiPlayer.name] (Played by: [aiPlayer.mind.key])'s laws when it was deactivated were:</b>"
+			to_chat(world, "<b>[aiPlayer.name] (Played by: [aiPlayer.mind.key])'s laws when it was deactivated were:</b>")
 			aiPlayer.show_laws(1)
 
-		world << "<b>Total law changes: [aiPlayer.law_change_counter]</b>"
+		to_chat(world, "<b>Total law changes: [aiPlayer.law_change_counter]</b>")
 
 		if (aiPlayer.connected_robots.len)
 			var/robolist = "<b>[aiPlayer.real_name]'s minions were:</b> "
 			for(var/mob/living/silicon/robot/robo in aiPlayer.connected_robots)
 				if(robo.mind)
 					robolist += "[robo.name][robo.stat?" (Deactivated) (Played by: [robo.mind.key]), ":" (Played by: [robo.mind.key]), "]"
-			world << "[robolist]"
+			to_chat(world, "[robolist]")
+
+	CHECK_TICK
+
 	for (var/mob/living/silicon/robot/robo in mob_list)
 		if (!robo.connected_ai && robo.mind)
 			if (robo.stat != 2)
-				world << "<b>[robo.name] (Played by: [robo.mind.key]) survived as an AI-less borg! Its laws were:</b>"
+				to_chat(world, "<b>[robo.name] (Played by: [robo.mind.key]) survived as an AI-less borg! Its laws were:</b>")
 			else
-				world << "<b>[robo.name] (Played by: [robo.mind.key]) was unable to survive the rigors of being a cyborg without an AI. Its laws were:</b>"
+				to_chat(world, "<b>[robo.name] (Played by: [robo.mind.key]) was unable to survive the rigors of being a cyborg without an AI. Its laws were:</b>")
 
 			if(robo) //How the hell do we lose robo between here and the world messages directly above this?
 				robo.laws.show_laws(world)
 
+	CHECK_TICK
+
 	mode.declare_completion()//To declare normal completion.
 
-	if(cross_allowed)
-		send_news_report()
+	CHECK_TICK
 
 	//calls auto_declare_completion_* for all modes
 	for(var/handler in typesof(/datum/game_mode/proc))
 		if (findtext("[handler]","auto_declare_completion_"))
 			call(mode, handler)(force_ending)
 
+	CHECK_TICK
+
+	if(config.cross_allowed)
+		send_news_report()
+
+	CHECK_TICK
+
 	//Print a list of antagonists to the server log
 	var/list/total_antagonists = list()
 	//Look into all mobs in world, dead or alive
@@ -441,11 +531,15 @@ var/datum/subsystem/ticker/ticker
 				total_antagonists.Add(temprole) //If the role doesnt exist in the list, create it and add the mob
 				total_antagonists[temprole] += ": [Mind.name]([Mind.key])"
 
+	CHECK_TICK
+
 	//Now print them all into the log!
 	log_game("Antagonists at round end were...")
 	for(var/i in total_antagonists)
 		log_game("[i]s[total_antagonists[i]].")
 
+	CHECK_TICK
+
 	//Borers
 	var/borerwin = FALSE
 	if(borers.len)
@@ -459,7 +553,7 @@ var/datum/subsystem/ticker/ticker
 				else
 					borertext += "failed"
 				borertext += ")"
-		world << borertext
+		to_chat(world, borertext)
 
 		var/total_borers = 0
 		for(var/mob/living/simple_animal/borer/B in borers)
@@ -474,29 +568,45 @@ var/datum/subsystem/ticker/ticker
 					total_borer_hosts++
 			if(total_borer_hosts_needed <= total_borer_hosts)
 				borerwin = TRUE
-			world << "<b>There were [total_borers] borers alive at round end!</b>"
-			world << "<b>A total of [total_borer_hosts] borers with hosts escaped on the shuttle alive. The borers needed [total_borer_hosts_needed] hosts to escape.</b>"
+			to_chat(world, "<b>There were [total_borers] borers alive at round end!</b>")
+			to_chat(world, "<b>A total of [total_borer_hosts] borers with hosts escaped on the shuttle alive. The borers needed [total_borer_hosts_needed] hosts to escape.</b>")
 			if(borerwin)
-				world << "<b><font color='green'>The borers were successful!</font></b>"
+				to_chat(world, "<b><font color='green'>The borers were successful!</font></b>")
 			else
-				world << "<b><font color='red'>The borers have failed!</font></b>"
-	return TRUE
+				to_chat(world, "<b><font color='red'>The borers have failed!</font></b>")
+
+	CHECK_TICK
 
 	mode.declare_station_goal_completion()
 
+	CHECK_TICK
+
 	//Adds the del() log to world.log in a format condensable by the runtime condenser found in tools
-	if(SSgarbage.didntgc.len)
+	if(SSgarbage.didntgc.len || SSgarbage.sleptDestroy.len)
 		var/dellog = ""
 		for(var/path in SSgarbage.didntgc)
 			dellog += "Path : [path] \n"
 			dellog += "Failures : [SSgarbage.didntgc[path]] \n"
-		world.log << dellog
+			if(path in SSgarbage.sleptDestroy)
+				dellog += "Sleeps : [SSgarbage.sleptDestroy[path]] \n"
+				SSgarbage.sleptDestroy -= path
+		for(var/path in SSgarbage.sleptDestroy)
+			dellog += "Path : [path] \n"
+			dellog += "Sleeps : [SSgarbage.sleptDestroy[path]] \n"
+		log_world(dellog)
+
+	CHECK_TICK
 
 	//Collects persistence features
 	SSpersistence.CollectData()
-	return 1
 
-/datum/subsystem/ticker/proc/send_tip_of_the_round()
+	sleep(50)
+	if(mode.station_was_nuked)
+		world.Reboot("Station destroyed by Nuclear Device.", "end_proper", "nuke")
+	else
+		world.Reboot("Round ended.", "end_proper", "proper completion")
+
+/datum/controller/subsystem/ticker/proc/send_tip_of_the_round()
 	var/m
 	if(selected_tip)
 		m = selected_tip
@@ -509,35 +619,34 @@ var/datum/subsystem/ticker/ticker
 			m = pick(memetips)
 
 	if(m)
-		world << "<font color='purple'><b>Tip of the round: \
-			</b>[html_encode(m)]</font>"
+		to_chat(world, "<font color='purple'><b>Tip of the round: </b>[html_encode(m)]</font>")
 
-/datum/subsystem/ticker/proc/check_queue()
+/datum/controller/subsystem/ticker/proc/check_queue()
 	if(!queued_players.len || !config.hard_popcap)
 		return
 
 	queue_delay++
-	var/mob/new_player/next_in_line = queued_players[1]
+	var/mob/dead/new_player/next_in_line = queued_players[1]
 
 	switch(queue_delay)
 		if(5) //every 5 ticks check if there is a slot available
 			if(living_player_count() < config.hard_popcap)
 				if(next_in_line && next_in_line.client)
-					next_in_line << "<span class='userdanger'>A slot has opened! You have approximately 20 seconds to join. <a href='?src=\ref[next_in_line];late_join=override'>\>\>Join Game\<\<</a></span>"
+					to_chat(next_in_line, "<span class='userdanger'>A slot has opened! You have approximately 20 seconds to join. <a href='?src=\ref[next_in_line];late_join=override'>\>\>Join Game\<\<</a></span>")
 					next_in_line << sound('sound/misc/notice1.ogg')
 					next_in_line.LateChoices()
 					return
 				queued_players -= next_in_line //Client disconnected, remove he
 			queue_delay = 0 //No vacancy: restart timer
 		if(25 to INFINITY)  //No response from the next in line when a vacancy exists, remove he
-			next_in_line << "<span class='danger'>No response recieved. You have been removed from the line.</span>"
+			to_chat(next_in_line, "<span class='danger'>No response recieved. You have been removed from the line.</span>")
 			queued_players -= next_in_line
 			queue_delay = 0
 
-/datum/subsystem/ticker/proc/check_maprotate()
-	if (!config.maprotation || !SERVERTOOLS)
+/datum/controller/subsystem/ticker/proc/check_maprotate()
+	if (!config.maprotation)
 		return
-	if (SSshuttle.emergency.mode != SHUTTLE_ESCAPE || SSshuttle.canRecall())
+	if (SSshuttle.emergency && SSshuttle.emergency.mode != SHUTTLE_ESCAPE || SSshuttle.canRecall())
 		return
 	if (maprotatechecked)
 		return
@@ -547,8 +656,7 @@ var/datum/subsystem/ticker/ticker
 	//map rotate chance defaults to 75% of the length of the round (in minutes)
 	if (!prob((world.time/600)*config.maprotatechancedelta))
 		return
-	spawn(0) //compiling a map can lock up the mc for 30 to 60 seconds if we don't spawn
-		maprotate()
+	INVOKE_ASYNC(SSmapping, /datum/controller/subsystem/mapping/.proc/maprotate)
 
 
 /world/proc/has_round_started()
@@ -556,7 +664,7 @@ var/datum/subsystem/ticker/ticker
 		return TRUE
 	return FALSE
 
-/datum/subsystem/ticker/Recover()
+/datum/controller/subsystem/ticker/Recover()
 	current_state = ticker.current_state
 	force_ending = ticker.force_ending
 	hide_mode = ticker.hide_mode
@@ -590,7 +698,7 @@ var/datum/subsystem/ticker/ticker
 	maprotatechecked = ticker.maprotatechecked
 
 
-/datum/subsystem/ticker/proc/send_news_report()
+/datum/controller/subsystem/ticker/proc/send_news_report()
 	var/news_message
 	var/news_source = "Nanotrasen News Network"
 	switch(news_report)
@@ -617,19 +725,19 @@ var/datum/subsystem/ticker/ticker
 		if(CULT_SUMMON)
 			news_message = "Company officials would like to clarify that [station_name()] was scheduled to be decommissioned following meteor damage earlier this year. Earlier reports of an unknowable eldritch horror were made in error."
 		if(NUKE_MISS)
-			news_message = "The Syndicate have bungled a terrorist attack [station_name()], detonating a nuclear weapon in empty space near by."
+			news_message = "The Syndicate have bungled a terrorist attack [station_name()], detonating a nuclear weapon in empty space nearby."
 		if(OPERATIVES_KILLED)
 			news_message = "Repairs to [station_name()] are underway after an elite Syndicate death squad was wiped out by the crew."
 		if(OPERATIVE_SKIRMISH)
 			news_message = "A skirmish between security forces and Syndicate agents aboard [station_name()] ended with both sides bloodied but intact."
 		if(REVS_WIN)
-			news_message = "Company officials have reassured investors that despite a union led revolt aboard [station_name()] that there will be no wage increases for workers."
+			news_message = "Company officials have reassured investors that despite a union led revolt aboard [station_name()] there will be no wage increases for workers."
 		if(REVS_LOSE)
 			news_message = "[station_name()] quickly put down a misguided attempt at mutiny. Remember, unionizing is illegal!"
 		if(WIZARD_KILLED)
-			news_message = "Tensions have flared with the Wizard's Federation following the death of one of their members aboard [station_name()]."
+			news_message = "Tensions have flared with the Space Wizard Federation following the death of one of their members aboard [station_name()]."
 		if(STATION_NUKED)
-			news_message = "[station_name()] activated its self destruct device for unknown reasons. Attempts to clone the Captain so he can be arrested and executed are under way."
+			news_message = "[station_name()] activated its self destruct device for unknown reasons. Attempts to clone the Captain so he can be arrested and executed are underway."
 		if(CLOCK_SUMMON)
 			news_message = "The garbled messages about hailing a mouse and strange energy readings from [station_name()] have been discovered to be an ill-advised, if thorough, prank by a clown."
 		if(CLOCK_SILICONS)
@@ -641,3 +749,14 @@ var/datum/subsystem/ticker/ticker
 
 	if(news_message)
 		send2otherserver(news_source, news_message,"News_Report")
+
+/datum/controller/subsystem/ticker/proc/GetTimeLeft()
+	if(isnull(ticker.timeLeft))
+		return max(0, start_at - world.time)
+	return timeLeft
+
+/datum/controller/subsystem/ticker/proc/SetTimeLeft(newtime)
+	if(newtime >= 0 && isnull(timeLeft))	//remember, negative means delayed
+		start_at = world.time + newtime
+	else
+		timeLeft = newtime
