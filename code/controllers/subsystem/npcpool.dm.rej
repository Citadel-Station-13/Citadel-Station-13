diff a/code/controllers/subsystem/npcpool.dm b/code/controllers/subsystem/npcpool.dm	(rejected hunks)
@@ -1,39 +1,36 @@
 var/datum/controller/subsystem/npcpool/SSnpc
 
+#define PROCESSING_NPCS 0
+#define PROCESSING_DELEGATES 1
+#define PROCESSING_ASSISTANTS 2
+
 /datum/controller/subsystem/npcpool
 	name = "NPC Pool"
-	init_order = 17
-	flags = SS_POST_FIRE_TIMING|SS_NO_INIT|SS_NO_TICK_CHECK
-	priority = 25
+	flags = SS_POST_FIRE_TIMING|SS_NO_INIT|SS_BACKGROUND
+	priority = 20
 
 	var/list/canBeUsed = list()
-	var/list/canBeUsed_non = list()
 	var/list/needsDelegate = list()
 	var/list/needsAssistant = list()
-	var/list/needsHelp_non = list()
-	var/list/botPool_l = list() //list of all npcs using the pool
-	var/list/botPool_l_non = list() //list of all non SNPC mobs using the pool
-
-/datum/controller/subsystem/npcpool/proc/insertBot(toInsert)
-	if(istype(toInsert,/mob/living/carbon/human/interactive))
-		botPool_l |= toInsert
+	
+	var/list/processing = list()
+	var/list/currentrun = list()
+	var/stage
 
 /datum/controller/subsystem/npcpool/New()
 	NEW_SS_GLOBAL(SSnpc)
 
 /datum/controller/subsystem/npcpool/stat_entry()
-	..("T:[botPool_l.len + botPool_l_non.len]|D:[needsDelegate.len]|A:[needsAssistant.len + needsHelp_non.len]|U:[canBeUsed.len + canBeUsed_non.len]")
-
+	..("NPCS:[processing.len]|D:[needsDelegate.len]|A:[needsAssistant.len]|U:[canBeUsed.len]")
 
-/datum/controller/subsystem/npcpool/proc/cleanNull()
-		//cleanup nulled bots
-	listclearnulls(botPool_l)
-	listclearnulls(needsDelegate)
-	listclearnulls(canBeUsed)
-	listclearnulls(needsAssistant)
+/datum/controller/subsystem/npcpool/proc/stop_processing(mob/living/carbon/human/interactive/I)
+	processing -= I
+	currentrun -= I
+	needsDelegate -= I
+	canBeUsed -= I
+	needsAssistant -= I
 
-
-/datum/controller/subsystem/npcpool/fire()
+/datum/controller/subsystem/npcpool/fire(resumed = FALSE)
 	//bot delegation and coordination systems
 	//General checklist/Tasks for delegating a task or coordinating it (for SNPCs)
 	// 1. Bot proximity to task target: if too far, delegate, if close, coordinate
@@ -41,87 +38,94 @@ var/datum/controller/subsystem/npcpool/SSnpc
 	// 3. Process delegation: if a bot (or bots) has been delegated, assign them to the task.
 	// 4. Process coordination: if a bot(or bots) has been asked to coordinate, assign them to help.
 	// 5. Do all assignments: goes through the delegated/coordianted bots and assigns the right variables/tasks to them.
-	var/npcCount = 1
-
-	cleanNull()
-
-	//SNPC handling
-	for(var/mob/living/carbon/human/interactive/check in botPool_l)
-		if(!check)
-			botPool_l.Cut(npcCount,npcCount+1)
-			continue
-		var/checkInRange = view(MAX_RANGE_FIND,check)
-		if(!(locate(check.TARGET) in checkInRange))
-			needsDelegate |= check
-
-		else if(check.IsDeadOrIncap(FALSE))
-			needsDelegate |= check
-
-		else if(check.doing & FIGHTING)
-			needsAssistant |= check
-
-		else
-			canBeUsed |= check
-		npcCount++
-
-	if(needsDelegate.len)
-
-		needsDelegate -= pick(needsDelegate) // cheapo way to make sure stuff doesn't pingpong around in the pool forever. delegation runs seperately to each loop so it will work much smoother
-
-		npcCount = 1 //reset the count
-		for(var/mob/living/carbon/human/interactive/check in needsDelegate)
-			if(!check)
-				needsDelegate.Cut(npcCount,npcCount+1)
-				continue
-			if(canBeUsed.len)
-				var/mob/living/carbon/human/interactive/candidate = pick(canBeUsed)
-				var/facCount = 0
-				var/helpProb = 0
-				for(var/C in check.faction)
-					for(var/D in candidate.faction)
-						if(D == C)
-							helpProb = min(100,helpProb + 25)
-						facCount++
-				if(facCount == 1 && helpProb > 0)
-					helpProb = 100
-				if(prob(helpProb))
-					if(candidate.takeDelegate(check))
-						needsDelegate -= check
-						canBeUsed -= candidate
-						candidate.eye_color = "red"
-						candidate.update_icons()
-			npcCount++
-
-	if(needsAssistant.len)
-
-		needsAssistant -= pick(needsAssistant)
-
-		npcCount = 1 //reset the count
-		for(var/mob/living/carbon/human/interactive/check in needsAssistant)
-			if(!check)
-				needsAssistant.Cut(npcCount,npcCount+1)
-				continue
-			if(canBeUsed.len)
-				var/mob/living/carbon/human/interactive/candidate = pick(canBeUsed)
-				var/facCount = 0
-				var/helpProb = 0
-				for(var/C in check.faction)
-					for(var/D in candidate.faction)
-						if(D == C)
-							helpProb = min(100,helpProb + 25)
-						facCount++
-				if(facCount == 1 && helpProb > 0)
-					helpProb = 100
-				if(prob(helpProb))
-					if(candidate.takeDelegate(check,FALSE))
-						needsAssistant -= check
-						canBeUsed -= candidate
-						candidate.eye_color = "yellow"
-						candidate.update_icons()
-			npcCount++
+
+	if (!resumed)
+		src.currentrun = processing.Copy()
+		stage = PROCESSING_NPCS
+	//cache for sanic speed (lists are references anyways)
+	var/list/currentrun = src.currentrun
+	var/list/canBeUsed = src.canBeUsed
+
+	if(stage == PROCESSING_NPCS)
+		while(currentrun.len)
+			var/mob/living/carbon/human/interactive/thing = currentrun[currentrun.len]
+			--currentrun.len
+
+			thing.InteractiveProcess()
+
+			var/checkInRange = view(MAX_RANGE_FIND,thing)
+			if(thing.IsDeadOrIncap(FALSE) || !(locate(thing.TARGET) in checkInRange))
+				needsDelegate += thing
+			else if(thing.doing & FIGHTING)
+				needsAssistant += thing
+			else
+				canBeUsed += thing
+
+			if (MC_TICK_CHECK)
+				return
+		stage = PROCESSING_DELEGATES
+		currentrun = needsDelegate	//localcache
+		src.currentrun = currentrun
+
+	if(stage == PROCESSING_DELEGATES)
+		while(currentrun.len && canBeUsed.len)
+			var/mob/living/carbon/human/interactive/check = currentrun[currentrun.len]
+			var/mob/living/carbon/human/interactive/candidate = canBeUsed[canBeUsed.len]
+			--currentrun.len
+
+			var/helpProb = 0
+			var/list/chfac = check.faction
+			var/list/canfac = candidate.faction
+			var/facCount = LAZYLEN(chfac) * LAZYLEN(canfac)
+
+			for(var/C in chfac)
+				if(C in canfac)
+					helpProb = min(100,helpProb + 25)
+					if(helpProb >= 100)
+						break
+
+			if(facCount == 1 && helpProb)
+				helpProb = 100
+
+			if(prob(helpProb) && candidate.takeDelegate(check))
+				--canBeUsed.len
+				candidate.eye_color = "red"
+				candidate.update_icons()
+
+			if(MC_TICK_CHECK)
+				return
+		stage = PROCESSING_ASSISTANTS
+		currentrun = needsAssistant	//localcache
+		src.currentrun = currentrun
+
+	//no need for the stage check
+
+	while(currentrun.len && canBeUsed.len)
+		var/mob/living/carbon/human/interactive/check = currentrun[currentrun.len]
+		var/mob/living/carbon/human/interactive/candidate = canBeUsed[canBeUsed.len]
+		--currentrun.len
+
+		var/helpProb = 0
+		var/list/chfac = check.faction
+		var/list/canfac = candidate.faction
+		var/facCount = LAZYLEN(chfac) * LAZYLEN(canfac)
+
+		for(var/C in chfac)
+			if(C in canfac)
+				helpProb = min(100,helpProb + 25)
+				if(helpProb >= 100)
+					break
+
+		if(facCount == 1 && helpProb)
+			helpProb = 100
+	
+		if(prob(helpProb) && candidate.takeDelegate(check,FALSE))
+			--canBeUsed.len
+			candidate.eye_color = "yellow"
+			candidate.update_icons()
+			
+		if(!currentrun.len || MC_TICK_CHECK)	//don't change SS state if it isn't necessary
+			return
 
 /datum/controller/subsystem/npcpool/Recover()
-	if (istype(SSnpc.botPool_l))
-		botPool_l = SSnpc.botPool_l
-	if (istype(SSnpc.botPool_l_non))
-		botPool_l_non = SSnpc.botPool_l_non
\ No newline at end of file
+	processing = SSnpc.processing
\ No newline at end of file
