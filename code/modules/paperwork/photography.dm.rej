diff a/code/modules/paperwork/photography.dm b/code/modules/paperwork/photography.dm	(rejected hunks)
@@ -4,6 +4,7 @@
  *		Camera Film
  *		Photos
  *		Photo Albums
+ *		Picture Frames
  *		AI Photography
  */
 
@@ -53,10 +54,10 @@
 /obj/item/weapon/photo/examine(mob/user)
 	..()
 
-	if(in_range(user, src))
+	if(in_range(src, user))
 		show(user)
 	else
-		user << "<span class='warning'>You need to get closer to get a good look at this photo!</span>"
+		to_chat(user, "<span class='warning'>You need to get closer to get a good look at this photo!</span>")
 
 
 /obj/item/weapon/photo/proc/show(mob/user)
@@ -166,11 +167,11 @@
 /obj/item/device/camera/attackby(obj/item/I, mob/user, params)
 	if(istype(I, /obj/item/device/camera_film))
 		if(pictures_left)
-			user << "<span class='notice'>[src] still has some film in it!</span>"
+			to_chat(user, "<span class='notice'>[src] still has some film in it!</span>")
 			return
-		if(!user.unEquip(I))
+		if(!user.temporarilyRemoveItemFromInventory(I))
 			return
-		user << "<span class='notice'>You insert [I] into [src].</span>"
+		to_chat(user, "<span class='notice'>You insert [I] into [src].</span>")
 		qdel(I)
 		pictures_left = pictures_max
 		return
@@ -179,7 +180,7 @@
 
 /obj/item/device/camera/examine(mob/user)
 	..()
-	user << "It has [pictures_left] photos left."
+	to_chat(user, "It has [pictures_left] photos left.")
 
 
 /obj/item/device/camera/proc/camera_get_icon(list/turfs, turf/center)
@@ -303,7 +304,7 @@
 
 /obj/item/device/camera/proc/printpicture(mob/user, icon/temp, mobs, flag) //Normal camera proc for creating photos
 	var/obj/item/weapon/photo/P = new/obj/item/weapon/photo(get_turf(src))
-	if(Adjacent(user)) //needed because of TK
+	if(in_range(src, user)) //needed because of TK
 		user.put_in_hands(P)
 	var/icon/small_img = icon(temp)
 	var/icon/ic = icon('icons/obj/items.dmi',"photo")
@@ -363,7 +364,7 @@
 	P.fields["blueprints"] = blueprintsinject
 
 	aipictures += P
-	usr << "<span class='unconscious'>Image recorded</span>"	//feedback to the AI player that the picture was taken
+	to_chat(usr, "<span class='unconscious'>Image recorded</span>") //feedback to the AI player that the picture was taken
 
 /obj/item/device/camera/proc/injectmasteralbum(icon, img, desc, pixel_x, pixel_y, blueprintsinject) //stores image information to a list similar to that of the datacore
 	var/numberer = 1
@@ -381,7 +382,7 @@
 		P.fields["blueprints"] = blueprintsinject
 
 		C.connected_ai.aicamera.aipictures += P
-		usr << "<span class='unconscious'>Image recorded and saved to remote database</span>"	//feedback to the Cyborg player that the picture was taken
+		to_chat(usr, "<span class='unconscious'>Image recorded and saved to remote database</span>") //feedback to the Cyborg player that the picture was taken
 	else
 		injectaialbum(icon, img, desc, pixel_x, pixel_y, blueprintsinject)
 
@@ -389,7 +390,7 @@
 	var/list/nametemp = list()
 	var/find
 	if(targetloc.aipictures.len == 0)
-		usr << "<span class='boldannounce'>No images saved</span>"
+		to_chat(usr, "<span class='boldannounce'>No images saved</span>")
 		return
 	for(var/datum/picture/t in targetloc.aipictures)
 		nametemp += t.fields["name"]
@@ -407,7 +408,7 @@
 		P.pixel_y = selection.fields["pixel_y"]
 
 		P.show(usr)
-		usr << P.desc
+		to_chat(usr, P.desc)
 	qdel(P)    //so 10 thousand picture items are not left in memory should an AI take them and then view them all
 
 /obj/item/device/camera/siliconcam/proc/viewpictures(user)
@@ -433,7 +434,7 @@
 	playsound(loc, pick('sound/items/polaroid1.ogg', 'sound/items/polaroid2.ogg'), 75, 1, -3)
 
 	pictures_left--
-	user << "<span class='notice'>[pictures_left] photos left.</span>"
+	to_chat(user, "<span class='notice'>[pictures_left] photos left.</span>")
 	icon_state = "camera_off"
 	on = 0
 	spawn(64)
@@ -448,11 +449,11 @@
 
 /obj/item/device/camera/siliconcam/proc/camera_mode_off()
 	src.in_camera_mode = 0
-	usr << "<B>Camera Mode deactivated</B>"
+	to_chat(usr, "<B>Camera Mode deactivated</B>")
 
 /obj/item/device/camera/siliconcam/proc/camera_mode_on()
 	src.in_camera_mode = 1
-	usr << "<B>Camera Mode activated</B>"
+	to_chat(usr, "<B>Camera Mode activated</B>")
 
 /obj/item/device/camera/siliconcam/robot_camera/proc/borgprint()
 	var/list/nametemp = list()
@@ -461,14 +462,14 @@
 	var/mob/living/silicon/robot/C = src.loc
 	var/obj/item/device/camera/siliconcam/targetcam = null
 	if(C.toner < 20)
-		usr << "Insufficent toner to print image."
+		to_chat(usr, "Insufficent toner to print image.")
 		return
 	if(C.connected_ai)
 		targetcam = C.connected_ai.aicamera
 	else
 		targetcam = C.aicamera
 	if(targetcam.aipictures.len == 0)
-		usr << "<span class='userdanger'>No images saved</span>"
+		to_chat(usr, "<span class='userdanger'>No images saved</span>")
 		return
 	for(var/datum/picture/t in targetcam.aipictures)
 		nametemp += t.fields["name"]
@@ -483,4 +484,125 @@
 	p.pixel_y = rand(-10, 10)
 	C.toner -= 20	 //Cyborgs are very ineffeicient at printing an image
 	visible_message("[C.name] spits out a photograph from a narrow slot on its chassis.")
-	usr << "<span class='notice'>You print a photograph.</span>"
+	to_chat(usr, "<span class='notice'>You print a photograph.</span>")
+
+// Picture frames
+
+/obj/item/weapon/picture_frame
+	name = "picture frame"
+	desc = "The perfect showcase for your favorite deathtrap memories."
+	icon = 'icons/obj/decals.dmi'
+	icon_state = "frame-empty"
+	var/obj/item/weapon/photo/displayed
+
+/obj/item/weapon/picture_frame/attackby(obj/item/I, mob/user)
+	if(istype(I, /obj/item/weapon/photo))
+		if(!displayed)
+			var/obj/item/weapon/photo/P = I
+			if(!user.transferItemToLoc(P, src))
+				return
+			displayed = P
+			update_icon()
+		else
+			to_chat(user, "<span class=notice>\The [src] already contains a photo.</span>")
+
+	..()
+
+/obj/item/weapon/picture_frame/attack_hand(mob/user)
+	if(user.get_inactive_held_item() != src)
+		..()
+		return
+	if(contents.len)
+		var/obj/item/I = pick(contents)
+		user.put_in_hands(I)
+		to_chat(user, "<span class='notice'>You carefully remove the photo from \the [src].</span>")
+		displayed = null
+		update_icon()
+
+/obj/item/weapon/picture_frame/attack_self(mob/user)
+	user.examinate(src)
+
+/obj/item/weapon/picture_frame/examine(mob/user)
+	if(user.is_holding(src) && displayed)
+		displayed.show(user)
+	else
+		..()
+
+/obj/item/weapon/picture_frame/update_icon()
+	cut_overlays()
+	if(displayed)
+		add_overlay(getFlatIcon(displayed))
+	else
+		icon_state = initial(icon_state)
+
+/obj/item/weapon/picture_frame/afterattack(atom/target, mob/user, proximity)
+	var/turf/T = target
+	if(!iswallturf(T))
+		return
+	user.visible_message("<span class='notice'>[user] fastens [src] to [T].</span>", \
+						 "<span class='notice'>You attach the sign to [T].</span>")
+	playsound(T, 'sound/items/Deconstruct.ogg', 50, 1)
+	var/obj/structure/sign/picture_frame/PF = new /obj/structure/sign/picture_frame(T)
+	PF.copy_overlays(src)
+	if(displayed)
+		PF.framed = displayed
+	if(contents.len)
+		var/obj/item/I = pick(contents)
+		I.forceMove(PF)
+	qdel(src)
+
+/obj/structure/sign/picture_frame
+	name = "picture frame"
+	desc = "Every time you look it makes you laugh."
+	icon = 'icons/obj/decals.dmi'
+	icon_state = "frame-empty"
+	var/obj/item/weapon/photo/framed
+
+/obj/structure/sign/picture_frame/examine(mob/user)
+	if(in_range(src, user) && framed)
+		framed.show(user)
+	else
+		..()
+
+/obj/structure/sign/picture_frame/attackby(obj/item/O, mob/user, params)
+	if(istype(O, /obj/item/weapon/screwdriver))
+		user.visible_message("<span class='notice'>[user] starts removing [src]...</span>", \
+							 "<span class='notice'>You start unfastening [src].</span>")
+		playsound(src, O.usesound, 50, 1)
+		if(!do_after(user, 30*O.toolspeed, target = src))
+			return
+		playsound(src, 'sound/items/Deconstruct.ogg', 50, 1)
+		user.visible_message("<span class='notice'>[user] unfastens [src].</span>", \
+							 "<span class='notice'>You unfasten [src].</span>")
+		var/obj/item/weapon/picture_frame/F = new /obj/item/weapon/picture_frame(get_turf(user))
+		if(framed)
+			F.displayed = framed
+			framed = null
+		if(contents.len)
+			var/obj/item/I = pick(contents)
+			I.forceMove(F)
+		F.update_icon()
+		qdel(src)
+
+	else if(istype(O, /obj/item/weapon/photo))
+		if(!framed)
+			var/obj/item/weapon/photo/P = O
+			if(!user.transferItemToLoc(P, src))
+				return
+			framed = P
+			update_icon()
+		else
+			to_chat(user, "<span class=notice>\The [src] already contains a photo.</span>")
+
+	..()
+
+/obj/structure/sign/picture_frame/attack_hand(mob/user)
+	if(framed)
+		framed.show()
+
+/obj/structure/sign/picture_frame/update_icon()
+	cut_overlays()
+	if(framed)
+		add_overlay(getFlatIcon(framed))
+	else
+		icon_state = initial(icon_state)
\ No newline at end of file
