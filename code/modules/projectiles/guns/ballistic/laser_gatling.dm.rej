diff a/code/modules/projectiles/guns/ballistic/laser_gatling.dm b/code/modules/projectiles/guns/ballistic/laser_gatling.dm	(rejected hunks)
@@ -22,7 +22,7 @@
 
 /obj/item/weapon/minigunpack/Destroy()
 	STOP_PROCESSING(SSobj, src)
-	..()
+	return ..()
 
 /obj/item/weapon/minigunpack/process()
 	overheat = max(0, overheat - heat_diffusion)
@@ -34,25 +34,25 @@
 				armed = 1
 				if(!user.put_in_hands(gun))
 					armed = 0
-					user << "<span class='warning'>You need a free hand to hold the gun!</span>"
+					to_chat(user, "<span class='warning'>You need a free hand to hold the gun!</span>")
 					return
 				update_icon()
 				gun.forceMove(user)
 				user.update_inv_back()
 		else
-			user << "<span class='warning'>You are already holding the gun!</span>"
+			to_chat(user, "<span class='warning'>You are already holding the gun!</span>")
 	else
 		..()
 
 /obj/item/weapon/minigunpack/attackby(obj/item/weapon/W, mob/user, params)
 	if(W == gun) //Don't need armed check, because if you have the gun assume its armed.
-		user.unEquip(gun,1)
+		user.dropItemToGround(gun, TRUE)
 	else
 		..()
 
 /obj/item/weapon/minigunpack/dropped(mob/user)
 	if(armed)
-		user.unEquip(gun,1)
+		user.dropItemToGround(gun, TRUE)
 
 /obj/item/weapon/minigunpack/MouseDrop(atom/over_object)
 	if(armed)
@@ -63,13 +63,11 @@
 		if(!over_object)
 			return
 
-		if(!M.restrained() && !M.stat)
+		if(!M.incapacitated())
 
 			if(istype(over_object, /obj/screen/inventory/hand))
 				var/obj/screen/inventory/hand/H = over_object
-				if(!M.unEquip(src))
-					return
-				M.put_in_hand(src, H.held_index)
+				M.putItemFromInventoryInHandIfPossible(src, H.held_index)
 
 
 /obj/item/weapon/minigunpack/update_icon()
@@ -84,7 +82,7 @@
 	gun.forceMove(src)
 	armed = 0
 	if(user)
-		user << "<span class='notice'>You attach the [gun.name] to the [name].</span>"
+		to_chat(user, "<span class='notice'>You attach the [gun.name] to the [name].</span>")
 	else
 		src.visible_message("<span class='warning'>The [gun.name] snaps back onto the [name]!</span>")
 	update_icon()
@@ -98,7 +96,7 @@
 	icon_state = "minigun_spin"
 	item_state = "minigun"
 	origin_tech = "combat=6;powerstorage=5;magnets=4"
-	flags = CONDUCT | HANDSLOW
+	flags = CONDUCT
 	slowdown = 1
 	slot_flags = null
 	w_class = WEIGHT_CLASS_HUGE
@@ -112,6 +110,17 @@
 	casing_ejector = 0
 	var/obj/item/weapon/minigunpack/ammo_pack
 
+/obj/item/weapon/gun/ballistic/minigun/Initialize(mapload)
+	..()
+	SET_SECONDARY_FLAG(src, SLOWS_WHILE_IN_HAND)
+
+	if(!ammo_pack)
+		if(istype(loc,/obj/item/weapon/minigunpack)) //We should spawn inside a ammo pack so let's use that one.
+			ammo_pack = loc
+			..()
+		else
+			qdel(src)//No pack, no gun
+
 /obj/item/weapon/gun/ballistic/minigun/attack_self(mob/living/user)
 	return
 
@@ -127,21 +136,13 @@
 			ammo_pack.overheat += burst_size
 			..()
 		else
-			user << "The gun's heat sensor locked the trigger to prevent lens damage."
+			to_chat(user, "The gun's heat sensor locked the trigger to prevent lens damage.")
 
 /obj/item/weapon/gun/ballistic/minigun/afterattack(atom/target, mob/living/user, flag, params)
 	if(!ammo_pack || ammo_pack.loc != user)
-		user << "You need the backpack power source to fire the gun!"
+		to_chat(user, "You need the backpack power source to fire the gun!")
 	..()
 
-/obj/item/weapon/gun/ballistic/minigun/New()
-	if(!ammo_pack)
-		if(istype(loc,/obj/item/weapon/minigunpack)) //We should spawn inside a ammo pack so let's use that one.
-			ammo_pack = loc
-			..()
-		else
-			qdel(src)//No pack, no gun
-
 /obj/item/weapon/gun/ballistic/minigun/dropped(mob/living/user)
 	ammo_pack.attach_gun(user)
 
