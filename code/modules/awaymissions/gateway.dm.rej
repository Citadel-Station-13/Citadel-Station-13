diff a/code/modules/awaymissions/gateway.dm b/code/modules/awaymissions/gateway.dm	(rejected hunks)
@@ -9,21 +9,48 @@ var/obj/machinery/gateway/centerstation/the_gateway = null
 	anchored = 1
 	resistance_flags = INDESTRUCTIBLE | LAVA_PROOF | FIRE_PROOF | UNACIDABLE | ACID_PROOF
 	var/active = 0
+	var/checkparts = TRUE
+	var/list/obj/effect/landmark/randomspawns = list()
+	var/calibrated = TRUE
+	var/list/linked = list()
+	var/can_link = FALSE	//Is this the centerpiece?
 
-
-/obj/machinery/gateway/centerstation/New()
+/obj/machinery/gateway/Initialize()
 	..()
-	if(!the_gateway)
-		the_gateway = src
+	randomspawns = awaydestinations
 
+/obj/machinery/gateway/proc/toggleoff()
+	for(var/obj/machinery/gateway/G in linked)
+		G.active = 0
+		G.update_icon()
+	active = 0
+	update_icon()
 
-/obj/machinery/gateway/centerstation/Destroy()
-	if(the_gateway == src)
-		the_gateway = null
-	return ..()
+/obj/machinery/gateway/proc/detect()
+	if(!can_link)
+		return FALSE
+	linked = list()	//clear the list
+	var/turf/T = loc
+	var/ready = FALSE
 
+	for(var/i in alldirs)
+		T = get_step(loc, i)
+		var/obj/machinery/gateway/G = locate(/obj/machinery/gateway) in T
+		if(G)
+			linked.Add(G)
+			continue
+
+		//this is only done if we fail to find a part
+		ready = FALSE
+		toggleoff()
+		break
+
+	if((linked.len == 8) || !checkparts)
+		ready = TRUE
+	return ready
 
-/obj/machinery/gateway/initialize()
+/obj/machinery/gateway/Initialize()
+	..()
 	update_icon()
 	switch(dir)
 		if(SOUTH,SOUTHEAST,SOUTHWEST)
@@ -40,73 +67,69 @@ var/obj/machinery/gateway/centerstation/the_gateway = null
 /obj/machinery/gateway/shuttleRotate()
 	return
 
+/obj/machinery/gateway/attack_hand(mob/user)
+	if(!detect())
+		return
+	if(!active)
+		toggleon(user)
+		return
+	toggleoff()
+
+/obj/machinery/gateway/proc/toggleon(mob/user)
+	return FALSE
+
+/obj/machinery/gateway/centerstation/New()
+	..()
+	if(!the_gateway)
+		the_gateway = src
+
+/obj/machinery/gateway/centerstation/Destroy()
+	if(the_gateway == src)
+		the_gateway = null
+	return ..()
+
 //this is da important part wot makes things go
 /obj/machinery/gateway/centerstation
-	density = 1
+	density = TRUE
 	icon_state = "offcenter"
-	use_power = 1
+	use_power = TRUE
 
 	//warping vars
-	var/list/linked = list()
-	var/ready = 0				//have we got all the parts for a gateway?
 	var/wait = 0				//this just grabs world.time at world start
 	var/obj/machinery/gateway/centeraway/awaygate = null
+	can_link = TRUE
 
-/obj/machinery/gateway/centerstation/initialize()
+/obj/machinery/gateway/centerstation/Initialize()
+	..()
 	update_icon()
 	wait = world.time + config.gateway_delay	//+ thirty minutes default
 	awaygate = locate(/obj/machinery/gateway/centeraway)
 
-
 /obj/machinery/gateway/centerstation/update_icon()
 	if(active)
 		icon_state = "oncenter"
 		return
 	icon_state = "offcenter"
 
-
-
 /obj/machinery/gateway/centerstation/process()
-	if(stat & (NOPOWER))
-		if(active) toggleoff()
+	if((stat & (NOPOWER)) && use_power)
+		if(active)
+			toggleoff()
 		return
 
 	if(active)
 		use_power(5000)
 
-
-/obj/machinery/gateway/centerstation/proc/detect()
-	linked = list()	//clear the list
-	var/turf/T = loc
-
-	for(var/i in alldirs)
-		T = get_step(loc, i)
-		var/obj/machinery/gateway/G = locate(/obj/machinery/gateway) in T
-		if(G)
-			linked.Add(G)
-			continue
-
-		//this is only done if we fail to find a part
-		ready = 0
-		toggleoff()
-		break
-
-	if(linked.len == 8)
-		ready = 1
-
-
-/obj/machinery/gateway/centerstation/proc/toggleon(mob/user)
-	if(!ready)
-		return
-	if(linked.len != 8)
+/obj/machinery/gateway/centerstation/toggleon(mob/user)
+	if(!detect())
 		return
 	if(!powered())
 		return
 	if(!awaygate)
-		user << "<span class='notice'>Error: No destination found.</span>"
+		to_chat(user, "<span class='notice'>Error: No destination found.</span>")
 		return
 	if(world.time < wait)
-		user << "<span class='notice'>Error: Warpspace triangulation in progress. Estimated time to completion: [round(((wait - world.time) / 10) / 60)] minutes.</span>"
+		to_chat(user, "<span class='notice'>Error: Warpspace triangulation in progress. Estimated time to completion: [round(((wait - world.time) / 10) / 60)] minutes.</span>")
 		return
 
 	for(var/obj/machinery/gateway/G in linked)
@@ -115,32 +138,13 @@ var/obj/machinery/gateway/centerstation/the_gateway = null
 	active = 1
 	update_icon()
 
-
-/obj/machinery/gateway/centerstation/proc/toggleoff()
-	for(var/obj/machinery/gateway/G in linked)
-		G.active = 0
-		G.update_icon()
-	active = 0
-	update_icon()
-
-
-/obj/machinery/gateway/centerstation/attack_hand(mob/user)
-	if(!ready)
-		detect()
-		return
-	if(!active)
-		toggleon(user)
-		return
-	toggleoff()
-
-
 //okay, here's the good teleporting stuff
 /obj/machinery/gateway/centerstation/Bumped(atom/movable/AM)
-	if(!ready)
-		return
 	if(!active)
 		return
-	if(!awaygate || qdeleted(awaygate))
+	if(!detect())
+		return
+	if(!awaygate || QDELETED(awaygate))
 		return
 
 	if(awaygate.calibrated)
@@ -152,34 +156,36 @@ var/obj/machinery/gateway/centerstation/the_gateway = null
 				M.client.move_delay = max(world.time + 5, M.client.move_delay)
 		return
 	else
-		var/obj/effect/landmark/dest = pick(awaydestinations)
+		var/obj/effect/landmark/dest = pick(randomspawns)
 		if(dest)
 			AM.forceMove(get_turf(dest))
 			AM.setDir(SOUTH)
 			use_power(5000)
 		return
 
-
-/obj/machinery/gateway/centerstation/attackby(obj/item/device/W, mob/user, params)
+/obj/machinery/gateway/centeraway/attackby(obj/item/device/W, mob/user, params)
 	if(istype(W,/obj/item/device/multitool))
-		user << "\black The gate is already calibrated, there is no work for you to do here."
-		return
-
+		if(calibrated)
+			to_chat(user, "\black The gate is already calibrated, there is no work for you to do here.")
+			return
+		else
+			to_chat(user, "<span class='boldnotice'>Recalibration successful!</span>: \black This gate's systems have been fine tuned.  Travel to this gate will now be on target.")
+			calibrated = TRUE
+			return
 
 /////////////////////////////////////Away////////////////////////
 
 
 /obj/machinery/gateway/centeraway
-	density = 1
+	density = TRUE
 	icon_state = "offcenter"
-	use_power = 0
-	var/calibrated = 1
-	var/list/linked = list()	//a list of the connected gateway chunks
-	var/ready = 0
+	use_power = FALSE
 	var/obj/machinery/gateway/centeraway/stationgate = null
+	can_link = TRUE
 
 
-/obj/machinery/gateway/centeraway/initialize()
+/obj/machinery/gateway/centeraway/Initialize()
+	..()
 	update_icon()
 	stationgate = locate(/obj/machinery/gateway/centerstation)
 
@@ -190,34 +196,11 @@ var/obj/machinery/gateway/centerstation/the_gateway = null
 		return
 	icon_state = "offcenter"
 
-
-/obj/machinery/gateway/centeraway/proc/detect()
-	linked = list()	//clear the list
-	var/turf/T = loc
-
-	for(var/i in alldirs)
-		T = get_step(loc, i)
-		var/obj/machinery/gateway/G = locate(/obj/machinery/gateway) in T
-		if(G)
-			linked.Add(G)
-			continue
-
-		//this is only done if we fail to find a part
-		ready = 0
-		toggleoff()
-		break
-
-	if(linked.len == 8)
-		ready = 1
-
-
-/obj/machinery/gateway/centeraway/proc/toggleon(mob/user)
-	if(!ready)
-		return
-	if(linked.len != 8)
+/obj/machinery/gateway/centeraway/toggleon(mob/user)
+	if(!detect())
 		return
 	if(!stationgate)
-		user << "<span class='notice'>Error: No destination found.</span>"
+		to_chat(user, "<span class='notice'>Error: No destination found.</span>")
 		return
 
 	for(var/obj/machinery/gateway/G in linked)
@@ -226,36 +209,17 @@ var/obj/machinery/gateway/centerstation/the_gateway = null
 	active = 1
 	update_icon()
 
-
-/obj/machinery/gateway/centeraway/proc/toggleoff()
-	for(var/obj/machinery/gateway/G in linked)
-		G.active = 0
-		G.update_icon()
-	active = 0
-	update_icon()
-
-
-/obj/machinery/gateway/centeraway/attack_hand(mob/user)
-	if(!ready)
-		detect()
-		return
-	if(!active)
-		toggleon(user)
-		return
-	toggleoff()
-
-
 /obj/machinery/gateway/centeraway/Bumped(atom/movable/AM)
-	if(!ready)
+	if(!detect())
 		return
 	if(!active)
 		return
-	if(!stationgate || qdeleted(stationgate))
+	if(!stationgate || QDELETED(stationgate))
 		return
 	if(istype(AM, /mob/living/carbon))
 		var/mob/living/carbon/C = AM
 		for(var/obj/item/weapon/implant/exile/E in C.implants)//Checking that there is an exile implant
-			AM << "\black The station gate has detected your exile implant and is blocking your entry."
+			to_chat(AM, "\black The station gate has detected your exile implant and is blocking your entry.")
 			return
 	AM.forceMove(get_step(stationgate.loc, SOUTH))
 	AM.setDir(SOUTH)
@@ -263,14 +227,3 @@ var/obj/machinery/gateway/centerstation/the_gateway = null
 		var/mob/M = AM
 		if (M.client)
 			M.client.move_delay = max(world.time + 5, M.client.move_delay)
-
-
-/obj/machinery/gateway/centeraway/attackby(obj/item/device/W, mob/user, params)
-	if(istype(W,/obj/item/device/multitool))
-		if(calibrated)
-			user << "\black The gate is already calibrated, there is no work for you to do here."
-			return
-		else
-			user << "<span class='boldnotice'>Recalibration successful!</span>: \black This gate's systems have been fine tuned.  Travel to this gate will now be on target."
-			calibrated = 1
-			return
