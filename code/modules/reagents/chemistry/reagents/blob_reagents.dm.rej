diff a/code/modules/reagents/chemistry/reagents/blob_reagents.dm b/code/modules/reagents/chemistry/reagents/blob_reagents.dm	(rejected hunks)
@@ -31,7 +31,7 @@
 /datum/reagent/blob/proc/death_reaction(obj/structure/blob/B, damage_flag) //when a blob dies, do this
 	return
 
-/datum/reagent/blob/proc/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T) //when the blob expands, do this
+/datum/reagent/blob/proc/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T, mob/camera/blob/O) //when the blob expands, do this
 	return
 
 /datum/reagent/blob/proc/tesla_reaction(obj/structure/blob/B, power) //when the blob is hit by a tesla bolt, do this
@@ -69,10 +69,43 @@
 			newB.update_icon()
 	return ..()
 
-/datum/reagent/blob/replicating_foam/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T)
+/datum/reagent/blob/replicating_foam/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T, mob/camera/blob/O)
 	if(prob(30))
 		newB.expand(null, null, 0) //do it again!
 
+//does massive brute and burn damage, but can only expand manually
+/datum/reagent/blob/networked_fibers
+	name = "Networked Fibers"
+	id = "networked_fibers"
+	description = "will do high brute and burn damage but non-manual expansion will only generate resources."
+	shortdesc = "will do high brute and burn damage."
+	effectdesc = "will move your core when manually expanding near it."
+	analyzerdescdamage = "Does high brute and burn damage."
+	analyzerdesceffect = "Is highly mobile and generates resources rapidly."
+	color = "#CDC0B0"
+	complementary_color = "#FFF68F"
+
+/datum/reagent/blob/networked_fibers/reaction_mob(mob/living/M, method=TOUCH, reac_volume, show_message, touch_protection, mob/camera/blob/O)
+	reac_volume = ..()
+	M.apply_damage(0.6*reac_volume, BRUTE)
+	if(M)
+		M.apply_damage(0.6*reac_volume, BURN)
+
+/datum/reagent/blob/networked_fibers/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T, mob/camera/blob/O)
+	if(!O && newB.overmind)
+		if(!istype(B, /obj/structure/blob/node))
+			newB.overmind.add_points(1)
+			qdel(newB)
+	else
+		var/area/A = get_area(T)
+		if(!isspaceturf(T) && !istype(A, /area/shuttle))
+			for(var/obj/structure/blob/core/C in range(1, newB))
+				if(C.overmind == O)
+					newB.forceMove(get_turf(C))
+					C.forceMove(T)
+					C.setDir(get_dir(newB, C))
+					O.add_points(1)
+
 //does brute damage, shifts away when damaged
 /datum/reagent/blob/shifting_fragments
 	name = "Shifting Fragments"
@@ -88,7 +121,7 @@
 	reac_volume = ..()
 	M.apply_damage(0.7*reac_volume, BRUTE)
 
-/datum/reagent/blob/shifting_fragments/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T)
+/datum/reagent/blob/shifting_fragments/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T, mob/camera/blob/O)
 	if(istype(B, /obj/structure/blob/normal) || (istype(B, /obj/structure/blob/shield) && prob(25)))
 		newB.forceMove(get_turf(B))
 		B.forceMove(T)
@@ -209,7 +242,7 @@
 		B.overmind.blob_mobs.Add(BS)
 	return ..()
 
-/datum/reagent/blob/zombifying_pods/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T)
+/datum/reagent/blob/zombifying_pods/expand_reaction(obj/structure/blob/B, obj/structure/blob/newB, turf/T, mob/camera/blob/O)
 	if(prob(10))
 		var/mob/living/simple_animal/hostile/blob/blobspore/weak/BS = new/mob/living/simple_animal/hostile/blob/blobspore/weak(T)
 		BS.overmind = B.overmind
