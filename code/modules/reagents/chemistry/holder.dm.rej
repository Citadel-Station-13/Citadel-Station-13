diff a/code/modules/reagents/chemistry/holder.dm b/code/modules/reagents/chemistry/holder.dm	(rejected hunks)
@@ -12,7 +12,7 @@ var/const/INJECT = 5 //injection
 	var/list/datum/reagent/reagent_list = new/list()
 	var/total_volume = 0
 	var/maximum_volume = 100
-	var/datum/my_atom = null
+	var/atom/my_atom = null
 	var/chem_temp = 150
 	var/last_tick = 1
 	var/addiction_tick = 1
@@ -168,11 +168,17 @@ var/const/INJECT = 5 //injection
 	var/list/cached_reagents = reagent_list
 	if(!target)
 		return
-	if(!target.reagents || src.total_volume<=0)
-		return
+
+	var/datum/reagents/R
+	if(istype(target, /datum/reagents))
+		R = target
+	else
+		if(!target.reagents || src.total_volume<=0)
+			return
+		R = target.reagents
+
 	if(amount < 0)
 		return
-	var/datum/reagents/R = target.reagents
 	amount = min(min(amount, total_volume), R.maximum_volume-R.total_volume)
 	var/part = amount / total_volume
 	var/trans_data = null
@@ -267,7 +273,7 @@ var/const/INJECT = 5 //injection
 						if(30 to 40)
 							need_mob_update += R.addiction_act_stage4(C)
 						if(40 to INFINITY)
-							C << "<span class='notice'>You feel like you've gotten over your need for [R.name].</span>"
+							to_chat(C, "<span class='notice'>You feel like you've gotten over your need for [R.name].</span>")
 							cached_addictions.Remove(R)
 		addiction_tick++
 	if(C && need_mob_update) //some of the metabolized reagents had effects on the mob that requires some updates.
@@ -394,14 +400,14 @@ var/const/INJECT = 5 //injection
 							if(C.mix_sound)
 								playsound(get_turf(cached_my_atom), C.mix_sound, 80, 1)
 							for(var/mob/M in seen)
-								M << "<span class='notice'>\icon[my_atom] [C.mix_message]</span>"
+								to_chat(M, "<span class='notice'>\icon[my_atom] [C.mix_message]</span>")
 
 						if(istype(cached_my_atom, /obj/item/slime_extract))
 							var/obj/item/slime_extract/ME2 = my_atom
 							ME2.Uses--
 							if(ME2.Uses <= 0) // give the notification that the slime core is dead
 								for(var/mob/M in seen)
-									M << "<span class='notice'>\icon[my_atom] \The [my_atom]'s power is consumed in the reaction.</span>"
+									to_chat(M, "<span class='notice'>\icon[my_atom] \The [my_atom]'s power is consumed in the reaction.</span>")
 									ME2.name = "used slime extract"
 									ME2.desc = "This extract has been used up."
 
@@ -483,6 +489,9 @@ var/const/INJECT = 5 //injection
 	var/react_type
 	if(isliving(A))
 		react_type = "LIVING"
+		if(method == INGEST)
+			var/mob/living/L = A
+			L.taste(src)
 	else if(isturf(A))
 		react_type = "TURF"
 	else if(isobj(A))
@@ -504,6 +513,11 @@ var/const/INJECT = 5 //injection
 			if("OBJ")
 				R.reaction_obj(A, R.volume * volume_modifier, show_message)
 
+/datum/reagents/proc/holder_full()
+	if(total_volume >= maximum_volume)
+		return TRUE
+	return FALSE
+
 /datum/reagents/proc/add_reagent(reagent, amount, list/data=null, reagtemp = 300, no_react = 0)
 	if(!isnum(amount) || !amount)
 		return FALSE
@@ -518,14 +532,13 @@ var/const/INJECT = 5 //injection
 	chem_temp = round(((amount * reagtemp) + (total_volume * chem_temp)) / (total_volume + amount)) //equalize with new chems
 
 	for(var/A in cached_reagents)
-
 		var/datum/reagent/R = A
 		if (R.id == reagent)
 			R.volume += amount
 			update_total()
 			if(my_atom)
 				my_atom.on_reagent_change()
-			R.on_merge(data)
+			R.on_merge(data, amount)
 			if(!no_react)
 				handle_reactions()
 			return TRUE
@@ -549,7 +562,7 @@ var/const/INJECT = 5 //injection
 		return TRUE
 
 	else
-		WARNING("[my_atom] attempted to add a reagent called ' [reagent] ' which doesn't exist. ([usr])")
+		WARNING("[my_atom] attempted to add a reagent called '[reagent]' which doesn't exist. ([usr])")
 	return FALSE
 
 /datum/reagents/proc/add_reagent_list(list/list_reagents, list/data=null) // Like add_reagent but you can enter a list. Format it like this: list("toxin" = 10, "beer" = 15)
@@ -649,7 +662,7 @@ var/const/INJECT = 5 //injection
 	for(var/reagent in cached_reagents)
 		var/datum/reagent/R = reagent
 		if(R.id == reagent_id)
-			//world << "proffering a data-carrying reagent ([reagent_id])"
+			//to_chat(world, "proffering a data-carrying reagent ([reagent_id])")
 			return R.data
 
 /datum/reagents/proc/set_data(reagent_id, new_data)
@@ -657,7 +670,7 @@ var/const/INJECT = 5 //injection
 	for(var/reagent in cached_reagents)
 		var/datum/reagent/R = reagent
 		if(R.id == reagent_id)
-			//world << "reagent data set ([reagent_id])"
+			//to_chat(world, "reagent data set ([reagent_id])")
 			R.data = new_data
 
 /datum/reagents/proc/copy_data(datum/reagent/current_reagent)
@@ -685,13 +698,57 @@ var/const/INJECT = 5 //injection
 	var/list/cached_reagents = reagent_list
 	. = locate(type) in cached_reagents
 
+/datum/reagents/proc/generate_taste_message(minimum_percent=15)
+	// the lower the minimum percent, the more sensitive the message is.
+	var/list/out = list()
+	var/list/tastes = list() //descriptor = strength
+	if(minimum_percent <= 100)
+		for(var/datum/reagent/R in reagent_list)
+			if(!R.taste_mult)
+				continue
+
+			if(istype(R, /datum/reagent/consumable/nutriment))
+				var/list/taste_data = R.data
+				for(var/taste in taste_data)
+					var/ratio = taste_data[taste]
+					var/amount = ratio * R.taste_mult * R.volume
+					if(taste in tastes)
+						tastes[taste] += amount
+					else
+						tastes[taste] = amount
+			else
+				var/taste_desc = R.taste_description
+				var/taste_amount = R.volume * R.taste_mult
+				if(taste_desc in tastes)
+					tastes[taste_desc] += taste_amount
+				else
+					tastes[taste_desc] = taste_amount
+		//deal with percentages
+		// TODO it would be great if we could sort these from strong to weak
+		var/total_taste = counterlist_sum(tastes)
+		if(total_taste > 0)
+			for(var/taste_desc in tastes)
+				var/percent = tastes[taste_desc]/total_taste * 100
+				if(percent < minimum_percent)
+					continue
+				var/intensity_desc = "a hint of"
+				if(percent > minimum_percent * 2 || percent == 100)
+					intensity_desc = ""
+				else if(percent > minimum_percent * 3)
+					intensity_desc = "the strong flavor of"
+				if(intensity_desc != "")
+					out += "[intensity_desc] [taste_desc]"
+				else
+					out += "[taste_desc]"
+
+	return english_list(out, "something indescribable")
 
 ///////////////////////////////////////////////////////////////////////////////////
 
 
 // Convenience proc to create a reagents holder for an atom
 // Max vol is maximum volume of holder
-/datum/proc/create_reagents(max_vol)
+/atom/proc/create_reagents(max_vol)
 	if(reagents)
 		qdel(reagents)
 	reagents = new/datum/reagents(max_vol)
