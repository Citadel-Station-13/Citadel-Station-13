diff a/code/modules/jobs/job_types/job.dm b/code/modules/jobs/job_types/job.dm	(rejected hunks)
@@ -1,5 +1,4 @@
 /datum/job
-
 	//The name of the job
 	var/title = "NOPE"
 
@@ -10,6 +9,9 @@
 	//Determines who can demote this position
 	var/department_head = list()
 
+	//Tells the given channels that the given mob is the new department head. See communications.dm for valid channels.
+	var/list/head_announce = null
+
 	//Bitflags for the job
 	var/flag = 0
 	var/department_flag = 0
@@ -42,10 +44,18 @@
 	var/outfit = null
 
 //Only override this proc
-/datum/job/proc/equip_items(mob/living/carbon/human/H)
+//H is usually a human unless an /equip override transformed it
+/datum/job/proc/after_spawn(mob/living/H, mob/M)
+	//do actions on H but send messages to M as the key may not have been transferred_yet
+
 
-//But don't override this
-/datum/job/proc/equip(mob/living/carbon/human/H, visualsOnly = FALSE)
+/datum/job/proc/announce(mob/living/carbon/human/H)
+	if(head_announce)
+		announce_head(H, head_announce)
+
+
+//Don't override this unless the job transforms into a non-human (Silicons do this for example)
+/datum/job/proc/equip(mob/living/carbon/human/H, visualsOnly = FALSE, announce = TRUE)
 	if(!H)
 		return 0
 
@@ -57,44 +67,13 @@
 
 	H.dna.species.after_equip_job(src, H, visualsOnly)
 
-/datum/job/proc/apply_fingerprints(mob/living/carbon/human/H)
-	if(!istype(H))
-		return
-	if(H.back)
-		H.back.add_fingerprint(H,1)	//The 1 sets a flag to ignore gloves
-		for(var/obj/item/I in H.back.contents)
-			I.add_fingerprint(H,1)
-	if(H.wear_id)
-		H.wear_id.add_fingerprint(H,1)
-	if(H.w_uniform)
-		H.w_uniform.add_fingerprint(H,1)
-	if(H.wear_suit)
-		H.wear_suit.add_fingerprint(H,1)
-	if(H.wear_mask)
-		H.wear_mask.add_fingerprint(H,1)
-	if(H.wear_neck)
-		H.wear_neck.add_fingerprint(H,1)
-	if(H.head)
-		H.head.add_fingerprint(H,1)
-	if(H.shoes)
-		H.shoes.add_fingerprint(H,1)
-	if(H.gloves)
-		H.gloves.add_fingerprint(H,1)
-	if(H.ears)
-		H.ears.add_fingerprint(H,1)
-	if(H.glasses)
-		H.glasses.add_fingerprint(H,1)
-	if(H.belt)
-		H.belt.add_fingerprint(H,1)
-		for(var/obj/item/I in H.belt.contents)
-			I.add_fingerprint(H,1)
-	if(H.s_store)
-		H.s_store.add_fingerprint(H,1)
-	if(H.l_store)
-		H.l_store.add_fingerprint(H,1)
-	if(H.r_store)
-		H.r_store.add_fingerprint(H,1)
-	return 1
+	if(!visualsOnly && announce)
+		announce(H)
+
+	if(config.enforce_human_authority && (title in command_positions))
+		H.dna.features["tail_human"] = "None"
+		H.dna.features["ears"] = "None"
+		H.regenerate_icons()
 
 /datum/job/proc/get_access()
 	if(!config)	//Needed for robots.
@@ -110,6 +89,12 @@
 	if(config.jobs_have_maint_access & EVERYONE_HAS_MAINT_ACCESS) //Config has global maint access set
 		. |= list(access_maint_tunnels)
 
+/datum/job/proc/announce_head(var/mob/living/carbon/human/H, var/channels) //tells the given channel that the given mob is the new department head. See communications.dm for valid channels.
+	spawn(4) //to allow some initialization
+		if(H && announcement_systems.len)
+			var/obj/machinery/announcement_system/announcer = pick(announcement_systems)
+			announcer.announce("NEWHEAD", H.real_name, H.job, channels)
+
 //If the configuration option is set to require players to be logged as old enough to play certain jobs, then this proc checks that they are, otherwise it just returns 1
 /datum/job/proc/player_old_enough(client/C)
 	if(available_in_days(C) == 0)
@@ -132,9 +117,15 @@
 /datum/job/proc/config_check()
 	return 1
 
+/datum/job/proc/map_check()
+	return TRUE
+
+
 /datum/outfit/job
 	name = "Standard Gear"
 
+	var/jobtype = null
+
 	uniform = /obj/item/clothing/under/color/grey
 	id = /obj/item/weapon/card/id
 	ears = /obj/item/device/radio/headset
@@ -142,6 +133,8 @@
 	back = /obj/item/weapon/storage/backpack
 	shoes = /obj/item/clothing/shoes/sneakers/black
 
+	var/list/implants = null
+
 	var/backpack = /obj/item/weapon/storage/backpack
 	var/satchel  = /obj/item/weapon/storage/backpack/satchel
 	var/dufflebag = /obj/item/weapon/storage/backpack/dufflebag
@@ -174,23 +167,25 @@
 	if(visualsOnly)
 		return
 
+	var/datum/job/J = SSjob.GetJobType(jobtype)
+	if(!J)
+		J = SSjob.GetJob(H.job)
+
 	var/obj/item/weapon/card/id/C = H.wear_id
 	if(istype(C))
-		var/datum/job/J = SSjob.GetJob(H.job) // Not sure the best idea
 		C.access = J.get_access()
 		C.registered_name = H.real_name
-		C.assignment = H.job
+		C.assignment = J.title
 		C.update_label()
 		H.sec_hud_set_ID()
 
 	var/obj/item/device/pda/PDA = H.get_item_by_slot(pda_slot)
 	if(istype(PDA))
 		PDA.owner = H.real_name
-		PDA.ownjob = H.job
+		PDA.ownjob = J.title
 		PDA.update_label()
 
-/datum/outfit/job/proc/announce_head(var/mob/living/carbon/human/H, var/channels) //tells the given channel that the given mob is the new department head. See communications.dm for valid channels.
-	spawn(4) //to allow some initialization
-		if(H && announcement_systems.len)
-			var/obj/machinery/announcement_system/announcer = pick(announcement_systems)
-			announcer.announce("NEWHEAD", H.real_name, H.job, channels)
+	if(implants)
+		for(var/implant_type in implants)
+			var/obj/item/weapon/implant/I = new implant_type(H)
+			I.implant(H, null, silent=TRUE)
