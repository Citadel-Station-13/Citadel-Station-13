diff a/code/modules/admin/verbs/SDQL2/SDQL_2.dm b/code/modules/admin/verbs/SDQL2/SDQL_2.dm	(rejected hunks)
@@ -23,11 +23,18 @@
 	if(!check_rights(R_DEBUG))  //Shouldn't happen... but just to be safe.
 		message_admins("<span class='danger'>ERROR: Non-admin [key_name(usr, usr.client)] attempted to execute a SDQL query!</span>")
 		log_admin("Non-admin [usr.ckey]([usr]) attempted to execute a SDQL query!")
+		return FALSE
+
+	var/query_log = "executed SDQL query: \"[query_text]\"."
+	message_admins("[key_name_admin(usr)] [query_log]")
+	query_log = "[usr.ckey]([usr]) [query_log]"
+	log_game(query_log)
+	NOTICE(query_log)
 
 	if(!query_text || length(query_text) < 1)
 		return
 
-	//world << query_text
+	//to_chat(world, query_text)
 
 	var/list/query_list = SDQL2_tokenize(query_text)
 
@@ -39,118 +46,104 @@
 	if(!querys || querys.len < 1)
 		return
 
+	try
 
-	var/query_log = "executed SDQL query: \"[query_text]\"."
-	message_admins("[key_name_admin(usr)] [query_log]")
-	query_log = "[usr.ckey]([usr]) [query_log]"
-	log_game(query_log)
-	NOTICE(query_log)
-
-
-	for(var/list/query_tree in querys)
-		var/list/from_objs = list()
-		var/list/select_types = list()
-
-		switch(query_tree[1])
-			if("explain")
-				SDQL_testout(query_tree["explain"])
-				return
+		for(var/list/query_tree in querys)
+			var/list/from_objs = list()
+			var/list/select_types = list()
 
-			if("call")
-				if("on" in query_tree)
-					select_types = query_tree["on"]
-				else
+			switch(query_tree[1])
+				if("explain")
+					SDQL_testout(query_tree["explain"])
 					return
 
-			if("select", "delete", "update")
-				select_types = query_tree[query_tree[1]]
-
-		from_objs = SDQL_from_objs(query_tree["from"])
-
-		var/list/objs = list()
+				if("call")
+					if("on" in query_tree)
+						select_types = query_tree["on"]
+					else
+						return
 
-		for(var/type in select_types)
-			var/char = copytext(type, 1, 2)
+				if("select", "delete", "update")
+					select_types = query_tree[query_tree[1]]
 
-			if(char == "/" || char == "*")
-				for(var/from in from_objs)
-					objs += SDQL_get_all(type, from)
-					CHECK_TICK
+			from_objs = SDQL_from_objs(query_tree["from"])
 
-			else if(char == "'" || char == "\"")
-				objs += locate(copytext(type, 2, length(type)))
+			var/list/objs = list()
 
-		if("where" in query_tree)
-			var/objs_temp = objs
-			objs = list()
-			for(var/datum/d in objs_temp)
-				if(SDQL_expression(d, query_tree["where"]))
-					objs += d
+			for(var/type in select_types)
+				objs += SDQL_get_all(type, from_objs)
 				CHECK_TICK
 
-		switch(query_tree[1])
-			if("call")
-				var/list/call_list = query_tree["call"]
-				var/list/args_list = query_tree["args"]
-
-				for(var/datum/d in objs)
-					for(var/v in call_list)
-						SDQL_callproc(d, v, args_list)
-						CHECK_TICK
-
-			if("delete")
-				for(var/datum/d in objs)
-					qdel(d)
+			if("where" in query_tree)
+				var/objs_temp = objs
+				objs = list()
+				for(var/datum/d in objs_temp)
+					if(SDQL_expression(d, query_tree["where"]))
+						objs += d
 					CHECK_TICK
 
-			if("select")
-				var/text = ""
-				for(var/datum/t in objs)
-					text += "<A HREF='?_src_=vars;Vars=\ref[t]'>\ref[t]</A>"
-					if(istype(t, /atom))
-						var/atom/a = t
-
-						if(a.x)
-							text += ": [t] at ([a.x], [a.y], [a.z])<br>"
-
-						else if(a.loc && a.loc.x)
-							text += ": [t] in [a.loc] at ([a.loc.x], [a.loc.y], [a.loc.z])<br>"
-
-						else
-							text += ": [t]<br>"
+			switch(query_tree[1])
+				if("call")
+					for(var/datum/d in objs)
+						SDQL_var(d, query_tree["call"][1], source = d)
+						CHECK_TICK
 
-					else
-						text += ": [t]<br>"
+				if("delete")
+					for(var/datum/d in objs)
+						qdel(d)
+						CHECK_TICK
 
-				usr << browse(text, "window=SDQL-result")
+				if("select")
+					var/text = ""
+					for(var/datum/t in objs)
+						text += "<A HREF='?_src_=vars;Vars=\ref[t]'>\ref[t]</A>"
+						if(istype(t, /atom))
+							var/atom/a = t
 
-			if("update")
-				if("set" in query_tree)
-					var/list/set_list = query_tree["set"]
-					for(var/datum/d in objs)
-						var/list/vals = list()
-						for(var/v in set_list)
-							if(v in d.vars)
-								vals += v
-								vals[v] = SDQL_expression(d, set_list[v])
+							if(a.x)
+								text += ": [t] at ([a.x], [a.y], [a.z])<br>"
 
-						if(isturf(d))
-							for(var/v in vals)
-								if(v == "x" || v == "y" || v == "z")
-									continue
+							else if(a.loc && a.loc.x)
+								text += ": [t] in [a.loc] at ([a.loc.x], [a.loc.y], [a.loc.z])<br>"
 
-								d.vars[v] = vals[v]
+							else
+								text += ": [t]<br>"
 
 						else
-							for(var/v in vals)
-								d.vars[v] = vals[v]
+							text += ": [t]<br>"
 						CHECK_TICK
 
-
-
+					usr << browse(text, "window=SDQL-result")
+
+				if("update")
+					if("set" in query_tree)
+						var/list/set_list = query_tree["set"]
+						for(var/datum/d in objs)
+							for(var/list/sets in set_list)
+								var/datum/temp = d
+								var/i = 0
+								for(var/v in sets)
+									if(++i == sets.len)
+										temp.vv_edit_var(v, SDQL_expression(d, set_list[sets]))
+										break
+									if(temp.vars.Find(v) && (istype(temp.vars[v], /datum)))
+										temp = temp.vars[v]
+									else
+										break
+							CHECK_TICK
+
+	catch(var/exception/e)
+		to_chat(usr, "<span class='boldwarning'>A runtime error has occured in your SDQL2-query.</span>")
+		to_chat(usr, "\[NAME\][e.name]")
+		to_chat(usr, "\[FILE\][e.file]")
+		to_chat(usr, "\[LINE\][e.line]")
+
+/proc/SDQL_callproc_global(procname,args_list)
+	set waitfor = FALSE
+	call(procname)(arglist(args_list))
 
 /proc/SDQL_callproc(thing, procname, args_list)
-	set waitfor = 0
+	set waitfor = FALSE
 	if(hascall(thing, procname))
 		call(thing, procname)(arglist(args_list))
 
@@ -178,7 +171,7 @@
 				querys[querys_pos] = parsed_tree
 				querys_pos++
 			else //There was an error so don't run anything, and tell the user which query has errored.
-				usr << "<span class='danger'>Parsing error on [querys_pos]\th query. Nothing was executed.</span>"
+				to_chat(usr, "<span class='danger'>Parsing error on [querys_pos]\th query. Nothing was executed.</span>")
 				return list()
 			query_tree = list()
 			do_parse = 0
@@ -199,89 +192,80 @@
 
 	for(var/item in query_tree)
 		if(istype(item, /list))
-			usr << "[spaces]("
+			to_chat(usr, "[spaces](")
 			SDQL_testout(item, indent + 1)
-			usr << "[spaces])"
+			to_chat(usr, "[spaces])")
 
 		else
-			usr << "[spaces][item]"
+			to_chat(usr, "[spaces][item]")
 
 		if(!isnum(item) && query_tree[item])
 
 			if(istype(query_tree[item], /list))
-				usr << "[spaces]    ("
+				to_chat(usr, "[spaces]    (")
 				SDQL_testout(query_tree[item], indent + 2)
-				usr << "[spaces]    )"
+				to_chat(usr, "[spaces]    )")
 
 			else
-				usr << "[spaces]    [query_tree[item]]"
+				to_chat(usr, "[spaces]    [query_tree[item]]")
 
 
 
 /proc/SDQL_from_objs(list/tree)
 	if("world" in tree)
-		return list(world)
-
-	var/list/out = list()
-
-	for(var/type in tree)
-		var/char = copytext(type, 1, 2)
-
-		if(char == "/")
-			out += SDQL_get_all(type, world)
-
-		else if(char == "'" || char == "\"")
-			out += locate(copytext(type, 2, length(type)))
-
-	return out
-
+		return world
+	return SDQL_expression(world, tree)
 
 /proc/SDQL_get_all(type, location)
 	var/list/out = list()
 
-	if(type == "*")
-		for(var/datum/d in location)
-			out += d
-
-		return out
+// If only a single object got returned, wrap it into a list so the for loops run on it.
+	if(!islist(location) && location != world)
+		location = list(location)
 
 	type = text2path(type)
+	var/typecache = typecacheof(type)
 
 	if(ispath(type, /mob))
 		for(var/mob/d in location)
-			if(istype(d, type))
+			if(typecache[d.type])
 				out += d
 			CHECK_TICK
 
 	else if(ispath(type, /turf))
 		for(var/turf/d in location)
-			if(istype(d, type))
+			if(typecache[d.type])
 				out += d
 			CHECK_TICK
 
 	else if(ispath(type, /obj))
 		for(var/obj/d in location)
-			if(istype(d, type))
+			if(typecache[d.type])
 				out += d
 			CHECK_TICK
 
 	else if(ispath(type, /area))
 		for(var/area/d in location)
-			if(istype(d, type))
+			if(typecache[d.type])
 				out += d
 			CHECK_TICK
 
 	else if(ispath(type, /atom))
 		for(var/atom/d in location)
-			if(istype(d, type))
-				out += d
-			CHECK_TICK
-
-	else
-		for(var/datum/d in location)
-			if(istype(d, type))
+			if(typecache[d.type])
 				out += d
 			CHECK_TICK
+	else if(ispath(type, /datum))
+		if(location == world) //snowflake for byond shortcut
+			for(var/datum/d) //stupid byond trick to have it not return atoms to make this less laggy
+				if(typecache[d.type])
+					out += d
+				CHECK_TICK
+		else
+			for(var/datum/d in location)
+				if(typecache[d.type])
+					out += d
+				CHECK_TICK
 
 	return out
 
@@ -304,19 +288,19 @@
 		if(op != "")
 			switch(op)
 				if("+")
-					result += val
+					result = (result + val)
 				if("-")
-					result -= val
+					result = (result - val)
 				if("*")
-					result *= val
+					result = (result * val)
 				if("/")
-					result /= val
+					result = (result / val)
 				if("&")
-					result &= val
+					result = (result & val)
 				if("|")
-					result |= val
+					result = (result | val)
 				if("^")
-					result ^= val
+					result = (result ^ val)
 				if("=", "==")
 					result = (result == val)
 				if("!=", "<>")
@@ -334,7 +318,7 @@
 				if("or", "||")
 					result = (result || val)
 				else
-					usr << "<span class='danger'>SDQL2: Unknown op [op]</span>"
+					to_chat(usr, "<span class='danger'>SDQL2: Unknown op [op]</span>")
 					result = null
 		else
 			result = val
@@ -375,29 +359,91 @@
 	else if(copytext(expression[i], 1, 2) in list("'", "\""))
 		val = copytext(expression[i], 2, length(expression[i]))
 
+	else if(expression[i] == "\[")
+		var/list/expressions_list = expression[++i]
+		val = list()
+		for(var/list/expression_list in expressions_list)
+			var/result = SDQL_expression(object, expression_list)
+			var/assoc
+			if(expressions_list[expression_list] != null)
+				assoc = SDQL_expression(object, expressions_list[expression_list])
+			if(assoc != null)
+				// Need to insert the key like this to prevent duplicate keys fucking up.
+				var/list/dummy = list()
+				dummy[result] = assoc
+				result = dummy
+			val += result
 	else
-		val = SDQL_var(object, expression, i)
+		val = SDQL_var(object, expression, i, object)
 		i = expression.len
 
 	return list("val" = val, "i" = i)
 
-/proc/SDQL_var(datum/object, list/expression, start = 1)
-
-	if(expression[start] in object.vars)
-
-		if(start < expression.len && expression[start + 1] == ".")
-			return SDQL_var(object.vars[expression[start]], expression[start + 2])
-
-		else
-			return object.vars[expression[start]]
-
-	else
+/proc/SDQL_var(datum/object, list/expression, start = 1, source)
+	var/v
+	var/static/list/exclude = list("usr", "src", "marked", "global")
+	var/long = start < expression.len
+	if(object == world && long && expression[start + 1] == ".")
+		to_chat(usr, "Sorry, but global variables are not supported at the moment.")
 		return null
+	else if(expression [start] == "{" && long)
+		if(lowertext(copytext(expression[start + 1], 1, 3)) != "0x")
+			to_chat(usr, "<span class='danger'>Invalid pointer syntax: [expression[start + 1]]</span>")
+			return null
+		v = locate("\[[expression[start + 1]]]")
+		if(!v)
+			to_chat(usr, "<span class='danger'>Invalid pointer: [expression[start + 1]]</span>")
+			return null
+		start++
+	else if((!long || expression[start + 1] == ".") && (expression[start] in object.vars))
+		v = object.vars[expression[start]]
+	else if(long && expression[start + 1] == ":" && hascall(object, expression[start]))
+		v = expression[start]
+	else if(!long || expression[start + 1] == ".")
+		switch(expression[start])
+			if("usr")
+				v = usr
+			if("src")
+				v = source
+			if("marked")
+				if(usr.client && usr.client.holder && usr.client.holder.marked_datum)
+					v = usr.client.holder.marked_datum
+				else
+					return null
+			if("global")
+				v = world
+			else
+				return null
+	else if(object == world) // Shitty ass hack kill me.
+		v = expression[start]
+	if(long)
+		if(expression[start + 1] == ".")
+			return SDQL_var(v, expression[start + 2], source = source)
+		else if(expression[start + 1] == ":")
+			return SDQL_function(object, v, expression[start + 2], source)
+		else if(expression[start + 1] == "\[" && islist(v))
+			var/list/L = v
+			var/index = SDQL_expression(source, expression[start + 2])
+			if(isnum(index) && (!IsInteger(index) || L.len < index))
+				to_chat(usr, "<span class='danger'>Invalid list index: [index]</span>")
+				return null
+			return L[index]
+	return v
+
+/proc/SDQL_function(var/datum/object, var/procname, var/list/arguments, source)
+	set waitfor = FALSE
+	var/list/new_args = list()
+	for(var/arg in arguments)
+		new_args += SDQL_expression(source, arg)
+	if(object == world) // Global proc.
+		procname = "/proc/[procname]"
+		return call(procname)(arglist(new_args))
+	return call(object, procname)(arglist(new_args)) // Spawn in case the function sleeps.
 
 /proc/SDQL2_tokenize(query_text)
 
 	var/list/whitespace = list(" ", "\n", "\t")
-	var/list/single = list("(", ")", ",", "+", "-", ".", ";")
+	var/list/single = list("(", ")", ",", "+", "-", ".", ";", "{", "}", "\[", "]", ":")
 	var/list/multi = list(
 					"=" = list("", "="),
 					"<" = list("", "=", ">"),
@@ -439,7 +485,7 @@
 
 		else if(char == "'")
 			if(word != "")
-				usr << "\red SDQL2: You have an error in your SDQL syntax, unexpected ' in query: \"<font color=gray>[query_text]</font>\" following \"<font color=gray>[word]</font>\". Please check your syntax, and try again."
+				to_chat(usr, "\red SDQL2: You have an error in your SDQL syntax, unexpected ' in query: \"<font color=gray>[query_text]</font>\" following \"<font color=gray>[word]</font>\". Please check your syntax, and try again.")
 				return null
 
 			word = "'"
@@ -459,7 +505,7 @@
 					word += char
 
 			if(i > len)
-				usr << "\red SDQL2: You have an error in your SDQL syntax, unmatched ' in query: \"<font color=gray>[query_text]</font>\". Please check your syntax, and try again."
+				to_chat(usr, "\red SDQL2: You have an error in your SDQL syntax, unmatched ' in query: \"<font color=gray>[query_text]</font>\". Please check your syntax, and try again.")
 				return null
 
 			query_list += "[word]'"
@@ -467,7 +513,7 @@
 
 		else if(char == "\"")
 			if(word != "")
-				usr << "\red SDQL2: You have an error in your SDQL syntax, unexpected \" in query: \"<font color=gray>[query_text]</font>\" following \"<font color=gray>[word]</font>\". Please check your syntax, and try again."
+				to_chat(usr, "\red SDQL2: You have an error in your SDQL syntax, unexpected \" in query: \"<font color=gray>[query_text]</font>\" following \"<font color=gray>[word]</font>\". Please check your syntax, and try again.")
 				return null
 
 			word = "\""
@@ -487,7 +533,7 @@
 					word += char
 
 			if(i > len)
-				usr << "\red SDQL2: You have an error in your SDQL syntax, unmatched \" in query: \"<font color=gray>[query_text]</font>\". Please check your syntax, and try again."
+				to_chat(usr, "\red SDQL2: You have an error in your SDQL syntax, unmatched \" in query: \"<font color=gray>[query_text]</font>\". Please check your syntax, and try again.")
 				return null
 
 			query_list += "[word]\""
