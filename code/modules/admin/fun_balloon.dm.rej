diff a/code/modules/admin/fun_balloon.dm b/code/modules/admin/fun_balloon.dm	(rejected hunks)
@@ -15,7 +15,7 @@
 	. = ..()
 
 /obj/effect/fun_balloon/process()
-	if(!popped && check() && !qdeleted(src))
+	if(!popped && check() && !QDELETED(src))
 		popped = TRUE
 		effect()
 		pop()
@@ -56,12 +56,11 @@
 		var/mob/dead/observer/ghost = pick_n_take(candidates)
 		var/mob/living/body = pick_n_take(bodies)
 
-		body << "Your mob has been taken over by a ghost!"
-		message_admins("[key_name_admin(ghost)] has taken control \
-			of ([key_name_admin(body)])")
+		to_chat(body, "Your mob has been taken over by a ghost!")
+		message_admins("[key_name_admin(ghost)] has taken control of ([key_name_admin(body)])")
 		body.ghostize(0)
 		body.key = ghost.key
-		PoolOrNew(/obj/effect/overlay/temp/sparkle, body)
+		new /obj/effect/overlay/temp/gravpush(get_turf(body))
 
 /obj/effect/fun_balloon/sentience/emergency_shuttle
 	name = "shuttle sentience fun balloon"
@@ -80,9 +79,9 @@
 /obj/effect/fun_balloon/scatter/effect()
 	for(var/mob/living/M in range(effect_range, get_turf(src)))
 		var/turf/T = find_safe_turf()
-		PoolOrNew(/obj/effect/overlay/temp/sparkle, M)
+		new /obj/effect/overlay/temp/gravpush(get_turf(M))
 		M.forceMove(T)
-		M << "<span class='notice'>Pop!</span>"
+		to_chat(M, "<span class='notice'>Pop!</span>")
 
 /obj/effect/station_crash
 	name = "station crash"
@@ -101,44 +100,6 @@
 	qdel(src)
 
 
-//Luxury Shuttle Blockers
-
-/obj/effect/forcefield/luxury_shuttle
-	var/threshhold = 500
-	var/list/approved_passengers = list()
-
-/obj/effect/forcefield/luxury_shuttle/CanPass(atom/movable/mover, turf/target, height=0)
-	if(mover in approved_passengers)
-		return 1
-
-	if(!isliving(mover)) //No stowaways
-		return 0
-
-	var/total_cash = 0
-	var/list/counted_money = list()
-
-	for(var/obj/item/weapon/coin/C in mover)
-		total_cash += C.value
-		counted_money += C
-		if(total_cash >= threshhold)
-			break
-	for(var/obj/item/stack/spacecash/S in mover)
-		total_cash += S.value * S.amount
-		counted_money += S
-		if(total_cash >= threshhold)
-			break
-
-	if(total_cash >= threshhold)
-		for(var/obj/I in counted_money)
-			qdel(I)
-
-		mover << "Thank you for your payment! Please enjoy your flight."
-		approved_passengers += mover
-		return 1
-	else
-		mover << "You don't have enough money to enter the main shuttle. You'll have to fly coach."
-		return 0
-
 //Shuttle Build
 
 /obj/effect/shuttle_build
@@ -150,4 +111,69 @@
 
 /obj/effect/shuttle_build/New()
 	SSshuttle.emergency.dock(SSshuttle.getDock("emergency_home"))
-	qdel(src)
\ No newline at end of file
+	qdel(src)
+
+//Arena
+
+/obj/effect/forcefield/arena_shuttle
+	name = "portal"
+	var/list/warp_points = list()
+
+
+/obj/effect/forcefield/arena_shuttle/Bumped(mob/M as mob|obj)
+	if(!warp_points.len)
+		warp_points = get_area_turfs(/area/shuttle/escape)
+		for(var/turf/T in warp_points)
+			for(var/atom/movable/AM in T)
+				if(AM.density && AM.anchored)
+					warp_points -= T
+					break
+	if(!isliving(M))
+		return
+	else
+		var/mob/living/L = M
+		if(L.pulling && istype(L.pulling, /obj/item/bodypart/head))
+			to_chat(L, "Your offering is accepted. You may pass.")
+			qdel(L.pulling)
+			var/turf/LA = pick(warp_points)
+			L.forceMove(LA)
+			L.hallucination = 0
+			to_chat(L, "<span class='reallybig redtext'>The battle is won. Your bloodlust subsides.</span>")
+			for(var/obj/item/weapon/twohanded/required/chainsaw/doomslayer/chainsaw in L)
+				qdel(chainsaw)
+		else
+			to_chat(L, "You are not yet worthy of passing. Drag a severed head to the barrier to be allowed entry to the hall of champions.")
+
+/obj/effect/landmark/shuttle_arena_safe
+	name = "hall of champions"
+	desc = "For the winners."
+
+/obj/effect/landmark/shuttle_arena_entrance
+	name = "the arena"
+	desc = "A lava filled battlefield."
+
+
+/obj/effect/forcefield/arena_shuttle_entrance
+	name = "portal"
+	var/list/warp_points = list()
+
+/obj/effect/forcefield/arena_shuttle_entrance/Bumped(mob/M as mob|obj)
+	if(!warp_points.len)
+		for(var/obj/effect/landmark/shuttle_arena_entrance/S in landmarks_list)
+			warp_points |= S
+	if(!isliving(M))
+		return
+
+	var/obj/effect/landmark/LA = pick(warp_points)
+
+	M.forceMove(get_turf(LA))
+	to_chat(M, "<span class='reallybig redtext'>You're trapped in a deadly arena! To escape, you'll need to drag a severed head to the escape portals.</span>")
+	spawn()
+		var/obj/effect/mine/pickup/bloodbath/B = new(M)
+		B.mineEffect(M)
+
+
+/area/shuttle_arena
+	name = "arena"
+	has_gravity = 1
+	requires_power = 0
