diff a/code/modules/power/singularity/collector.dm b/code/modules/power/singularity/collector.dm	(rejected hunks)
@@ -49,60 +49,59 @@ var/global/list/rad_collectors = list()
 			investigate_log("turned [active?"<font color='green'>on</font>":"<font color='red'>off</font>"] by [user.key]. [loaded_tank?"Fuel: [round(loaded_tank.air_contents.gases["plasma"][MOLES]/0.29)]%":"<font color='red'>It is empty</font>"].","singulo")
 			return
 		else
-			user << "<span class='warning'>The controls are locked!</span>"
+			to_chat(user, "<span class='warning'>The controls are locked!</span>")
 			return
 ..()
 
+/obj/machinery/power/rad_collector/can_be_unfasten_wrench(mob/user, silent)
+	if(loaded_tank)
+		if(!silent)
+			to_chat(user, "<span class='warning'>Remove the plasma tank first!</span>")
+		return FAILED_UNFASTEN
+	return ..()
+
+/obj/machinery/power/rad_collector/default_unfasten_wrench(mob/user, obj/item/weapon/wrench/W, time = 20)
+	. = ..()
+	if(. == SUCCESSFUL_UNFASTEN)
+		if(anchored)
+			connect_to_network()
+		else
+			disconnect_from_network()
 
 /obj/machinery/power/rad_collector/attackby(obj/item/W, mob/user, params)
 	if(istype(W, /obj/item/device/multitool))
-		user << "<span class='notice'>The [W.name] detects that [last_power]W were recently produced.</span>"
+		to_chat(user, "<span class='notice'>The [W.name] detects that [last_power]W were recently produced.</span>")
 		return 1
 	else if(istype(W, /obj/item/device/analyzer) && loaded_tank)
 		atmosanalyzer_scan(loaded_tank.air_contents, user)
 	else if(istype(W, /obj/item/weapon/tank/internals/plasma))
 		if(!anchored)
-			user << "<span class='warning'>The [src] needs to be secured to the floor first!</span>"
+			to_chat(user, "<span class='warning'>The [src] needs to be secured to the floor first!</span>")
 			return 1
 		if(loaded_tank)
-			user << "<span class='warning'>There's already a plasma tank loaded!</span>"
+			to_chat(user, "<span class='warning'>There's already a plasma tank loaded!</span>")
 			return 1
 		if(!user.drop_item())
 			return 1
 		loaded_tank = W
-		W.loc = src
+		W.forceMove(src)
 		update_icons()
 	else if(istype(W, /obj/item/weapon/crowbar))
-		if(loaded_tank && !src.locked)
+		if(loaded_tank && !locked)
 			eject()
 			return 1
 	else if(istype(W, /obj/item/weapon/wrench))
-		if(loaded_tank)
-			user << "<span class='warning'>Remove the plasma tank first!</span>"
-			return 1
-		if(!anchored && !isinspace())
-			playsound(src.loc, W.usesound, 75, 1)
-			anchored = 1
-			user.visible_message("[user.name] secures the [src.name].", \
-				"<span class='notice'>You secure the external bolts.</span>", \
-				"<span class='italics'>You hear a ratchet.</span>")
-			connect_to_network()
-		else if(anchored)
-			playsound(src.loc, W.usesound, 75, 1)
-			anchored = 0
-			user.visible_message("[user.name] unsecures the [src.name].", \
-				"<span class='notice'>You unsecure the external bolts.</span>", \
-				"<span class='italics'>You hear a ratchet.</span>")
-			disconnect_from_network()
+		default_unfasten_wrench(user, W, 0)
+		return 1
 	else if(W.GetID())
 		if(allowed(user))
 			if(active)
 				locked = !locked
-				user << "<span class='notice'>You [locked ? "lock" : "unlock"] the controls.</span>"
+				to_chat(user, "<span class='notice'>You [locked ? "lock" : "unlock"] the controls.</span>")
 			else
-				user << "<span class='warning'>The controls can only be locked when \the [src] is active!</span>"
+				to_chat(user, "<span class='warning'>The controls can only be locked when \the [src] is active!</span>")
 		else
-			user << "<span class='danger'>Access denied.</span>"
+			to_chat(user, "<span class='danger'>Access denied.</span>")
 			return 1
 	else
 		return ..()
@@ -130,7 +129,7 @@ var/global/list/rad_collectors = list()
 /obj/machinery/power/rad_collector/proc/receive_pulse(pulse_strength)
 	if(loaded_tank && active)
 		var/power_produced = loaded_tank.air_contents.gases["plasma"] ? loaded_tank.air_contents.gases["plasma"][MOLES] : 0
-		power_produced *= pulse_strength*20
+		power_produced *= pulse_strength*10
 		add_avail(power_produced)
 		last_power = power_produced
 		return
