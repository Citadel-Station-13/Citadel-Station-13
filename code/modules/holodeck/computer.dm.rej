diff a/code/modules/holodeck/computer.dm b/code/modules/holodeck/computer.dm	(rejected hunks)
@@ -54,35 +54,35 @@
 	// the following is necessary for power reasons
 	var/area/AS = get_area(src)
 	if(istype(AS,/area/holodeck))
-		world.log << "### MAPPING ERROR"
-		world.log << "Holodeck computer cannot be in a holodeck."
-		world.log << "This would cause circular power dependency."
+		log_world("### MAPPING ERROR")
+		log_world("Holodeck computer cannot be in a holodeck.")
+		log_world("This would cause circular power dependency.")
 		qdel(src)  // todo handle constructed computers
-		return
+		return	//l-lewd...
 	else
 		linked.linked = src // todo detect multiple/constructed computers
-
-	if(ticker && ticker.current_state >= GAME_STATE_PLAYING)
-		initialize()
 	..()
 
-/obj/machinery/computer/holodeck/initialize()
-	program_cache = list()
-	emag_programs = list()
-	for(var/typekey in subtypesof(program_type))
-		var/area/holodeck/A = locate(typekey)
-		if(!A || A == offline_program) continue
-		if(A.contents.len == 0) continue // not loaded
-		if(A.restricted)
-			emag_programs += A
-		else
-			program_cache += A
-		if(typekey == init_program)
-			load_program(A,force=1)
-	if(random_program && program_cache.len && init_program == null)
-		load_program(pick(program_cache),force=1)
-	else if(!program)
-		load_program(offline_program)
+/obj/machinery/computer/holodeck/Initialize(mapload)
+	. = mapload	//late-initialize, area_copy need turfs to have air
+	if(!mapload)
+		..()
+		program_cache = list()
+		emag_programs = list()
+		for(var/typekey in subtypesof(program_type))
+			var/area/holodeck/A = locate(typekey)
+			if(!A || A == offline_program) continue
+			if(A.contents.len == 0) continue // not loaded
+			if(A.restricted)
+				emag_programs += A
+			else
+				program_cache += A
+			if(typekey == init_program)
+				load_program(A,force=1)
+		if(random_program && program_cache.len && init_program == null)
+			load_program(pick(program_cache),force=1)
+		else if(!program)
+			load_program(offline_program)
 
 /obj/machinery/computer/holodeck/power_change()
 	..()
@@ -150,8 +150,6 @@
 /obj/machinery/computer/holodeck/Topic(href, list/href_list)
 	if(..())
 		return
-	if(!Adjacent(usr) && !issilicon(usr))
-		return
 	usr.set_machine(src)
 	add_fingerprint(usr)
 	if(href_list["loadarea"])
@@ -182,28 +180,29 @@
 /obj/machinery/computer/holodeck/emag_act(mob/user as mob)
 	if(!emagged)
 		if(!emag_programs.len)
-			user << "[src] does not seem to have a card swipe port.  It must be an inferior model."
+			to_chat(user, "[src] does not seem to have a card swipe port.  It must be an inferior model.")
 			return
 		playsound(loc, 'sound/effects/sparks4.ogg', 75, 1)
 		emagged = 1
-		user << "<span class='warning'>You vastly increase projector power and override the safety and security protocols.</span>"
-		user << "Warning.  Automatic shutoff and derezing protocols have been corrupted.  Please call Nanotrasen maintenance and do not use the simulator."
+		to_chat(user, "<span class='warning'>You vastly increase projector power and override the safety and security protocols.</span>")
+		to_chat(user, "Warning.  Automatic shutoff and derezing protocols have been corrupted.  Please call Nanotrasen maintenance and do not use the simulator.")
 		log_game("[key_name(user)] emagged the Holodeck Control Console")
 		updateUsrDialog()
 		nerf(!emagged)
 
 /obj/machinery/computer/holodeck/Destroy()
 	emergency_shutdown()
-	..()
+	linked.linked = null
+	return ..()
 
 /obj/machinery/computer/holodeck/emp_act(severity)
 	emergency_shutdown()
-	..()
+	return ..()
 
 /obj/machinery/computer/holodeck/ex_act(severity, target)
 	emergency_shutdown()
-	..()
+	return ..()
 
 /obj/machinery/computer/holodeck/blob_act(obj/structure/blob/B)
 	emergency_shutdown()
-	..()
\ No newline at end of file
+	return ..()
\ No newline at end of file
