diff a/code/modules/recycling/disposal-unit.dm b/code/modules/recycling/disposal-unit.dm	(rejected hunks)
@@ -46,7 +46,8 @@
 		mode = PRESSURE_OFF
 		flush = 0
 	else
-		mode = PRESSURE_ON
+		if(initial(mode))
+			mode = PRESSURE_ON
 		flush = initial(flush)
 		trunk.linked = src // link the pipe trunk to self
 
@@ -60,14 +61,18 @@
 	if(current_size >= STAGE_FIVE)
 		deconstruct()
 
-/obj/machinery/disposal/initialize()
-	//this will get a copy of the air turf and take a SEND PRESSURE amount of air from it
-	var/atom/L = loc
-	var/datum/gas_mixture/env = new
-	env.copy_from(L.return_air())
-	var/datum/gas_mixture/removed = env.remove(SEND_PRESSURE + 1)
-	air_contents.merge(removed)
-	trunk_check()
+/obj/machinery/disposal/Initialize(mapload)
+	. = mapload	//late-initialize, we need turfs to have air
+	if(initialized)	//will only be run on late mapload initialization
+		//this will get a copy of the air turf and take a SEND PRESSURE amount of air from it
+		var/atom/L = loc
+		var/datum/gas_mixture/env = new
+		env.copy_from(L.return_air())
+		var/datum/gas_mixture/removed = env.remove(SEND_PRESSURE + 1)
+		air_contents.merge(removed)
+		trunk_check()
+	else
+		..()
 
 /obj/machinery/disposal/attackby(obj/item/I, mob/user, params)
 	add_fingerprint(user)
@@ -78,17 +83,17 @@
 			else
 				mode = PRESSURE_OFF
 			playsound(src.loc, I.usesound, 50, 1)
-			user << "<span class='notice'>You [mode == SCREWS_OUT ? "remove":"attach"] the screws around the power connection.</span>"
+			to_chat(user, "<span class='notice'>You [mode == SCREWS_OUT ? "remove":"attach"] the screws around the power connection.</span>")
 			return
 		else if(istype(I,/obj/item/weapon/weldingtool) && mode == SCREWS_OUT)
 			var/obj/item/weapon/weldingtool/W = I
 			if(W.remove_fuel(0,user))
 				playsound(src.loc, 'sound/items/Welder2.ogg', 100, 1)
-				user << "<span class='notice'>You start slicing the floorweld off \the [src]...</span>"
+				to_chat(user, "<span class='notice'>You start slicing the floorweld off \the [src]...</span>")
 				if(do_after(user,20*I.toolspeed, target = src) && mode == SCREWS_OUT)
 					if(!W.isOn())
 						return
-					user << "<span class='notice'>You slice the floorweld off \the [src].</span>"
+					to_chat(user, "<span class='notice'>You slice the floorweld off \the [src].</span>")
 					deconstruct()
 			return
 
@@ -118,7 +123,7 @@
 	if(target.buckled || target.has_buckled_mobs())
 		return
 	if(target.mob_size > MOB_SIZE_HUMAN)
-		user << "<span class='warning'>[target] doesn't fit inside [src]!</span>"
+		to_chat(user, "<span class='warning'>[target] doesn't fit inside [src]!</span>")
 		return
 	add_fingerprint(user)
 	if(user == target)
@@ -168,7 +173,7 @@
 // human interact with machine
 /obj/machinery/disposal/attack_hand(mob/user)
 	if(user && user.loc == src)
-		usr << "<span class='warning'>You cannot reach the controls from inside!</span>"
+		to_chat(usr, "<span class='warning'>You cannot reach the controls from inside!</span>")
 		return
 	interact(user, 0)
 
@@ -192,7 +197,7 @@
 		playsound(src, 'sound/machines/disposalflush.ogg', 50, 0, 0)
 		last_sound = world.time
 	sleep(5)
-	if(qdeleted(src))
+	if(QDELETED(src))
 		return
 	var/obj/structure/disposalholder/H = new()
 	newHolderDestination(H)
@@ -227,7 +232,7 @@
 
 			AM.forceMove(T)
 			AM.pipe_eject(0)
-			AM.throw_at_fast(target, 5, 1)
+			AM.throw_at(target, 5, 1)
 
 		H.vent_gas(loc)
 		qdel(H)
@@ -270,7 +275,7 @@
 /obj/machinery/disposal/bin/attackby(obj/item/I, mob/user, params)
 	if(istype(I, /obj/item/weapon/storage/bag/trash))
 		var/obj/item/weapon/storage/bag/trash/T = I
-		user << "<span class='warning'>You empty the bag.</span>"
+		to_chat(user, "<span class='warning'>You empty the bag.</span>")
 		for(var/obj/item/O in T.contents)
 			T.remove_from_storage(O,src)
 		T.update_icon()
@@ -285,7 +290,7 @@
 	if(stat & BROKEN)
 		return
 	if(user.loc == src)
-		user << "<span class='warning'>You cannot reach the controls from inside!</span>"
+		to_chat(user, "<span class='warning'>You cannot reach the controls from inside!</span>")
 		return
 	ui = SStgui.try_update_ui(user, src, ui_key, ui, force_open)
 	if(!ui)
@@ -392,7 +397,7 @@
 	updateDialog()
 
 	if(flush && air_contents.return_pressure() >= SEND_PRESSURE) // flush can happen even without power
-		addtimer(src, "flush", 0)
+		INVOKE_ASYNC(src, .proc/flush)
 
 	if(stat & NOPOWER) // won't charge if no power
 		return
@@ -470,7 +475,7 @@
 	else if(istype(AM, /mob))
 		var/mob/M = AM
 		if(prob(2)) // to prevent mobs being stuck in infinite loops
-			M << "<span class='warning'>You hit the edge of the chute.</span>"
+			to_chat(M, "<span class='warning'>You hit the edge of the chute.</span>")
 			return
 		M.forceMove(src)
 	flush()
