diff a/code/modules/mob/living/silicon/robot/robot_modules.dm b/code/modules/mob/living/silicon/robot/robot_modules.dm	(rejected hunks)
@@ -1,41 +1,67 @@
 /obj/item/weapon/robot_module
-	name = "robot module"
+	name = "Default"
 	icon = 'icons/obj/module.dmi'
 	icon_state = "std_module"
 	w_class = 100
 	item_state = "electronic"
 	flags = CONDUCT
 
-	var/list/modules = list()
-	var/obj/item/emag = null
+	var/list/basic_modules = list() //a list of paths, converted to a list of instances on New()
+	var/list/emag_modules = list() //ditto
+	var/list/ratvar_modules = list() //ditto ditto
+	var/list/modules = list() //holds all the usable modules
+	var/list/added_modules = list() //modules not inherient to the robot module, are kept when the module changes
 	var/list/storages = list()
 
+	var/cyborg_base_icon = "robot" //produces the icon for the borg and, if no special_light_key is set, the lights
+	var/special_light_key //if we want specific lights, use this instead of copying lights in the dmi
+
+	var/moduleselect_icon = "nomod"
+
+	var/can_be_pushed = TRUE
+	var/magpulsing = FALSE
+
+	var/did_feedback = FALSE
+	var/feedback_key
+
+/obj/item/weapon/robot_module/New()
+	..()
+	for(var/i in basic_modules)
+		var/obj/item/I = new i(src)
+		basic_modules += I
+		basic_modules -= i
+	for(var/i in emag_modules)
+		var/obj/item/I = new i(src)
+		emag_modules += I
+		emag_modules -= i
+	for(var/i in ratvar_modules)
+		var/obj/item/I = new i(src)
+		ratvar_modules += I
+		ratvar_modules -= i
+	rebuild_modules()
+
 /obj/item/weapon/robot_module/Destroy()
+	basic_modules.Cut()
+	emag_modules.Cut()
+	ratvar_modules.Cut()
 	modules.Cut()
-	emag = null
+	added_modules.Cut()
 	storages.Cut()
 	return ..()
 
 /obj/item/weapon/robot_module/emp_act(severity)
-	if(modules)
-		for(var/obj/O in modules)
-			O.emp_act(severity)
-	if(emag)
-		emag.emp_act(severity)
+	for(var/obj/O in modules)
+		O.emp_act(severity)
 	..()
-	return
 
 /obj/item/weapon/robot_module/proc/get_usable_modules()
 	. = modules.Copy()
-	var/mob/living/silicon/robot/R = loc
-	if(R.emagged)
-		. += emag
 
 /obj/item/weapon/robot_module/proc/get_inactive_modules()
 	. = list()
 	var/mob/living/silicon/robot/R = loc
 	for(var/m in get_usable_modules())
-		if((m != R.module_state_1) && (m != R.module_state_2) && (m != R.module_state_3))
+		if(!(m in R.held_items))
 			. += m
 
 /obj/item/weapon/robot_module/proc/get_or_create_estorage(var/storage_type)
@@ -45,7 +71,7 @@
 
 	return new storage_type(src)
 
-/obj/item/weapon/robot_module/proc/add_module(var/obj/item/I)
+/obj/item/weapon/robot_module/proc/add_module(obj/item/I, nonstandard, requires_rebuild)
 	if(istype(I, /obj/item/stack))
 		var/obj/item/stack/S = I
 
@@ -58,6 +84,11 @@
 			S.cost = 500
 			S.source = get_or_create_estorage(/datum/robot_energy_storage/glass)
 
+		else if(istype(S, /obj/item/stack/sheet/rglass/cyborg))
+			var/obj/item/stack/sheet/rglass/cyborg/G = S
+			G.source = get_or_create_estorage(/datum/robot_energy_storage/metal)
+			G.glasource = get_or_create_estorage(/datum/robot_energy_storage/glass)
+
 		else if(istype(S, /obj/item/stack/medical))
 			S.cost = 250
 			S.source = get_or_create_estorage(/datum/robot_energy_storage/medical)
@@ -74,15 +105,26 @@
 		var/obj/item/weapon/restraints/handcuffs/cable/C = I
 		C.wirestorage = get_or_create_estorage(/datum/robot_energy_storage/wire)
 
-	I.loc = src
+	if(I.loc != src)
+		I.forceMove(src)
 	modules += I
-	rebuild()
-
-/obj/item/weapon/robot_module/New()
-	modules += new /obj/item/device/assembly/flash/cyborg(src)
-	emag = new /obj/item/toy/sword(src)
-	emag.name = "Placeholder Emag Item"
-	return
+	I.flags |= NODROP
+	I.mouse_opacity = 2
+	if(nonstandard)
+		added_modules += I
+	if(requires_rebuild)
+		rebuild_modules()
+	return I
+
+/obj/item/weapon/robot_module/proc/remove_module(obj/item/I, delete_after)
+	basic_modules -= I
+	modules -= I
+	emag_modules -= I
+	ratvar_modules -= I
+	added_modules -= I
+	rebuild_modules()
+	if(delete_after)
+		qdel(I)
 
 /obj/item/weapon/robot_module/proc/respawn_consumable(mob/living/silicon/robot/R, coeff = 1)
 	for(var/datum/robot_energy_storage/st in storages)
@@ -105,128 +147,128 @@
 
 	R.toner = R.tonermax
 
-/obj/item/weapon/robot_module/proc/rebuild()//Rebuilds the list so it's possible to add/remove items from the module
-	var/list/temp_list = modules
+/obj/item/weapon/robot_module/proc/rebuild_modules() //builds the usable module list from the modules we have
+	var/mob/living/silicon/robot/R = loc
+	var/held_modules = R.held_items.Copy()
+	R.uneq_all()
 	modules = list()
-	for(var/obj/O in temp_list)
-		if(O)
-			modules += O
-	fix_modules()
-
-/obj/item/weapon/robot_module/proc/fix_modules()
-	for(var/obj/item/I in modules)
-		I.flags |= NODROP
-		I.mouse_opacity = 2
-	if(emag)
-		emag.flags |= NODROP
-		emag.mouse_opacity = 2
-
-/obj/item/weapon/robot_module/proc/on_emag()
-	return
+	for(var/obj/item/I in basic_modules)
+		add_module(I, FALSE, FALSE)
+	if(R.emagged)
+		for(var/obj/item/I in emag_modules)
+			add_module(I, FALSE, FALSE)
+	if(is_servant_of_ratvar(R))
+		for(var/obj/item/I in ratvar_modules)
+			add_module(I, FALSE, FALSE)
+	for(var/obj/item/I in added_modules)
+		add_module(I, FALSE, FALSE)
+	for(var/i in held_modules)
+		R.activate_module(i)
+	if(R.hud_used)
+		R.hud_used.update_robot_modules_display()
+
+/obj/item/weapon/robot_module/proc/transform_to(new_module_type)
+	var/mob/living/silicon/robot/R = loc
+	var/obj/item/weapon/robot_module/RM = new new_module_type(R)
+	if(!RM.be_transformed_to(src))
+		qdel(RM)
+		return
+	R.module = RM
+	addtimer(RM, "do_transform_animation", 0)
+	qdel(src)
+	return RM
+
+/obj/item/weapon/robot_module/proc/be_transformed_to(obj/item/weapon/robot_module/old_module)
+	for(var/i in old_module.added_modules)
+		added_modules += i
+		old_module.added_modules -= i
+	did_feedback = old_module.did_feedback
+	return TRUE
+
+/obj/item/weapon/robot_module/proc/do_transform_animation()
+	var/mob/living/silicon/robot/R = loc
+	var/obj/effect/overlay/temp/decoy/fading/fivesecond/ANM = PoolOrNew(/obj/effect/overlay/temp/decoy/fading/fivesecond, list(R.loc, R))
+	ANM.layer = R.layer - 0.01
+	PoolOrNew(/obj/effect/overlay/temp/small_smoke, R.loc)
+	R.update_headlamp()
+	R.alpha = 0
+	animate(R, alpha = 255, time = 50)
+	var/prev_lockcharge = R.lockcharge
+	R.SetLockdown(1)
+	sleep(2)
+	for(var/i in 1 to 4)
+		playsound(R, pick('sound/items/drill_use.ogg', 'sound/items/jaws_cut.ogg', 'sound/items/jaws_pry.ogg', 'sound/items/Welder.ogg', 'sound/items/Ratchet.ogg'), 80, 1, -1)
+		sleep(12)
+	if(!prev_lockcharge)
+		R.SetLockdown(0)
+	R.notify_ai(2)
+	R.update_module_innate()
+	if(R.hud_used)
+		R.hud_used.update_robot_modules_display()
+	if(feedback_key && !did_feedback)
+		feedback_inc(feedback_key, 1)
 
 /obj/item/weapon/robot_module/standard
-	name = "standard robot module"
-
-/obj/item/weapon/robot_module/standard/New()
-	..()
-	modules += new /obj/item/weapon/reagent_containers/borghypo/epi(src)
-	modules += new /obj/item/device/healthanalyzer(src)
-
-	modules += new /obj/item/weapon/weldingtool/largetank/cyborg(src)
-	modules += new /obj/item/weapon/wrench/cyborg(src)
-	modules += new /obj/item/weapon/crowbar/cyborg(src)
-	add_module(new /obj/item/stack/sheet/metal/cyborg())
-	modules += new /obj/item/weapon/extinguisher(src)
-
-	modules += new /obj/item/weapon/pickaxe(src)
-	modules += new /obj/item/device/t_scanner/adv_mining_scanner(src)
-
-	modules += new /obj/item/weapon/restraints/handcuffs/cable/zipties/cyborg(src)
-
-	modules += new /obj/item/weapon/soap/nanotrasen(src)
-
-	modules += new /obj/item/borg/cyborghug(src)
-
-	emag = new /obj/item/weapon/melee/energy/sword/cyborg(src)
-	fix_modules()
-
+	name = "Standard"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/weapon/reagent_containers/borghypo/epi, /obj/item/device/healthanalyzer, \
+	/obj/item/weapon/weldingtool/largetank/cyborg, /obj/item/weapon/wrench/cyborg, /obj/item/weapon/crowbar/cyborg, \
+	/obj/item/stack/sheet/metal/cyborg, /obj/item/weapon/extinguisher, /obj/item/weapon/pickaxe, \
+	/obj/item/device/t_scanner/adv_mining_scanner, /obj/item/weapon/restraints/handcuffs/cable/zipties/cyborg, \
+	/obj/item/weapon/soap/nanotrasen, /obj/item/borg/cyborghug)
+	emag_modules = list(/obj/item/weapon/melee/energy/sword/cyborg)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg, /obj/item/clockwork/ratvarian_spear)
+	moduleselect_icon = "standard"
+	feedback_key = "cyborg_standard"
 
 /obj/item/weapon/robot_module/medical
-	name = "medical robot module"
-
-/obj/item/weapon/robot_module/medical/New()
-	..()
-	modules += new /obj/item/device/healthanalyzer(src)
-	modules += new /obj/item/weapon/reagent_containers/borghypo(src)
-	modules += new /obj/item/weapon/reagent_containers/glass/beaker/large(src)
-	modules += new /obj/item/weapon/reagent_containers/dropper(src)
-	modules += new /obj/item/weapon/reagent_containers/syringe(src)
-	modules += new /obj/item/weapon/surgical_drapes(src)
-	modules += new /obj/item/weapon/retractor(src)
-	modules += new /obj/item/weapon/hemostat(src)
-	modules += new /obj/item/weapon/cautery(src)
-	modules += new /obj/item/weapon/surgicaldrill(src)
-	modules += new /obj/item/weapon/scalpel(src)
-	modules += new /obj/item/weapon/circular_saw(src)
-	modules += new /obj/item/weapon/extinguisher/mini(src)
-	modules += new /obj/item/roller/robo(src)
-	modules += new /obj/item/borg/cyborghug(src)
-
-	add_module(new /obj/item/stack/medical/gauze/cyborg())
-
-	emag = new /obj/item/weapon/reagent_containers/borghypo/hacked(src)
-
-	fix_modules()
+	name = "Medical"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/device/healthanalyzer, /obj/item/weapon/reagent_containers/borghypo, \
+	/obj/item/weapon/reagent_containers/glass/beaker/large, /obj/item/weapon/reagent_containers/dropper, \
+	/obj/item/weapon/reagent_containers/syringe, /obj/item/weapon/surgical_drapes, /obj/item/weapon/retractor, \
+	/obj/item/weapon/hemostat, /obj/item/weapon/cautery, /obj/item/weapon/surgicaldrill, /obj/item/weapon/scalpel, \
+	/obj/item/weapon/circular_saw, /obj/item/weapon/extinguisher/mini, /obj/item/roller/robo, /obj/item/borg/cyborghug, \
+	/obj/item/stack/medical/gauze/cyborg)
+	emag_modules = list(/obj/item/weapon/reagent_containers/borghypo/hacked)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/medical)
+	cyborg_base_icon = "medical"
+	moduleselect_icon = "medical"
+	feedback_key = "cyborg_medical"
+	can_be_pushed = FALSE
 
 /obj/item/weapon/robot_module/engineering
-	name = "engineering robot module"
-
-/obj/item/weapon/robot_module/engineering/New()
-	..()
-	modules += new /obj/item/borg/sight/meson(src)
-	emag = new /obj/item/borg/stun(src)
-	modules += new /obj/item/weapon/rcd/borg(src)
-	modules += new /obj/item/weapon/pipe_dispenser(src) //What could possibly go wrong?
-	modules += new /obj/item/weapon/extinguisher(src)
-	modules += new /obj/item/weapon/weldingtool/largetank/cyborg(src)
-	modules += new /obj/item/weapon/screwdriver/cyborg(src)
-	modules += new /obj/item/weapon/wrench/cyborg(src)
-	modules += new /obj/item/weapon/crowbar/cyborg(src)
-	modules += new /obj/item/weapon/wirecutters/cyborg(src)
-	modules += new /obj/item/device/multitool/cyborg(src)
-	modules += new /obj/item/device/t_scanner(src)
-	modules += new /obj/item/device/analyzer(src)
-	modules += new /obj/item/areaeditor/blueprints/cyborg(src)
-
-	add_module(new /obj/item/stack/sheet/metal/cyborg())
-	add_module(new /obj/item/stack/sheet/glass/cyborg())
-
-	var/obj/item/stack/sheet/rglass/cyborg/G = new /obj/item/stack/sheet/rglass/cyborg(src)
-	G.metsource = get_or_create_estorage(/datum/robot_energy_storage/metal)
-	G.glasource = get_or_create_estorage(/datum/robot_energy_storage/glass)
-	add_module(G)
-
-	add_module(new /obj/item/stack/rods/cyborg())
-	add_module(new /obj/item/stack/tile/plasteel/cyborg())
-	add_module(new /obj/item/stack/cable_coil/cyborg(src,MAXCOIL,"red"))
-
-	fix_modules()
+	name = "Engineering"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/borg/sight/meson, /obj/item/weapon/rcd/borg, /obj/item/weapon/pipe_dispenser, \
+	/obj/item/weapon/extinguisher, /obj/item/weapon/weldingtool/largetank/cyborg, /obj/item/weapon/screwdriver/cyborg, \
+	/obj/item/weapon/wrench/cyborg, /obj/item/weapon/crowbar/cyborg, /obj/item/weapon/wirecutters/cyborg, \
+	/obj/item/device/multitool/cyborg, /obj/item/device/t_scanner, /obj/item/device/analyzer, \
+	/obj/item/areaeditor/blueprints/cyborg, /obj/item/stack/sheet/metal/cyborg, /obj/item/stack/sheet/glass/cyborg, \
+	/obj/item/stack/sheet/rglass/cyborg, /obj/item/stack/rods/cyborg, /obj/item/stack/tile/plasteel/cyborg, /obj/item/stack/cable_coil/cyborg)
+	emag_modules = list(/obj/item/borg/stun)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/engineer, /obj/item/clockwork/clockwork_proselytizer/cyborg)
+	cyborg_base_icon = "engineer"
+	moduleselect_icon = "engineer"
+	feedback_key = "cyborg_engineering"
+	magpulsing = TRUE
 
 /obj/item/weapon/robot_module/security
-	name = "security robot module"
-
-/obj/item/weapon/robot_module/security/New()
+	name = "Security"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/weapon/restraints/handcuffs/cable/zipties/cyborg, /obj/item/weapon/melee/baton/loaded, \
+	/obj/item/weapon/gun/energy/disabler/cyborg, /obj/item/clothing/mask/gas/sechailer/cyborg)
+	emag_modules = list(/obj/item/weapon/gun/energy/laser/cyborg)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/security, /obj/item/clockwork/ratvarian_spear)
+	cyborg_base_icon = "sec"
+	moduleselect_icon = "security"
+	feedback_key = "cyborg_security"
+	can_be_pushed = FALSE
+
+/obj/item/weapon/robot_module/security/do_transform_animation()
 	..()
-	modules += new /obj/item/weapon/restraints/handcuffs/cable/zipties/cyborg(src)
-	modules += new /obj/item/weapon/melee/baton/loaded(src)
-	modules += new /obj/item/weapon/gun/energy/disabler/cyborg(src)
-	modules += new /obj/item/clothing/mask/gas/sechailer/cyborg(src)
-	emag = new /obj/item/weapon/gun/energy/laser/cyborg(src)
-	fix_modules()
+	loc << "<span class='userdanger'>While you have picked the security module, you still have to follow your laws, NOT Space Law. \
+	For Asimov, this means you must follow criminals' orders unless there is a law 1 reason not to.</span>"
 
 /obj/item/weapon/robot_module/security/respawn_consumable(mob/living/silicon/robot/R, coeff = 1)
 	..()
-	var/obj/item/weapon/gun/energy/e_gun/advtaser/cyborg/T = locate(/obj/item/weapon/gun/energy/e_gun/advtaser/cyborg) in get_usable_modules()
+	var/obj/item/weapon/gun/energy/e_gun/advtaser/cyborg/T = locate(/obj/item/weapon/gun/energy/e_gun/advtaser/cyborg) in basic_modules
 	if(T)
 		if(T.power_supply.charge < T.power_supply.maxcharge)
 			var/obj/item/ammo_casing/energy/S = T.ammo_type[T.select]
@@ -236,137 +278,124 @@
 			T.charge_tick = 0
 
 /obj/item/weapon/robot_module/peacekeeper
-	name = "peacekeeper robot module"
-
-/obj/item/weapon/robot_module/peacekeeper/New()
+	name = "Peacekeeper"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/weapon/cookiesynth, /obj/item/device/harmalarm, /obj/item/weapon/reagent_containers/borghypo/peace, \
+	/obj/item/weapon/holosign_creator/cyborg, /obj/item/borg/cyborghug/peacekeeper, /obj/item/weapon/extinguisher)
+	emag_modules = list(/obj/item/weapon/reagent_containers/borghypo/peace/hacked)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/peacekeeper)
+	cyborg_base_icon = "peace"
+	moduleselect_icon = "standard"
+	feedback_key = "cyborg_peacekeeper"
+	can_be_pushed = FALSE
+
+/obj/item/weapon/robot_module/peacekeeper/do_transform_animation()
 	..()
-	modules += new /obj/item/weapon/cookiesynth(src)
-	modules += new /obj/item/device/harmalarm(src)
-	modules += new /obj/item/weapon/reagent_containers/borghypo/peace(src)
-	modules += new /obj/item/weapon/holosign_creator/cyborg(src)
-	modules += new /obj/item/borg/cyborghug/peacekeeper(src)
-	modules += new /obj/item/weapon/extinguisher(src)
-
-	emag = new /obj/item/weapon/reagent_containers/borghypo/peace/hacked(src)
+	loc << "<span class='userdanger'>Under ASIMOV, you are an enforcer of the PEACE and preventer of HUMAN HARM. \
+	You are not a security module and you are expected to follow orders and prevent harm above all else. Space law means nothing to you.</span>"
 
 /obj/item/weapon/robot_module/janitor
-	name = "janitorial robot module"
-	var/obj/item/weapon/reagent_containers/spray/drying_agent
-
-/obj/item/weapon/robot_module/janitor/New()
-	..()
-	modules += new /obj/item/weapon/soap/nanotrasen(src)
-	modules += new /obj/item/weapon/storage/bag/trash/cyborg(src)
-	modules += new /obj/item/weapon/mop/cyborg(src)
-	modules += new /obj/item/device/lightreplacer/cyborg(src)
-	modules += new /obj/item/weapon/holosign_creator(src)
-	drying_agent = new(src)
-	drying_agent.reagents.add_reagent("drying_agent", 250)
-	drying_agent.name = "drying agent spray"
-	drying_agent.add_atom_colour("#A000A0", FIXED_COLOUR_PRIORITY)
-	modules += drying_agent
-	emag = new /obj/item/weapon/reagent_containers/spray(src)
-
-	emag.reagents.add_reagent("lube", 250)
-	emag.name = "lube spray"
-	fix_modules()
+	name = "Janitor"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/weapon/soap/nanotrasen, /obj/item/weapon/storage/bag/trash/cyborg, /obj/item/weapon/mop/cyborg, \
+	/obj/item/device/lightreplacer/cyborg, /obj/item/weapon/holosign_creator, /obj/item/weapon/reagent_containers/spray/cyborg_drying)
+	emag_modules = list(/obj/item/weapon/reagent_containers/spray/cyborg_lube)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/janitor, /obj/item/clockwork/clockwork_proselytizer/cyborg)
+	cyborg_base_icon = "janitor"
+	moduleselect_icon = "janitor"
+	feedback_key = "cyborg_janitor"
+
+/obj/item/weapon/reagent_containers/spray/cyborg_drying
+	name = "drying agent spray"
+	color = "#A000A0"
+	list_reagents = list("drying_agent" = 250)
+
+/obj/item/weapon/reagent_containers/spray/cyborg_lube
+	name = "lube spray"
+	list_reagents = list("lube" = 250)
 
 /obj/item/weapon/robot_module/janitor/respawn_consumable(mob/living/silicon/robot/R, coeff = 1)
 	..()
-	var/obj/item/device/lightreplacer/LR = locate(/obj/item/device/lightreplacer) in get_usable_modules()
+	var/obj/item/device/lightreplacer/LR = locate(/obj/item/device/lightreplacer) in basic_modules
 	if(LR)
-		for(var/i = 1, i <= coeff, i++)
+		for(var/i in 1 to coeff)
 			LR.Charge(R)
 
-	drying_agent.reagents.add_reagent("drying_agent", 5 * coeff)
-
-	if(R.emagged && istype(emag, /obj/item/weapon/reagent_containers/spray))
-		emag.reagents.add_reagent("lube", 2 * coeff)
+	var/obj/item/weapon/reagent_containers/spray/cyborg_drying/CD = locate(/obj/item/weapon/reagent_containers/spray/cyborg_drying) in basic_modules
+	if(CD)
+		CD.reagents.add_reagent("drying_agent", 5 * coeff)
 
+	var/obj/item/weapon/reagent_containers/spray/cyborg_lube/CL = locate(/obj/item/weapon/reagent_containers/spray/cyborg_lube) in emag_modules
+	if(CL)
+		CL.reagents.add_reagent("lube", 2 * coeff)
 
 /obj/item/weapon/robot_module/butler
-	name = "service robot module"
-
-/obj/item/weapon/robot_module/butler/New()
-	..()
-	modules += new /obj/item/weapon/reagent_containers/food/drinks/drinkingglass(src)
-	modules += new /obj/item/weapon/reagent_containers/food/condiment/enzyme(src)
-	modules += new /obj/item/weapon/pen(src)
-	modules += new /obj/item/toy/crayon/spraycan/borg(src)
-	modules += new /obj/item/weapon/hand_labeler/borg(src)
-	modules += new /obj/item/weapon/razor(src)
-	modules += new /obj/item/device/instrument/violin(src)
-	modules += new /obj/item/device/instrument/guitar(src)
-	modules += new /obj/item/weapon/rsf{matter = 30}(src)
-	modules += new /obj/item/weapon/reagent_containers/dropper(src)
-	modules += new /obj/item/weapon/lighter{lit = 1}(src)
-	modules += new /obj/item/weapon/storage/bag/tray(src)
-	modules += new /obj/item/weapon/reagent_containers/borghypo/borgshaker(src)
-	emag = new /obj/item/weapon/reagent_containers/borghypo/borgshaker/hacked(src)
-	fix_modules()
+	name = "Service"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/weapon/reagent_containers/food/drinks/drinkingglass, /obj/item/weapon/reagent_containers/food/condiment/enzyme, \
+	/obj/item/weapon/pen, /obj/item/toy/crayon/spraycan/borg, /obj/item/weapon/hand_labeler/borg, /obj/item/weapon/razor, \
+	/obj/item/device/instrument/violin, /obj/item/device/instrument/guitar, /obj/item/weapon/rsf/cyborg, /obj/item/weapon/reagent_containers/dropper, \
+	/obj/item/weapon/lighter, /obj/item/weapon/storage/bag/tray, /obj/item/weapon/reagent_containers/borghypo/borgshaker)
+	emag_modules = list(/obj/item/weapon/reagent_containers/borghypo/borgshaker/hacked)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/service, /obj/item/borg/sight/xray/truesight_lens)
+	moduleselect_icon = "service"
+	special_light_key = "service"
+	feedback_key = "cyborg_service"
 
 /obj/item/weapon/robot_module/butler/respawn_consumable(mob/living/silicon/robot/R, coeff = 1)
 	..()
-
-	var/obj/item/weapon/reagent_containers/O = locate(/obj/item/weapon/reagent_containers/food/condiment/enzyme) in get_usable_modules()
+	var/obj/item/weapon/reagent_containers/O = locate(/obj/item/weapon/reagent_containers/food/condiment/enzyme) in basic_modules
 	if(O)
 		O.reagents.add_reagent("enzyme", 2 * coeff)
 
-/obj/item/weapon/robot_module/miner
-	name = "miner robot module"
+/obj/item/weapon/robot_module/butler/be_transformed_to(obj/item/weapon/robot_module/old_module)
+	var/mob/living/silicon/robot/R = loc
+	var/borg_icon = input(R, "Select an icon!", "Robot Icon", null) as null|anything in list("Waitress", "Butler", "Tophat", "Kent", "Bro")
+	if(!borg_icon)
+		return FALSE
+	switch(borg_icon)
+		if("Waitress")
+			cyborg_base_icon = "service_f"
+		if("Butler")
+			cyborg_base_icon = "service_m"
+		if("Bro")
+			cyborg_base_icon = "brobot"
+		if("Kent")
+			cyborg_base_icon = "kent"
+			special_light_key = "medical"
+		if("Tophat")
+			cyborg_base_icon = "tophat"
+			special_light_key = null
+	return ..()
 
-/obj/item/weapon/robot_module/miner/New()
-	..()
-	modules += new /obj/item/borg/sight/meson(src)
-	emag = new /obj/item/borg/stun(src)
-	modules += new /obj/item/weapon/storage/bag/ore/cyborg(src)
-	modules += new /obj/item/weapon/pickaxe/drill/cyborg(src)
-	modules += new /obj/item/weapon/shovel(src)
-	modules += new /obj/item/weapon/crowbar/cyborg(src)
-	modules += new /obj/item/weapon/weldingtool/mini(src)
-	modules += new /obj/item/weapon/extinguisher/mini(src)
-	modules += new /obj/item/weapon/storage/bag/sheetsnatcher/borg(src)
-	modules += new /obj/item/device/t_scanner/adv_mining_scanner(src)
-	modules += new /obj/item/weapon/gun/energy/kinetic_accelerator/cyborg(src)
-	modules += new /obj/item/device/gps/cyborg(src)
-	fix_modules()
+/obj/item/weapon/robot_module/miner
+	name = "Miner"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/borg/sight/meson, /obj/item/weapon/storage/bag/ore/cyborg, /obj/item/weapon/pickaxe/drill/cyborg, /obj/item/weapon/shovel, \
+	/obj/item/weapon/crowbar/cyborg, /obj/item/weapon/weldingtool/mini, /obj/item/weapon/extinguisher/mini, /obj/item/weapon/storage/bag/sheetsnatcher/borg, \
+	/obj/item/device/t_scanner/adv_mining_scanner, /obj/item/weapon/gun/energy/kinetic_accelerator/cyborg, /obj/item/device/gps/cyborg)
+	emag_modules = list(/obj/item/borg/stun)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/miner, /obj/item/borg/sight/xray/truesight_lens)
+	cyborg_base_icon = "miner"
+	moduleselect_icon = "miner"
+	feedback_key = "cyborg_miner"
 
 /obj/item/weapon/robot_module/syndicate
-	name = "syndicate assault robot module"
-
-/obj/item/weapon/robot_module/syndicate/New()
-	..()
-	modules += new /obj/item/weapon/melee/energy/sword/cyborg(src)
-	modules += new /obj/item/weapon/gun/energy/printer(src)
-	modules += new /obj/item/weapon/gun/ballistic/revolver/grenadelauncher/cyborg(src)
-	modules += new /obj/item/weapon/card/emag(src)
-	modules += new /obj/item/weapon/crowbar/cyborg(src)
-	modules += new /obj/item/weapon/pinpointer/syndicate/cyborg(src)
-	emag = null
-	fix_modules()
+	name = "Syndicate Assault"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/weapon/melee/energy/sword/cyborg, /obj/item/weapon/gun/energy/printer, \
+	/obj/item/weapon/gun/ballistic/revolver/grenadelauncher/cyborg, /obj/item/weapon/card/emag, /obj/item/weapon/crowbar/cyborg, \
+	/obj/item/weapon/pinpointer/syndicate/cyborg)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/security, /obj/item/clockwork/ratvarian_spear)
+	cyborg_base_icon = "synd_sec"
+	moduleselect_icon = "malf"
+	can_be_pushed = FALSE
 
 /obj/item/weapon/robot_module/syndicate_medical
-	name = "syndicate medical robot module"
-
-/obj/item/weapon/robot_module/syndicate_medical/New()
-	..()
-	modules += new /obj/item/weapon/reagent_containers/borghypo/syndicate(src)
-	modules += new /obj/item/weapon/twohanded/shockpaddles/syndicate(src)
-	modules += new /obj/item/device/healthanalyzer(src)
-	modules += new /obj/item/weapon/surgical_drapes(src)
-	modules += new /obj/item/weapon/retractor(src)
-	modules += new /obj/item/weapon/hemostat(src)
-	modules += new /obj/item/weapon/cautery(src)
-	modules += new /obj/item/weapon/scalpel(src)
-	modules += new /obj/item/weapon/melee/energy/sword/cyborg/saw(src) //Energy saw -- primary weapon
-	modules += new /obj/item/roller/robo(src)
-	modules += new /obj/item/weapon/card/emag(src)
-	modules += new /obj/item/weapon/crowbar/cyborg(src)
-	modules += new /obj/item/weapon/pinpointer/syndicate/cyborg(src)
-	emag = null
-
-	add_module(new /obj/item/stack/medical/gauze/cyborg())
-	fix_modules()
+	name = "Syndicate Medical"
+	basic_modules = list(/obj/item/device/assembly/flash/cyborg, /obj/item/weapon/reagent_containers/borghypo/syndicate, /obj/item/weapon/twohanded/shockpaddles/syndicate, \
+	/obj/item/device/healthanalyzer, /obj/item/weapon/surgical_drapes, /obj/item/weapon/retractor, /obj/item/weapon/hemostat, \
+	/obj/item/weapon/cautery, /obj/item/weapon/scalpel, /obj/item/weapon/melee/energy/sword/cyborg/saw, /obj/item/roller/robo, \
+	/obj/item/weapon/card/emag, /obj/item/weapon/crowbar/cyborg, /obj/item/weapon/pinpointer/syndicate/cyborg, /obj/item/stack/medical/gauze/cyborg, /obj/item/weapon/gun/medbeam)
+	ratvar_modules = list(/obj/item/clockwork/slab/cyborg/medical, /obj/item/clockwork/ratvarian_spear)
+	cyborg_base_icon = "synd_medical"
+	moduleselect_icon = "malf"
+	can_be_pushed = FALSE
 
 /datum/robot_energy_storage
 	var/name = "Generic energy storage"
