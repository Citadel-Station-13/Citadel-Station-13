diff a/code/modules/mob/living/simple_animal/bot/bot.dm b/code/modules/mob/living/simple_animal/bot/bot.dm	(rejected hunks)
@@ -2,7 +2,7 @@
 
 // AI (i.e. game AI, not the AI player) controlled bots
 /mob/living/simple_animal/bot
-	icon = 'icons/obj/aibots.dmi'
+	icon = 'icons/mob/aibots.dmi'
 	layer = MOB_LAYER
 	gender = NEUTER
 	luminosity = 3
@@ -103,18 +103,18 @@
 	if(stat)
 		return 0
 	on = 1
-	SetLuminosity(initial(luminosity))
+	set_light(initial(light_range))
 	update_icon()
 	diag_hud_set_botstat()
 	return 1
 
 /mob/living/simple_animal/bot/proc/turn_off()
 	on = 0
-	SetLuminosity(0)
+	set_light(0)
 	bot_reset() //Resets an AI's call, should it exist.
 	update_icon()
 
-/mob/living/simple_animal/bot/New()
+/mob/living/simple_animal/bot/Initialize()
 	..()
 	access_card = new /obj/item/weapon/card/id(src)
 //This access is so bots can be immediately set to patrol and leave Robotics, instead of having to be let out first.
@@ -169,7 +169,7 @@
 	if(locked) //First emag application unlocks the bot's interface. Apply a screwdriver to use the emag again.
 		locked = 0
 		emagged = 1
-		user << "<span class='notice'>You bypass [src]'s controls.</span>"
+		to_chat(user, "<span class='notice'>You bypass [src]'s controls.</span>")
 		return
 	if(!locked && open) //Bot panel is unlocked by ID or emag, and the panel is screwed open. Ready for emagging.
 		emagged = 2
@@ -177,21 +177,21 @@
 		locked = 1 //Access denied forever!
 		bot_reset()
 		turn_on() //The bot automatically turns on when emagged, unless recently hit with EMP.
-		src << "<span class='userdanger'>(#$*#$^^( OVERRIDE DETECTED</span>"
+		to_chat(src, "<span class='userdanger'>(#$*#$^^( OVERRIDE DETECTED</span>")
 		add_logs(user, src, "emagged")
 		return
 	else //Bot is unlocked, but the maint panel has not been opened with a screwdriver yet.
-		user << "<span class='warning'>You need to open maintenance panel first!</span>"
+		to_chat(user, "<span class='warning'>You need to open maintenance panel first!</span>")
 
 /mob/living/simple_animal/bot/examine(mob/user)
 	..()
 	if(health < maxHealth)
 		if(health > maxHealth/3)
-			user << "[src]'s parts look loose."
+			to_chat(user, "[src]'s parts look loose.")
 		else
-			user << "[src]'s parts look very loose!"
+			to_chat(user, "[src]'s parts look very loose!")
 	else
-		user << "[src] is in pristine condition."
+		to_chat(user, "[src] is in pristine condition.")
 
 /mob/living/simple_animal/bot/adjustHealth(amount, updating_health = TRUE, forced = FALSE)
 	if(amount>0 && prob(10))
@@ -235,7 +235,7 @@
 	if(!topic_denied(user))
 		interact(user)
 	else
-		user << "<span class='warning'>[src]'s interface is not responding!</span>"
+		to_chat(user, "<span class='warning'>[src]'s interface is not responding!</span>")
 
 /mob/living/simple_animal/bot/interact(mob/user)
 	show_controls(user)
@@ -244,27 +244,27 @@
 	if(istype(W, /obj/item/weapon/screwdriver))
 		if(!locked)
 			open = !open
-			user << "<span class='notice'>The maintenance panel is now [open ? "opened" : "closed"].</span>"
+			to_chat(user, "<span class='notice'>The maintenance panel is now [open ? "opened" : "closed"].</span>")
 		else
-			user << "<span class='warning'>The maintenance panel is locked.</span>"
+			to_chat(user, "<span class='warning'>The maintenance panel is locked.</span>")
 	else if(istype(W, /obj/item/weapon/card/id) || istype(W, /obj/item/device/pda))
 		if(bot_core.allowed(user) && !open && !emagged)
 			locked = !locked
-			user << "Controls are now [locked ? "locked." : "unlocked."]"
+			to_chat(user, "Controls are now [locked ? "locked." : "unlocked."]")
 		else
 			if(emagged)
-				user << "<span class='danger'>ERROR</span>"
+				to_chat(user, "<span class='danger'>ERROR</span>")
 			if(open)
-				user << "<span class='warning'>Please close the access panel before locking it.</span>"
+				to_chat(user, "<span class='warning'>Please close the access panel before locking it.</span>")
 			else
-				user << "<span class='warning'>Access denied.</span>"
+				to_chat(user, "<span class='warning'>Access denied.</span>")
 	else if(istype(W, /obj/item/device/paicard))
 		insertpai(user, W)
 	else if(istype(W, /obj/item/weapon/hemostat) && paicard)
 		if(open)
-			user << "<span class='warning'>Close the access panel before manipulating the personality slot!</span>"
+			to_chat(user, "<span class='warning'>Close the access panel before manipulating the personality slot!</span>")
 		else
-			user << "<span class='notice'>You attempt to pull [paicard] free...</span>"
+			to_chat(user, "<span class='notice'>You attempt to pull [paicard] free...</span>")
 			if(do_after(user, 30, target = src))
 				if (paicard)
 					user.visible_message("<span class='notice'>[user] uses [W] to pull [paicard] out of [bot_name]!</span>","<span class='notice'>You pull [paicard] out of [bot_name] with [W].</span>")
@@ -273,17 +273,17 @@
 		user.changeNext_move(CLICK_CD_MELEE)
 		if(istype(W, /obj/item/weapon/weldingtool) && user.a_intent != INTENT_HARM)
 			if(health >= maxHealth)
-				user << "<span class='warning'>[src] does not need a repair!</span>"
+				to_chat(user, "<span class='warning'>[src] does not need a repair!</span>")
 				return
 			if(!open)
-				user << "<span class='warning'>Unable to repair with the maintenance panel closed!</span>"
+				to_chat(user, "<span class='warning'>Unable to repair with the maintenance panel closed!</span>")
 				return
 			var/obj/item/weapon/weldingtool/WT = W
 			if(WT.remove_fuel(0, user))
 				adjustHealth(-10)
 				user.visible_message("[user] repairs [src]!","<span class='notice'>You repair [src].</span>")
 			else
-				user << "<span class='warning'>The welder must be on for this task!</span>"
+				to_chat(user, "<span class='warning'>The welder must be on for this task!</span>")
 		else
 			if(W.force) //if force is non-zero
 				var/datum/effect_system/spark_spread/s = new /datum/effect_system/spark_spread
@@ -302,7 +302,7 @@
 /mob/living/simple_animal/bot/emp_act(severity)
 	var/was_on = on
 	stat |= EMPED
-	PoolOrNew(/obj/effect/overlay/temp/emp, loc)
+	new /obj/effect/overlay/temp/emp(loc)
 	if(paicard)
 		paicard.emp_act(severity)
 		src.visible_message("[paicard] is flies out of [bot_name]!","<span class='warning'>You are forcefully ejected from [bot_name]!</span>")
@@ -473,7 +473,7 @@ Pass a positive integer as an argument to override a bot's default speed.
 	var/area/end_area = get_area(waypoint)
 
 	if(client) //Player bots instead get a location command from the AI
-		src << "<span class='noticebig'>Priority waypoint set by \icon[caller] <b>[caller]</b>. Proceed to <b>[end_area.name]<\b>."
+		to_chat(src, "<span class='noticebig'>Priority waypoint set by \icon[caller] <b>[caller]</b>. Proceed to <b>[end_area.name]<\b>.")
 
 	//For giving the bot temporary all-access.
 	var/obj/item/weapon/card/id/all_access = new /obj/item/weapon/card/id
@@ -489,13 +489,13 @@ Pass a positive integer as an argument to override a bot's default speed.
 			turn_on() //Saves the AI the hassle of having to activate a bot manually.
 		access_card = all_access //Give the bot all-access while under the AI's command.
 		if(message)
-			calling_ai << "<span class='notice'>\icon[src] [name] called to [end_area.name]. [path.len-1] meters to destination.</span>"
+			to_chat(calling_ai, "<span class='notice'>\icon[src] [name] called to [end_area.name]. [path.len-1] meters to destination.</span>")
 		pathset = 1
 		mode = BOT_RESPONDING
 		tries = 0
 	else
 		if(message)
-			calling_ai << "<span class='danger'>Failed to calculate a valid route. Ensure destination is clear of obstructions and within range.</span>"
+			to_chat(calling_ai, "<span class='danger'>Failed to calculate a valid route. Ensure destination is clear of obstructions and within range.</span>")
 		calling_ai = null
 		path = list()
 
@@ -504,13 +504,13 @@ Pass a positive integer as an argument to override a bot's default speed.
 	var/success = bot_move(ai_waypoint, 3)
 	if(!success)
 		if(calling_ai)
-			calling_ai << "\icon[src] [get_turf(src) == ai_waypoint ? "<span class='notice'>[src] successfully arrived to waypoint.</span>" : "<span class='danger'>[src] failed to reach waypoint.</span>"]"
+			to_chat(calling_ai, "\icon[src] [get_turf(src) == ai_waypoint ? "<span class='notice'>[src] successfully arrived to waypoint.</span>" : "<span class='danger'>[src] failed to reach waypoint.</span>"]")
 			calling_ai = null
 		bot_reset()
 
 /mob/living/simple_animal/bot/proc/bot_reset()
 	if(calling_ai) //Simple notification to the AI if it called a bot. It will not know the cause or identity of the bot.
-		calling_ai << "<span class='danger'>Call command to a bot has been reset.</span>"
+		to_chat(calling_ai, "<span class='danger'>Call command to a bot has been reset.</span>")
 		calling_ai = null
 	path = list()
 	summon_target = null
@@ -663,24 +663,24 @@ Pass a positive integer as an argument to override a bot's default speed.
 /mob/living/simple_animal/bot/proc/bot_control_message(command,user,user_turf,user_access)
 	switch(command)
 		if("patroloff")
-			src << "<span class='warning big'>STOP PATROL</span>"
+			to_chat(src, "<span class='warning big'>STOP PATROL</span>")
 		if("patrolon")
-			src << "<span class='warning big'>START PATROL</span>"
+			to_chat(src, "<span class='warning big'>START PATROL</span>")
 		if("summon")
 			var/area/a = get_area(user_turf)
-			src << "<span class='warning big'>PRIORITY ALERT:[user] in [a.name]!</span>"
+			to_chat(src, "<span class='warning big'>PRIORITY ALERT:[user] in [a.name]!</span>")
 		if("stop")
-			src << "<span class='warning big'>STOP!</span>"
+			to_chat(src, "<span class='warning big'>STOP!</span>")
 
 		if("go")
-			src << "<span class='warning big'>GO!</span>"
+			to_chat(src, "<span class='warning big'>GO!</span>")
 
 		if("home")
-			src << "<span class='warning big'>RETURN HOME!</span>"
+			to_chat(src, "<span class='warning big'>RETURN HOME!</span>")
 		if("ejectpai")
 			return
 		else
-			src << "<span class='warning'>Unidentified control sequence recieved:[command]</span>"
+			to_chat(src, "<span class='warning'>Unidentified control sequence recieved:[command]</span>")
 
 /mob/living/simple_animal/bot/proc/bot_summon() // summoned to PDA
 	summon_step()
@@ -756,7 +756,7 @@ Pass a positive integer as an argument to override a bot's default speed.
 		return 1
 
 	if(topic_denied(usr))
-		usr << "<span class='warning'>[src]'s interface is not responding!</span>"
+		to_chat(usr, "<span class='warning'>[src]'s interface is not responding!</span>")
 		return 1
 	add_fingerprint(usr)
 
@@ -777,18 +777,18 @@ Pass a positive integer as an argument to override a bot's default speed.
 				emagged = 2
 				hacked = 1
 				locked = 1
-				usr << "<span class='warning'>[text_hack]</span>"
+				to_chat(usr, "<span class='warning'>[text_hack]</span>")
 				bot_reset()
 			else if(!hacked)
-				usr << "<span class='boldannounce'>[text_dehack_fail]</span>"
+				to_chat(usr, "<span class='boldannounce'>[text_dehack_fail]</span>")
 			else
 				emagged = 0
 				hacked = 0
-				usr << "<span class='notice'>[text_dehack]</span>"
+				to_chat(usr, "<span class='notice'>[text_dehack]</span>")
 				bot_reset()
 		if("ejectpai")
 			if(paicard && (!locked || issilicon(usr) || IsAdminGhost(usr)))
-				usr << "<span class='notice'>You eject [paicard] from [bot_name]</span>"
+				to_chat(usr, "<span class='notice'>You eject [paicard] from [bot_name]</span>")
 				ejectpai(usr)
 	update_controls()
 
@@ -800,7 +800,7 @@ Pass a positive integer as an argument to override a bot's default speed.
 	use_power = 0
 	var/mob/living/simple_animal/bot/owner = null
 
-/obj/machinery/bot_core/New(loc)
+/obj/machinery/bot_core/Initialize()
 	..()
 	owner = loc
 	if(!istype(owner))
@@ -846,7 +846,7 @@ Pass a positive integer as an argument to override a bot's default speed.
 
 /mob/living/simple_animal/bot/proc/insertpai(mob/user, obj/item/device/paicard/card)
 	if(paicard)
-		user << "<span class='warning'>A [paicard] is already inserted!</span>"
+		to_chat(user, "<span class='warning'>A [paicard] is already inserted!</span>")
 	else if(allow_pai && !key)
 		if(!locked && !open)
 			if(card.pai && card.pai.mind)
@@ -856,18 +856,18 @@ Pass a positive integer as an argument to override a bot's default speed.
 				paicard = card
 				user.visible_message("[user] inserts [card] into [src]!","<span class='notice'>You insert [card] into [src].</span>")
 				paicard.pai.mind.transfer_to(src)
-				src << "<span class='notice'>You sense your form change as you are uploaded into [src].</span>"
+				to_chat(src, "<span class='notice'>You sense your form change as you are uploaded into [src].</span>")
 				bot_name = name
 				name = paicard.pai.name
 				faction = user.faction.Copy()
 				add_logs(user, paicard.pai, "uploaded to [bot_name],")
 				return 1
 			else
-				user << "<span class='warning'>[card] is inactive.</span>"
+				to_chat(user, "<span class='warning'>[card] is inactive.</span>")
 		else
-			user << "<span class='warning'>The personality slot is locked.</span>"
+			to_chat(user, "<span class='warning'>The personality slot is locked.</span>")
 	else
-		user << "<span class='warning'>[src] is not compatible with [card]</span>"
+		to_chat(user, "<span class='warning'>[src] is not compatible with [card]</span>")
 
 /mob/living/simple_animal/bot/proc/ejectpai(mob/user = null, announce = 1)
 	if(paicard)
@@ -884,7 +884,7 @@ Pass a positive integer as an argument to override a bot's default speed.
 		else
 			add_logs(src, paicard.pai, "ejected")
 		if(announce)
-			paicard.pai << "<span class='notice'>You feel your control fade as [paicard] ejects from [bot_name].</span>"
+			to_chat(paicard.pai, "<span class='notice'>You feel your control fade as [paicard] ejects from [bot_name].</span>")
 		paicard = null
 		name = bot_name
 		faction = initial(faction)
