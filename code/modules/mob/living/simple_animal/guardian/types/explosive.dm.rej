diff a/code/modules/mob/living/simple_animal/guardian/types/explosive.dm b/code/modules/mob/living/simple_animal/guardian/types/explosive.dm	(rejected hunks)
@@ -22,30 +22,30 @@
 			if(isliving(target))
 				var/mob/living/M = target
 				if(!M.anchored && M != summoner && !hasmatchingsummoner(M))
-					PoolOrNew(/obj/effect/overlay/temp/guardian/phase/out, get_turf(M))
+					new /obj/effect/overlay/temp/guardian/phase/out(get_turf(M))
 					do_teleport(M, M, 10)
 					for(var/mob/living/L in range(1, M))
 						if(hasmatchingsummoner(L)) //if the summoner matches don't hurt them
 							continue
 						if(L != src && L != summoner)
 							L.apply_damage(15, BRUTE)
-					PoolOrNew(/obj/effect/overlay/temp/explosion, get_turf(M))
+					new /obj/effect/overlay/temp/explosion(get_turf(M))
 
 /mob/living/simple_animal/hostile/guardian/bomb/AltClickOn(atom/movable/A)
 	if(!istype(A))
 		return
 	if(src.loc == summoner)
-		src << "<span class='danger'><B>You must be manifested to create bombs!</span></B>"
+		to_chat(src, "<span class='danger'><B>You must be manifested to create bombs!</span></B>")
 		return
 	if(isobj(A))
 		if(bomb_cooldown <= world.time && !stat)
 			var/obj/guardian_bomb/B = new /obj/guardian_bomb(get_turf(A))
-			src << "<span class='danger'><B>Success! Bomb armed!</span></B>"
+			to_chat(src, "<span class='danger'><B>Success! Bomb armed!</span></B>")
 			bomb_cooldown = world.time + 200
 			B.spawner = src
 			B.disguise(A)
 		else
-			src << "<span class='danger'><B>Your powers are on cooldown! You must wait 20 seconds between bombs.</span></B>"
+			to_chat(src, "<span class='danger'><B>Your powers are on cooldown! You must wait 20 seconds between bombs.</span></B>")
 
 /obj/guardian_bomb
 	name = "bomb"
@@ -61,26 +61,26 @@
 	anchored = A.anchored
 	density = A.density
 	appearance = A.appearance
-	addtimer(src, "disable", 600, TIMER_NORMAL)
+	addtimer(CALLBACK(src, .proc/disable), 600)
 
 /obj/guardian_bomb/proc/disable()
 	stored_obj.forceMove(get_turf(src))
-	spawner << "<span class='danger'><B>Failure! Your trap didn't catch anyone this time.</span></B>"
+	to_chat(spawner, "<span class='danger'><B>Failure! Your trap didn't catch anyone this time.</span></B>")
 	qdel(src)
 
 /obj/guardian_bomb/proc/detonate(mob/living/user)
 	if(isliving(user))
 		if(user != spawner && user != spawner.summoner && !spawner.hasmatchingsummoner(user))
-			user << "<span class='danger'><B>The [src] was boobytrapped!</span></B>"
-			spawner << "<span class='danger'><B>Success! Your trap caught [user]</span></B>"
+			to_chat(user, "<span class='danger'><B>The [src] was boobytrapped!</span></B>")
+			to_chat(spawner, "<span class='danger'><B>Success! Your trap caught [user]</span></B>")
 			var/turf/T = get_turf(src)
 			stored_obj.forceMove(T)
 			playsound(T,'sound/effects/Explosion2.ogg', 200, 1)
-			PoolOrNew(/obj/effect/overlay/temp/explosion, T)
+			new /obj/effect/overlay/temp/explosion(T)
 			user.ex_act(2)
 			qdel(src)
 		else
-			user << "<span class='holoparasite'>[src] glows with a strange <font color=\"[spawner.namedatum.colour]\">light</font>, and you don't touch it.</span>"
+			to_chat(user, "<span class='holoparasite'>[src] glows with a strange <font color=\"[spawner.namedatum.colour]\">light</font>, and you don't touch it.</span>")
 
 /obj/guardian_bomb/Bump(atom/A)
 	detonate(A)
@@ -95,4 +95,4 @@
 /obj/guardian_bomb/examine(mob/user)
 	stored_obj.examine(user)
 	if(get_dist(user,src)<=2)
-		user << "<span class='holoparasite'>It glows with a strange <font color=\"[spawner.namedatum.colour]\">light</font>!</span>"
+		to_chat(user, "<span class='holoparasite'>It glows with a strange <font color=\"[spawner.namedatum.colour]\">light</font>!</span>")
