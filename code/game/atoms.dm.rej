diff a/code/game/atoms.dm b/code/game/atoms.dm	(rejected hunks)
@@ -6,10 +6,12 @@
 	var/flags_1 = 0
 	var/flags_2 = 0
 
+	var/list/fingerprints
+	var/list/fingerprintshidden
+	var/list/blood_DNA
 	var/container_type = 0
 	var/admin_spawned = 0	//was this spawned by an admin? used for stat tracking stuff.
-	var/datum/reagents/reagents
-	var/datum/forensics/forensics
+	var/datum/reagents/reagents = null
 
 	//This atom's HUD (med/sec, etc) images. Associative list.
 	var/list/image/hud_list = null
@@ -64,9 +66,6 @@
 		stack_trace("Warning: [src]([type]) initialized multiple times!")
 	initialized = TRUE
 
-	if(!forensics)
-		forensics = new
-
 	//atom color stuff
 	if(color)
 		add_atom_colour(color, FIXED_COLOUR_PRIORITY)
@@ -89,8 +88,8 @@
 			var/datum/atom_hud/alternate_appearance/AA = alternate_appearances[K]
 			AA.remove_from_hud(src)
 
-	QDEL_NULL(reagents)
-	QDEL_NULL(forensics)
+	if(reagents)
+		qdel(reagents)
 
 	LAZYCLEARLIST(overlays)
 	LAZYCLEARLIST(priority_overlays)
@@ -162,9 +161,6 @@
 				reagents = new()
 			reagents.reagent_list.Add(A)
 			reagents.conditional_update()
-		if(istype(A, /datum/forensics))
-			if(!forensics)
-				forensics = new
 		else if(ismovableatom(A))
 			var/atom/movable/M = A
 			if(isliving(M.loc))
@@ -267,7 +263,7 @@
 /atom/proc/examine(mob/user)
 	//This reformat names to get a/an properly working on item descriptions when they are bloody
 	var/f_name = "\a [src]."
-	if(forensics.blood.len > 0 && !istype(src, /obj/effect/decal))
+	if(src.blood_DNA && !istype(src, /obj/effect/decal))
 		if(gender == PLURAL)
 			f_name = "some "
 		else
@@ -343,8 +339,51 @@ GLOBAL_LIST_EMPTY(blood_splatter_icons)
 /mob/living/carbon/alien/get_blood_dna_list()
 	return list("UNKNOWN DNA" = "X*")
 
+//to add a mob's dna info into an object's blood_DNA list.
+/atom/proc/transfer_mob_blood_dna(mob/living/L)
+	// Returns 0 if we have that blood already
+	var/new_blood_dna = L.get_blood_dna_list()
+	if(!new_blood_dna)
+		return 0
+	if(!blood_DNA)	//if our list of DNA doesn't exist yet, initialise it.
+		blood_DNA = list()
+	var/old_length = blood_DNA.len
+	blood_DNA |= new_blood_dna
+	if(blood_DNA.len == old_length)
+		return 0
+	return 1
+
+//to add blood dna info to the object's blood_DNA list
+/atom/proc/transfer_blood_dna(list/blood_dna)
+	if(!blood_DNA)
+		blood_DNA = list()
+	var/old_length = blood_DNA.len
+	blood_DNA |= blood_dna
+	if(blood_DNA.len > old_length)
+		return 1//some new blood DNA was added
+
 
+//to add blood from a mob onto something, and transfer their dna info
+/atom/proc/add_mob_blood(mob/living/M)
+	var/list/blood_dna = M.get_blood_dna_list()
+	if(!blood_dna)
+		return 0
+	return add_blood(blood_dna)
+
+//to add blood onto something, with blood dna info to include.
+/atom/proc/add_blood(list/blood_dna)
+	return 0
 
+/obj/add_blood(list/blood_dna)
+	return transfer_blood_dna(blood_dna)
+
+/obj/item/add_blood(list/blood_dna)
+	var/blood_count = !blood_DNA ? 0 : blood_DNA.len
+	if(!..())
+		return 0
+	if(!blood_count)//apply the blood-splatter overlay if it isn't already in there
+		add_blood_overlay()
+	return 1 //we applied blood to the item
 
 /obj/item/proc/add_blood_overlay()
 	if(initial(icon) && initial(icon_state))
@@ -363,29 +402,33 @@ GLOBAL_LIST_EMPTY(blood_splatter_icons)
 	. = ..()
 	transfer_blood = rand(2, 4)
 
-/turf/proc/add_blood(list/blood_dna)
+/turf/add_blood(list/blood_dna)
 	var/obj/effect/decal/cleanable/blood/splatter/B = locate() in src
 	if(!B)
 		B = new /obj/effect/decal/cleanable/blood/splatter(src)
-	B.forensics.transfer_blood_dna(blood_dna) //give blood info to the blood decal.
+	B.transfer_blood_dna(blood_dna) //give blood info to the blood decal.
 	return 1 //we bloodied the floor
 
-/mob/living/carbon/human/proc/add_blood(list/blood_dna)
+/mob/living/carbon/human/add_blood(list/blood_dna)
 	if(wear_suit)
-		wear_suit.forensics.add_blood(blood_dna)
+		wear_suit.add_blood(blood_dna)
 		update_inv_wear_suit()
 	else if(w_uniform)
-		w_uniform.forensics.add_blood(blood_dna)
+		w_uniform.add_blood(blood_dna)
 		update_inv_w_uniform()
 	if(gloves)
 		var/obj/item/clothing/gloves/G = gloves
-		G.forensics.add_blood(blood_dna)
+		G.add_blood(blood_dna)
 	else
-		forensics.transfer_blood_dna(blood_dna)
+		transfer_blood_dna(blood_dna)
 		bloody_hands = rand(2, 4)
 	update_inv_gloves()	//handles bloody hands overlays and updating
 	return 1
 
+/atom/proc/clean_blood()
+	if(islist(blood_DNA))
+		blood_DNA = null
+		return 1
 
 /atom/proc/wash_cream()
 	return 1
