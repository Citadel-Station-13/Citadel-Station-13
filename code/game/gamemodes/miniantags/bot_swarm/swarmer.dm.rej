diff a/code/game/gamemodes/miniantags/bot_swarm/swarmer.dm b/code/game/gamemodes/miniantags/bot_swarm/swarmer.dm	(rejected hunks)
@@ -8,7 +8,7 @@
 	materials = list(MAT_METAL=10000, MAT_GLASS=4000)
 
 
-/obj/item/device/unactivated_swarmer/New()
+/obj/item/device/unactivated_swarmer/Initialize()
 	if(!crit_fail)
 		notify_ghosts("An unactivated swarmer has been created in [get_area(src)]!", enter_link = "<a href=?src=\ref[src];ghostjoin=1>(Click to enter)</a>", source = src, action = NOTIFY_ATTACK)
 	..()
@@ -31,17 +31,17 @@
 
 /obj/item/device/unactivated_swarmer/attack_ghost(mob/user)
 	if(crit_fail)
-		user << "This swarmer shell is completely depowered. You cannot activate it."
+		to_chat(user, "This swarmer shell is completely depowered. You cannot activate it.")
 		return
 
 	var/be_swarmer = alert("Become a swarmer? (Warning, You can no longer be cloned!)",,"Yes","No")
 	if(be_swarmer == "No")
 		return
 	if(crit_fail)
-		user << "Swarmer has been depowered."
+		to_chat(user, "Swarmer has been depowered.")
 		return
-	if(qdeleted(src))
-		user << "Swarmer has been occupied by someone else."
+	if(QDELETED(src))
+		to_chat(user, "Swarmer has been occupied by someone else.")
 		return
 	var/mob/living/simple_animal/hostile/swarmer/S = new /mob/living/simple_animal/hostile/swarmer(get_turf(loc))
 	S.key = user.key
@@ -101,6 +101,7 @@
 	loot = list(/obj/effect/decal/cleanable/robot_debris, /obj/item/weapon/ore/bluespace_crystal)
 	del_on_death = 1
 	deathmessage = "explodes with a sharp pop!"
+	light_color = LIGHT_COLOR_CYAN
 	var/resources = 0 //Resource points, generated by consuming metal/glass
 	var/max_resources = 100
 	var/login_text_dump = {"
@@ -115,9 +116,9 @@
 
 /mob/living/simple_animal/hostile/swarmer/Login()
 	..()
-	src << login_text_dump
+	to_chat(src, login_text_dump)
 
-/mob/living/simple_animal/hostile/swarmer/New()
+/mob/living/simple_animal/hostile/swarmer/Initialize()
 	..()
 	verbs -= /mob/living/verb/pulled
 	var/datum/atom_hud/data/diagnostic/diag_hud = huds[DATA_HUD_DIAGNOSTIC]
@@ -196,9 +197,32 @@
 /obj/item/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
 	return S.Integrate(src)
 
+/obj/item/proc/IntegrateAmount() //returns the amount of resources gained when eating this item
+	if(materials[MAT_METAL] || materials[MAT_GLASS])
+		return 1
+	return 0
+
 /obj/item/weapon/gun/swarmer_act()//Stops you from eating the entire armory
 	return FALSE
 
+/obj/item/clockwork/alloy_shards/IntegrateAmount()
+	return 10
+
+/obj/item/stack/tile/brass/IntegrateAmount()
+	return 5
+
+/obj/item/clockwork/alloy_shards/medium/gear_bit/large/IntegrateAmount()
+	return 4
+
+/obj/item/clockwork/alloy_shards/large/IntegrateAmount()
+	return 3
+
+/obj/item/clockwork/alloy_shards/medium/IntegrateAmount()
+	return 2
+
+/obj/item/clockwork/alloy_shards/small/IntegrateAmount()
+	return 1
+
 /turf/open/floor/swarmer_act()//ex_act() on turf calls it on its contents, this is to prevent attacking mobs by DisIntegrate()'ing the floor
 	return FALSE
 
@@ -242,13 +266,14 @@
 	return TRUE
 
 /obj/machinery/door/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
+	var/isonshuttle = istype(get_area(src), /area/shuttle)
 	for(var/turf/T in range(1, src))
-		if(isspaceturf(T) || istype(T.loc, /area/space))
-			S << "<span class='warning'>Destroying this object has the potential to cause a hull breach. Aborting.</span>"
+		if(isspaceturf(T) || (!isonshuttle && (istype(T.loc, /area/shuttle) || istype(T.loc, /area/space))) || (isonshuttle && !istype(T.loc, /area/shuttle)))
+			to_chat(S, "<span class='warning'>Destroying this object has the potential to cause a hull breach. Aborting.</span>")
 			S.target = null
 			return FALSE
-	return TRUE
 	S.DisIntegrate(src)
+	return TRUE
 
 /obj/machinery/camera/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
 	S.DisIntegrate(src)
@@ -276,79 +301,81 @@
 	return TRUE
 
 /obj/machinery/chem_dispenser/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>The volatile chemicals in this machine would destroy us. Aborting.</span>"
+	to_chat(S, "<span class='warning'>The volatile chemicals in this machine would destroy us. Aborting.</span>")
 	return FALSE
 
 /obj/machinery/nuclearbomb/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>This device's destruction would result in the extermination of everything in the area. Aborting.</span>"
+	to_chat(S, "<span class='warning'>This device's destruction would result in the extermination of everything in the area. Aborting.</span>")
 	return FALSE
 
 /obj/machinery/dominator/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>This device is attempting to corrupt our entire network; attempting to interact with it is too risky. Aborting.</span>"
+	to_chat(S, "<span class='warning'>This device is attempting to corrupt our entire network; attempting to interact with it is too risky. Aborting.</span>")
 	return FALSE
 
 /obj/effect/decal/cleanable/crayon/gang/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>Searching... sensor malfunction! Target lost. Aborting.</span>"
+	to_chat(S, "<span class='warning'>Searching... sensor malfunction! Target lost. Aborting.</span>")
 	return FALSE
 
 /obj/effect/rune/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>Searching... sensor malfunction! Target lost. Aborting.</span>"
+	to_chat(S, "<span class='warning'>Searching... sensor malfunction! Target lost. Aborting.</span>")
 	return FALSE
 
 /obj/structure/reagent_dispensers/fueltank/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>Destroying this object would cause a chain reaction. Aborting.</span>"
+	to_chat(S, "<span class='warning'>Destroying this object would cause a chain reaction. Aborting.</span>")
 	return FALSE
 
 /obj/structure/cable/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>Disrupting the power grid would bring no benefit to us. Aborting.</span>"
+	to_chat(S, "<span class='warning'>Disrupting the power grid would bring no benefit to us. Aborting.</span>")
 	return FALSE
 
 /obj/machinery/portable_atmospherics/canister/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>An inhospitable area may be created as a result of destroying this object. Aborting.</span>"
+	to_chat(S, "<span class='warning'>An inhospitable area may be created as a result of destroying this object. Aborting.</span>")
 	return FALSE
 
 /obj/machinery/telecomms/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>This communications relay should be preserved, it will be a useful resource to our masters in the future. Aborting.</span>"
+	to_chat(S, "<span class='warning'>This communications relay should be preserved, it will be a useful resource to our masters in the future. Aborting.</span>")
 	return FALSE
 
 /obj/machinery/message_server/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>This communications relay should be preserved, it will be a useful resource to our masters in the future. Aborting.</span>"
+	to_chat(S, "<span class='warning'>This communications relay should be preserved, it will be a useful resource to our masters in the future. Aborting.</span>")
 	return FALSE
 
-/obj/machinery/blackbox_recorder/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>This machine has recorded large amounts of data on this structure and its inhabitants, it will be a useful resource to our masters in the future. Aborting. </span>"
+/obj/machinery/deepfryer/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
+	to_chat(S, "<span class='warning'>This kitchen appliance should be preserved, it will make delicious unhealthy snacks for our masters in the future. Aborting.</span>")
 	return FALSE
 
 /obj/machinery/power/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>Disrupting the power grid would bring no benefit to us. Aborting.</span>"
+	to_chat(S, "<span class='warning'>Disrupting the power grid would bring no benefit to us. Aborting.</span>")
 	return FALSE
 
 /obj/machinery/gateway/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>This bluespace source will be important to us later. Aborting.</span>"
+	to_chat(S, "<span class='warning'>This bluespace source will be important to us later. Aborting.</span>")
 	return FALSE
 
 /turf/closed/wall/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
+	var/isonshuttle = istype(loc, /area/shuttle)
 	for(var/turf/T in range(1, src))
-		if(isspaceturf(T) || istype(T.loc, /area/space))
-			S << "<span class='warning'>Destroying this object has the potential to cause a hull breach. Aborting.</span>"
+		if(isspaceturf(T) || (!isonshuttle && (istype(T.loc, /area/shuttle) || istype(T.loc, /area/space))) || (isonshuttle && !istype(T.loc, /area/shuttle)))
+			to_chat(S, "<span class='warning'>Destroying this object has the potential to cause a hull breach. Aborting.</span>")
 			S.target = null
 			return TRUE
 	return ..()
 
 /obj/structure/window/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
+	var/isonshuttle = istype(get_area(src), /area/shuttle)
 	for(var/turf/T in range(1, src))
-		if(isspaceturf(T) || istype(T.loc, /area/space))
-			S << "<span class='warning'>Destroying this object has the potential to cause a hull breach. Aborting.</span>"
+		if(isspaceturf(T) || (!isonshuttle && (istype(T.loc, /area/shuttle) || istype(T.loc, /area/space))) || (isonshuttle && !istype(T.loc, /area/shuttle)))
+			to_chat(S, "<span class='warning'>Destroying this object has the potential to cause a hull breach. Aborting.</span>")
 			S.target = null
 			return TRUE
 	return ..()
 
 /obj/item/stack/cable_coil/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)//Wiring would be too effective as a resource
-	S << "<span class='warning'>This object does not contain enough materials to work with.</span>"
+	to_chat(S, "<span class='warning'>This object does not contain enough materials to work with.</span>")
 	return FALSE
 
 /obj/machinery/porta_turret/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>Attempting to dismantle this machine would result in an immediate counterattack. Aborting.</span>"
+	to_chat(S, "<span class='warning'>Attempting to dismantle this machine would result in an immediate counterattack. Aborting.</span>")
 	return FALSE
 
 /mob/living/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
@@ -356,43 +383,60 @@
 	return TRUE
 
 /mob/living/simple_animal/slime/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>This biological resource is somehow resisting our bluespace transceiver. Aborting.</span>"
+	to_chat(S, "<span class='warning'>This biological resource is somehow resisting our bluespace transceiver. Aborting.</span>")
 	return FALSE
 
 /obj/machinery/droneDispenser/swarmer/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	S << "<span class='warning'>This object is receiving unactivated swarmer shells to help us. Aborting.</span>"
+	to_chat(S, "<span class='warning'>This object is receiving unactivated swarmer shells to help us. Aborting.</span>")
+	return FALSE
+
+/obj/structure/destructible/clockwork/massive/celestial_gateway/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
+	to_chat(S, "<span class='warning'>This object is multiplying existing resources. Aborting.</span>")
 	return FALSE
 
+/obj/structure/lattice/catwalk/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
+	. = ..()
+	var/turf/here = get_turf(src)
+	for(var/A in here.contents)
+		var/obj/structure/cable/C = A
+		if(istype(C))
+			to_chat(S, "<span class='warning'>Disrupting the power grid would bring no benefit to us. Aborting.</span>")
+			return FALSE
+
+
 /obj/item/device/unactivated_swarmer/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
-	if(S.resources + 50 > S.max_resources)
-		S << "<span class='warning'>We have too many resources to reconsume this shell. Aborting.</span>"
-	else
-		..()
-		S.resources += 49 //refund the whole thing
+	..()
 	return FALSE //would logically be TRUE, but we don't want AI swarmers eating player spawn chances.
 
+/obj/item/device/unactivated_swarmer/IntegrateAmount()
+	return 50
+
+/obj/machinery/hydroponics/soil/swarmer_act(mob/living/simple_animal/hostile/swarmer/S)
+	to_chat(S, "<span class='warning'>This object does not contain enough materials to work with.</span>")
+	return FALSE
+
 ////END CTRL CLICK FOR SWARMERS////
 
 /mob/living/simple_animal/hostile/swarmer/proc/Fabricate(atom/fabrication_object,fabrication_cost = 0)
 	if(!isturf(loc))
-		src << "<span class='warning'>This is not a suitable location for fabrication. We need more space.</span>"
+		to_chat(src, "<span class='warning'>This is not a suitable location for fabrication. We need more space.</span>")
 	if(resources >= fabrication_cost)
 		resources -= fabrication_cost
 	else
-		src << "<span class='warning'>You do not have the necessary resources to fabricate this object.</span>"
+		to_chat(src, "<span class='warning'>You do not have the necessary resources to fabricate this object.</span>")
 		return 0
 	return new fabrication_object(loc)
 
-
 /mob/living/simple_animal/hostile/swarmer/proc/Integrate(obj/item/target)
-	if(resources >= max_resources)
-		src << "<span class='warning'>We cannot hold more materials!</span>"
+	var/resource_gain = target.IntegrateAmount()
+	if(resources + resource_gain > max_resources)
+		to_chat(src, "<span class='warning'>We cannot hold more materials!</span>")
 		return TRUE
-	if((target.materials[MAT_METAL]) || (target.materials[MAT_GLASS]))
-		resources++
+	if(resource_gain)
+		resources += resource_gain
 		do_attack_animation(target)
 		changeNext_move(CLICK_CD_MELEE)
-		var/obj/effect/overlay/temp/swarmer/integrate/I = PoolOrNew(/obj/effect/overlay/temp/swarmer/integrate, get_turf(target))
+		var/obj/effect/overlay/temp/swarmer/integrate/I = new /obj/effect/overlay/temp/swarmer/integrate(get_turf(target))
 		I.pixel_x = target.pixel_x
 		I.pixel_y = target.pixel_y
 		I.pixel_z = target.pixel_z
@@ -404,12 +448,12 @@
 		qdel(target)
 		return TRUE
 	else
-		src << "<span class='warning'>\the [target] is incompatible with our internal matter recycler.</span>"
+		to_chat(src, "<span class='warning'>\the [target] is incompatible with our internal matter recycler.</span>")
 	return FALSE
 
 
 /mob/living/simple_animal/hostile/swarmer/proc/DisIntegrate(atom/movable/target)
-	PoolOrNew(/obj/effect/overlay/temp/swarmer/disintegration, get_turf(target))
+	new /obj/effect/overlay/temp/swarmer/disintegration(get_turf(target))
 	do_attack_animation(target)
 	changeNext_move(CLICK_CD_MELEE)
 	target.ex_act(3)
@@ -420,13 +464,10 @@
 		return
 
 	if(z != ZLEVEL_STATION && z != ZLEVEL_LAVALAND)
-		src << "<span class='warning'>Our bluespace transceiver cannot \
-			locate a viable bluespace link, our teleportation abilities \
-			are useless in this area.</span>"
+		to_chat(src, "<span class='warning'>Our bluespace transceiver cannot locate a viable bluespace link, our teleportation abilities are useless in this area.</span>")
 		return
 
-	src << "<span class='info'>Attempting to remove this being from \
-		our presence.</span>"
+	to_chat(src, "<span class='info'>Attempting to remove this being from our presence.</span>")
 
 	if(!do_mob(src, target, 30))
 		return
@@ -456,18 +497,18 @@
 
 /mob/living/simple_animal/hostile/swarmer/proc/DismantleMachine(obj/machinery/target)
 	do_attack_animation(target)
-	src << "<span class='info'>We begin to dismantle this machine. We will need to be uninterrupted.</span>"
-	var/obj/effect/overlay/temp/swarmer/dismantle/D = PoolOrNew(/obj/effect/overlay/temp/swarmer/dismantle, get_turf(target))
+	to_chat(src, "<span class='info'>We begin to dismantle this machine. We will need to be uninterrupted.</span>")
+	var/obj/effect/overlay/temp/swarmer/dismantle/D = new /obj/effect/overlay/temp/swarmer/dismantle(get_turf(target))
 	D.pixel_x = target.pixel_x
 	D.pixel_y = target.pixel_y
 	D.pixel_z = target.pixel_z
 	if(do_mob(src, target, 100))
-		src << "<span class='info'>Dismantling complete.</span>"
+		to_chat(src, "<span class='info'>Dismantling complete.</span>")
 		var/obj/item/stack/sheet/metal/M = new /obj/item/stack/sheet/metal(target.loc)
 		M.amount = 5
 		for(var/obj/item/I in target.component_parts)
 			I.loc = M.loc
-		var/obj/effect/overlay/temp/swarmer/disintegration/N = PoolOrNew(/obj/effect/overlay/temp/swarmer/disintegration, get_turf(target))
+		var/obj/effect/overlay/temp/swarmer/disintegration/N = new /obj/effect/overlay/temp/swarmer/disintegration(get_turf(target))
 		N.pixel_x = target.pixel_x
 		N.pixel_y = target.pixel_y
 		N.pixel_z = target.pixel_z
@@ -507,11 +548,16 @@
 	icon_state = "ui_light"
 	layer = MOB_LAYER
 	resistance_flags = FIRE_PROOF | UNACIDABLE | ACID_PROOF
-	luminosity = 1
+	var/lon_range = 1
+	light_color = LIGHT_COLOR_CYAN
 	obj_integrity = 30
 	max_integrity = 30
 	anchored = 1
 
+/obj/structure/swarmer/Initialize(mapload)
+	..()
+	set_light(lon_range)
+
 /obj/structure/swarmer/play_attack_sound(damage_amount, damage_type = BRUTE, damage_flag = 0)
 	switch(damage_type)
 		if(BRUTE)
@@ -546,7 +592,7 @@
 	set category = "Swarmer"
 	set desc = "Creates a simple trap that will non-lethally electrocute anything that steps on it. Costs 5 resources"
 	if(locate(/obj/structure/swarmer/trap) in loc)
-		src << "<span class='warning'>There is already a trap here. Aborting.</span>"
+		to_chat(src, "<span class='warning'>There is already a trap here. Aborting.</span>")
 		return
 	Fabricate(/obj/structure/swarmer/trap, 5)
 
@@ -556,10 +602,10 @@
 	set category = "Swarmer"
 	set desc = "Creates a barricade that will stop anything but swarmers and disabler beams from passing through."
 	if(locate(/obj/structure/swarmer/blockade) in loc)
-		src << "<span class='warning'>There is already a blockade here. Aborting.</span>"
+		to_chat(src, "<span class='warning'>There is already a blockade here. Aborting.</span>")
 		return
 	if(resources < 5)
-		src << "<span class='warning'>We do not have the resources for this!</span>"
+		to_chat(src, "<span class='warning'>We do not have the resources for this!</span>")
 		return
 	if(do_mob(src, src, 10))
 		Fabricate(/obj/structure/swarmer/blockade, 5)
@@ -569,7 +615,7 @@
 	name = "swarmer blockade"
 	desc = "A quickly assembled energy blockade. Will not retain its form if damaged enough, but disabler beams and swarmers pass right through."
 	icon_state = "barricade"
-	luminosity = 1
+	light_range = 1
 	obj_integrity = 50
 	max_integrity = 50
 
@@ -583,12 +629,12 @@
 	set name = "Replicate"
 	set category = "Swarmer"
 	set desc = "Creates a shell for a new swarmer. Swarmers will self activate."
-	src << "<span class='info'>We are attempting to replicate ourselves. We will need to stand still until the process is complete.</span>"
+	to_chat(src, "<span class='info'>We are attempting to replicate ourselves. We will need to stand still until the process is complete.</span>")
 	if(resources < 50)
-		src << "<span class='warning'>We do not have the resources for this!</span>"
+		to_chat(src, "<span class='warning'>We do not have the resources for this!</span>")
 		return
 	if(!isturf(loc))
-		src << "<span class='warning'>This is not a suitable location for replicating ourselves. We need more room.</span>"
+		to_chat(src, "<span class='warning'>This is not a suitable location for replicating ourselves. We need more room.</span>")
 		return
 	if(do_mob(src, src, 100))
 		var/createtype = SwarmerTypeToCreate()
@@ -606,25 +652,25 @@
 	set desc = "Attempts to repair damage to our body. You will have to remain motionless until repairs are complete."
 	if(!isturf(loc))
 		return
-	src << "<span class='info'>Attempting to repair damage to our body, stand by...</span>"
+	to_chat(src, "<span class='info'>Attempting to repair damage to our body, stand by...</span>")
 	if(do_mob(src, src, 100))
 		adjustHealth(-100)
-		src << "<span class='info'>We successfully repaired ourselves.</span>"
+		to_chat(src, "<span class='info'>We successfully repaired ourselves.</span>")
 
 /mob/living/simple_animal/hostile/swarmer/proc/ToggleLight()
-	if(!luminosity)
-		SetLuminosity(3)
+	if(!light_range)
+		set_light(3)
 	else
-		SetLuminosity(0)
+		set_light(0)
 
 /mob/living/simple_animal/hostile/swarmer/proc/swarmer_chat(msg)
 	var/rendered = "<B>Swarm communication - [src]</b> [say_quote(msg, get_spans())]"
 	for(var/mob/M in mob_list)
 		if(isswarmer(M))
-			M << rendered
+			to_chat(M, rendered)
 		if(isobserver(M))
 			var/link = FOLLOW_LINK(M, src)
-			M << "[link] [rendered]"
+			to_chat(M, "[link] [rendered]")
 
 /mob/living/simple_animal/hostile/swarmer/proc/ContactSwarmers()
 	var/message = input(src, "Announce to other swarmers", "Swarmer contact")
