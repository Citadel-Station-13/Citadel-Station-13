diff a/code/game/gamemodes/clock_cult/clock_items/clockwork_slab.dm b/code/game/gamemodes/clock_cult/clock_items/clockwork_slab.dm	(rejected hunks)
@@ -11,6 +11,7 @@
 	var/list/stored_components = list(BELLIGERENT_EYE = 0, VANGUARD_COGWHEEL = 0, GEIS_CAPACITOR = 0, REPLICANT_ALLOY = 0, HIEROPHANT_ANSIBLE = 0)
 	var/busy //If the slab is currently being used by something
 	var/production_time = 0
+	var/target_component_id //the target component ID to create, if any
 	var/no_cost = FALSE //If the slab is admin-only and needs no components and has no scripture locks
 	var/speed_multiplier = 1 //multiples how fast this slab recites scripture
 	var/nonhuman_usable = FALSE //if the slab can be used by nonhumans, defaults to off
@@ -44,47 +45,47 @@
 	if(!is_servant_of_ratvar(user))
 		add_servant_of_ratvar(user)
 
-/obj/item/clockwork/slab/cyborg
+/obj/item/clockwork/slab/cyborg //three scriptures, plus a spear and proselytizer
 	clockwork_desc = "A divine link to the Celestial Derelict, allowing for limited recital of scripture.\n\
 	Hitting a slab, a Servant with a slab, or a cache will <b>transfer</b> this slab's components into the target, the target's slab, or the global cache, respectively."
 	nonhuman_usable = TRUE
-	quickbound = list(/datum/clockwork_scripture/ranged_ability/judicial_marker, /datum/clockwork_scripture/ranged_ability/sentinels_compromise, \
-	/datum/clockwork_scripture/create_object/sigil_of_transgression, /datum/clockwork_scripture/create_object/vitality_matrix)
+	quickbound = list(/datum/clockwork_scripture/ranged_ability/judicial_marker, /datum/clockwork_scripture/ranged_ability/linked_vanguard, \
+	/datum/clockwork_scripture/create_object/tinkerers_cache)
 	actions_types = list()
 
-/obj/item/clockwork/slab/cyborg/engineer
-	quickbound = list(/datum/clockwork_scripture/create_object/tinkerers_cache, /datum/clockwork_scripture/create_object/sigil_of_transgression, \
-	/datum/clockwork_scripture/create_object/ocular_warden, /datum/clockwork_scripture/create_object/tinkerers_daemon)
+/obj/item/clockwork/slab/cyborg/engineer //five scriptures, plus a proselytizer
+	quickbound = list(/datum/clockwork_scripture/create_object/replicant, /datum/clockwork_scripture/create_object/cogscarab, \
+	/datum/clockwork_scripture/create_object/soul_vessel, /datum/clockwork_scripture/create_object/sigil_of_transmission, /datum/clockwork_scripture/create_object/interdiction_lens)
 
-/obj/item/clockwork/slab/cyborg/medical
-	quickbound = list(/datum/clockwork_scripture/ranged_ability/linked_vanguard, /datum/clockwork_scripture/ranged_ability/sentinels_compromise, /datum/clockwork_scripture/fellowship_armory, \
-	/datum/clockwork_scripture/create_object/mending_motor)
+/obj/item/clockwork/slab/cyborg/medical //five scriptures, plus a spear
+	quickbound = list(/datum/clockwork_scripture/ranged_ability/linked_vanguard, /datum/clockwork_scripture/ranged_ability/sentinels_compromise, \
+	/datum/clockwork_scripture/create_object/vitality_matrix, /datum/clockwork_scripture/fellowship_armory, /datum/clockwork_scripture/create_object/mending_motor)
 
-/obj/item/clockwork/slab/cyborg/security
-	quickbound = list(/datum/clockwork_scripture/channeled/belligerent, /datum/clockwork_scripture/ranged_ability/judicial_marker, /datum/clockwork_scripture/create_object/ocular_warden)
+/obj/item/clockwork/slab/cyborg/security //four scriptures, plus a spear
+	quickbound = list(/datum/clockwork_scripture/channeled/belligerent, /datum/clockwork_scripture/ranged_ability/judicial_marker, /datum/clockwork_scripture/channeled/taunting_tirade, \
+	/datum/clockwork_scripture/channeled/volt_void/cyborg)
 
-/obj/item/clockwork/slab/cyborg/peacekeeper
+/obj/item/clockwork/slab/cyborg/peacekeeper //four scriptures, plus a spear
 	quickbound = list(/datum/clockwork_scripture/channeled/belligerent, /datum/clockwork_scripture/ranged_ability/judicial_marker, /datum/clockwork_scripture/channeled/taunting_tirade, \
-	/datum/clockwork_scripture/create_object/mania_motor)
+	/datum/clockwork_scripture/channeled/volt_void/cyborg)
 
-/obj/item/clockwork/slab/cyborg/janitor
-	quickbound = list(/datum/clockwork_scripture/channeled/belligerent, /datum/clockwork_scripture/channeled/volt_void, /datum/clockwork_scripture/create_object/sigil_of_transmission, \
-	/datum/clockwork_scripture/create_object/interdiction_lens)
+/obj/item/clockwork/slab/cyborg/janitor //five scriptures, plus a proselytizer
+	quickbound = list(/datum/clockwork_scripture/create_object/replicant, /datum/clockwork_scripture/create_object/sigil_of_transgression, \
+	/datum/clockwork_scripture/create_object/ocular_warden, /datum/clockwork_scripture/create_object/mania_motor, /datum/clockwork_scripture/create_object/tinkerers_daemon)
 
-/obj/item/clockwork/slab/cyborg/service
-	quickbound = list(/datum/clockwork_scripture/create_object/replicant, /datum/clockwork_scripture/fellowship_armory, /datum/clockwork_scripture/spatial_gateway, \
-	/datum/clockwork_scripture/create_object/clockwork_obelisk)
+/obj/item/clockwork/slab/cyborg/service //five scriptures, plus xray vision
+	quickbound = list(/datum/clockwork_scripture/create_object/replicant, /datum/clockwork_scripture/create_object/tinkerers_cache, \
+	/datum/clockwork_scripture/spatial_gateway, /datum/clockwork_scripture/fellowship_armory, /datum/clockwork_scripture/create_object/clockwork_obelisk)
 
-/obj/item/clockwork/slab/cyborg/miner
-	quickbound = list(/datum/clockwork_scripture/ranged_ability/judicial_marker, /datum/clockwork_scripture/ranged_ability/linked_vanguard, \
-	/datum/clockwork_scripture/create_object/sigil_of_transgression, /datum/clockwork_scripture/spatial_gateway)
+/obj/item/clockwork/slab/cyborg/miner //three scriptures, plus a spear and xray vision
+	quickbound = list(/datum/clockwork_scripture/ranged_ability/linked_vanguard, /datum/clockwork_scripture/spatial_gateway, /datum/clockwork_scripture/channeled/volt_void/cyborg)
 
 /obj/item/clockwork/slab/cyborg/access_display(mob/living/user)
-	user << "<span class='warning'>Use the action buttons to recite your limited set of scripture!</span>"
+	to_chat(user, "<span class='warning'>Use the action buttons to recite your limited set of scripture!</span>")
 
 /obj/item/clockwork/slab/New()
 	..()
-	update_quickbind()
+	update_slab_info(src)
 	START_PROCESSING(SSobj, src)
 	production_time = world.time + SLAB_PRODUCTION_TIME
 
@@ -92,6 +93,7 @@
 	STOP_PROCESSING(SSobj, src)
 	if(slab_ability && slab_ability.ranged_ability_user)
 		slab_ability.remove_ranged_ability()
+	slab_ability = null
 	return ..()
 
 /obj/item/clockwork/slab/ratvar_act()
@@ -102,7 +104,7 @@
 
 /obj/item/clockwork/slab/dropped(mob/user)
 	. = ..()
-	addtimer(src, "check_on_mob", 1, TIMER_NORMAL, user) //dropped is called before the item is out of the slot, so we need to check slightly later
+	addtimer(CALLBACK(src, .proc/check_on_mob, user), 1) //dropped is called before the item is out of the slot, so we need to check slightly later
 
 /obj/item/clockwork/slab/proc/check_on_mob(mob/user)
 	if(user && !(src in user.held_items) && slab_ability && slab_ability.ranged_ability_user) //if we happen to check and we AREN'T in user's hands, remove whatever ability we have
@@ -127,14 +129,16 @@
 	var/mob/living/L
 	L = get_atom_on_turf(src, /mob/living)
 	if(istype(L) && is_servant_of_ratvar(L) && (nonhuman_usable || ishuman(L)))
-		var/component_to_generate = get_weighted_component_id(src) //more likely to generate components that we have less of
+		var/component_to_generate = target_component_id
+		if(!component_to_generate)
+			component_to_generate = get_weighted_component_id(src) //more likely to generate components that we have less of
 		stored_components[component_to_generate]++
 		update_slab_info(src)
 		for(var/obj/item/clockwork/slab/S in L.GetAllContents()) //prevent slab abuse today
-			if(L == src)
+			if(S == src)
 				continue
 			S.production_time = production_time + 50 //set it to our next production plus five seconds, so that if you hold the same slabs, the same one will always generate
-		L << "<span class='warning'>Your slab cl[pick("ank", "ink", "unk", "ang")]s as it produces a new component.</span>"
+		to_chat(L, "<span class='warning'>Your slab cl[pick("ank", "ink", "unk", "ang")]s as it produces a </span><span class='[get_component_span(component_to_generate)]'>component</span><span class='warning'>.</span>")
 
 /obj/item/clockwork/slab/examine(mob/user)
 	..()
@@ -144,16 +148,16 @@
 				if(!quickbound[i])
 					continue
 				var/datum/clockwork_scripture/quickbind_slot = quickbound[i]
-				user << "<b>Quickbind</b> button: <span class='[get_component_span(initial(quickbind_slot.primary_component))]'>[initial(quickbind_slot.name)]</span>."
-		if(clockwork_caches)
-			user << "<b>Stored components (with global cache):</b>"
+				to_chat(user, "<b>Quickbind</b> button: <span class='[get_component_span(initial(quickbind_slot.primary_component))]'>[initial(quickbind_slot.name)]</span>.")
+		if(clockwork_caches) //show components on examine
+			to_chat(user, "<b>Stored components (with global cache):</b>")
 			for(var/i in stored_components)
-				user << "<span class='[get_component_span(i)]_small'><i>[get_component_name(i)][i != REPLICANT_ALLOY ? "s":""]:</i> <b>[stored_components[i]]</b> \
-				(<b>[stored_components[i] + clockwork_component_cache[i]]</b>)</span>"
+				to_chat(user, "<span class='[get_component_span(i)]_small'><i>[get_component_name(i)][i != REPLICANT_ALLOY ? "s":""]:</i> <b>[stored_components[i]]</b> \
+				(<b>[stored_components[i] + clockwork_component_cache[i]]</b>)</span>")
 		else
-			user << "<b>Stored components:</b>"
+			to_chat(user, "<b>Stored components:</b>")
 			for(var/i in stored_components)
-				user << "<span class='[get_component_span(i)]_small'><i>[get_component_name(i)][i != REPLICANT_ALLOY ? "s":""]:</i> <b>[stored_components[i]]</b></span>"
+				to_chat(user, "<span class='[get_component_span(i)]_small'><i>[get_component_name(i)][i != REPLICANT_ALLOY ? "s":""]:</i> <b>[stored_components[i]]</b></span>")
 
 //Component Transferal
 /obj/item/clockwork/slab/attack(mob/living/target, mob/living/carbon/human/user)
@@ -170,7 +174,7 @@
 					targetslab = S
 		if(targetslab)
 			if(targetslab == src)
-				user << "<span class='heavy_brass'>\"You can't transfer components into your own slab, idiot.\"</span>"
+				to_chat(user, "<span class='heavy_brass'>\"You can't transfer components into your own slab, idiot.\"</span>")
 			else
 				for(var/i in stored_components)
 					targetslab.stored_components[i] += stored_components[i]
@@ -180,7 +184,7 @@
 				user.visible_message("<span class='notice'>[user] empties [src] into [target]'s [targetslab.name].</span>", \
 				"<span class='notice'>You transfer your slab's components into [target]'s [targetslab.name].</span>")
 		else
-			user << "<span class='warning'>[target] has no slabs to transfer components to.</span>"
+			to_chat(user, "<span class='warning'>[target] has no slabs to transfer components to.</span>")
 	else
 		return ..()
 
@@ -203,11 +207,15 @@
 		return 1
 	else if(istype(I, /obj/item/clockwork/slab) && ratvarian)
 		var/obj/item/clockwork/slab/S = I
+		var/needs_update = FALSE
 		for(var/i in stored_components)
 			stored_components[i] += S.stored_components[i]
 			S.stored_components[i] = 0
-		update_slab_info(src)
-		update_slab_info(S)
+			if(S.stored_components[i])
+				needs_update = TRUE
+		if(needs_update)
+			update_slab_info(src)
+			update_slab_info(S)
 		user.visible_message("<span class='notice'>[user] empties [src] into [S].</span>", "<span class='notice'>You transfer your slab's components into [S].</span>")
 	else
 		return ..()
@@ -222,7 +230,7 @@
 
 /obj/item/clockwork/slab/proc/show_hierophant(mob/living/user)
 	if(!user.can_speak_vocal())
-		user << "<span class='warning'>You cannot speak into the slab!</span>"
+		to_chat(user, "<span class='warning'>You cannot speak into the slab!</span>")
 		return FALSE
 	var/message = stripped_input(user, "Enter a message to send to your fellow servants.", "Hierophant")
 	if(!message || !user || !user.canUseTopic(src) || !user.can_speak_vocal())
@@ -234,7 +242,7 @@
 //Scripture Recital
 /obj/item/clockwork/slab/attack_self(mob/living/user)
 	if(iscultist(user))
-		user << "<span class='heavy_brass'>\"You reek of blood. You've got a lot of nerve to even look at that slab.\"</span>"
+		to_chat(user, "<span class='heavy_brass'>\"You reek of blood. You've got a lot of nerve to even look at that slab.\"</span>")
 		user.visible_message("<span class='warning'>A sizzling sound comes from [user]'s hands!</span>", "<span class='userdanger'>[src] suddenly grows extremely hot in your hands!</span>")
 		playsound(get_turf(user), 'sound/weapons/sear.ogg', 50, 1)
 		user.drop_item()
@@ -243,15 +251,15 @@
 		user.apply_damage(5, BURN, "r_arm")
 		return 0
 	if(!is_servant_of_ratvar(user))
-		user << "<span class='warning'>The information on [src]'s display shifts rapidly. After a moment, your head begins to pound, and you tear your eyes away.</span>"
+		to_chat(user, "<span class='warning'>The information on [src]'s display shifts rapidly. After a moment, your head begins to pound, and you tear your eyes away.</span>")
 		user.confused += 5
 		user.dizziness += 5
 		return 0
 	if(busy)
-		user << "<span class='warning'>[src] refuses to work, displaying the message: \"[busy]!\"</span>"
+		to_chat(user, "<span class='warning'>[src] refuses to work, displaying the message: \"[busy]!\"</span>")
 		return 0
 	if(!nonhuman_usable && !ishuman(user))
-		user << "<span class='nezbere'>[src] hums fitfully in your hands, but doesn't seem to do anything...</span>"
+		to_chat(user, "<span class='nezbere'>[src] hums fitfully in your hands, but doesn't seem to do anything...</span>")
 		return 0
 	access_display(user)
 
@@ -273,13 +281,13 @@
 	if(!scripture || !user || !user.canUseTopic(src) || (!nonhuman_usable && !ishuman(user)))
 		return FALSE
 	if(user.get_active_held_item() != src)
-		user << "<span class='warning'>You need to hold the slab in your active hand to recite scripture!</span>"
+		to_chat(user, "<span class='warning'>You need to hold the slab in your active hand to recite scripture!</span>")
 		return FALSE
 	var/initial_tier = initial(scripture.tier)
 	if(initial_tier != SCRIPTURE_PERIPHERAL)
 		var/list/tiers_of_scripture = scripture_unlock_check()
 		if(!ratvar_awakens && !no_cost && !tiers_of_scripture[initial_tier])
-			user << "<span class='warning'>That scripture is not unlocked, and cannot be recited!</span>"
+			to_chat(user, "<span class='warning'>That scripture is not unlocked, and cannot be recited!</span>")
 			return FALSE
 	var/datum/clockwork_scripture/scripture_to_recite = new scripture
 	scripture_to_recite.slab = src
@@ -301,8 +309,8 @@
 		for(var/mob/living/M in living_mob_list)
 			if(is_servant_of_ratvar(M) && (ishuman(M) || issilicon(M)))
 				servants++
-		if(servants > 5)
-			servants -= 5
+		if(servants > SCRIPT_SERVANT_REQ)
+			servants -= SCRIPT_SERVANT_REQ
 			production_time += min(SLAB_SERVANT_SLOWDOWN * servants, SLAB_SLOWDOWN_MAXIMUM)
 		var/production_text_addon = ""
 		if(production_time != SLAB_PRODUCTION_TIME+SLAB_SLOWDOWN_MAXIMUM)
@@ -351,7 +359,7 @@
 		\
 		The second function of the clockwork slab is <b><font color=#BE8700>Recollection</font></b>, which will display this guide.<br><br>\
 		\
-		The third to fifth functions are three buttons in the top left while holding the slab.<br>From left to right, they are:<br>\
+		The remaining functions are several buttons in the top left while holding the slab.<br>From left to right, they are:<br>\
 		<b><font color=#DAAA18>Hierophant Network</font></b>, which allows communication to other Servants.<br>")
 		if(LAZYLEN(quickbound))
 			for(var/i in 1 to quickbound.len)
@@ -365,17 +373,17 @@
 		<font color=#BE8700 size=3><b><center>Purge all untruths and honor Ratvar.</center></b></font>"
 	return textlist.Join()
 
-/obj/item/clockwork/slab/ui_data(mob/user)
+/obj/item/clockwork/slab/ui_data(mob/user) //we display a lot of data via TGUI
 	var/list/data = list()
 	data["components"] = stored_components.Copy()
 	var/list/temp_data = list("<font color=#B18B25>")
-	for(var/i in data["components"])
+	for(var/i in data["components"]) //display the slab's components
 		temp_data += "<font color=[get_component_color_bright(i)]>[get_component_acronym(i)] <b>[data["components"][i]]</b></font>"
 		if(i != HIEROPHANT_ANSIBLE)
 			temp_data += " "
 		else
 			temp_data += " ("
-	if(clockwork_caches)
+	if(clockwork_caches) //if we have caches, display what's in the global cache
 		for(var/i in clockwork_component_cache)
 			temp_data += "<font color=[get_component_color_bright(i)]>[get_component_acronym(i)] <b>[data["components"][i] + clockwork_component_cache[i]]</b></font>"
 			if(i != HIEROPHANT_ANSIBLE)
@@ -386,7 +394,7 @@
 	temp_data = temp_data.Join()
 	data["components"] = temp_data
 
-	switch(selected_scripture)
+	switch(selected_scripture) //display info based on selected scripture tier
 		if(SCRIPTURE_DRIVER)
 			data["tier_info"] = "<font color=#B18B25><i>These scriptures are always unlocked.</i></font>"
 		if(SCRIPTURE_SCRIPT)
@@ -400,12 +408,16 @@
 
 	data["selected"] = selected_scripture
 
+	data["target_comp"] = "<font color=#B18B25>NONE</font>"
+	if(target_component_id) //if we have a component to make, display that, too
+		data["target_comp"] = "<font color=[get_component_color_bright(target_component_id)]>[get_component_acronym(target_component_id)]</font>"
+
 	generate_all_scripture()
 
 	data["scripture"] = list()
 	for(var/s in all_scripture)
-		var/datum/clockwork_scripture/S = s
-		if(S.tier == selected_scripture)
+		var/datum/clockwork_scripture/S = all_scripture[s]
+		if(S.tier == selected_scripture) //display only scriptures of the selected tier
 			var/scripture_color = get_component_color_bright(S.primary_component)
 			var/list/temp_info = list("name" = "<font color=[scripture_color]><b>[S.name]</b></font>",
 			"descname" = "<font color=[scripture_color]>([S.descname])</font>",
@@ -418,17 +430,24 @@
 				temp_info["bound"] = "<b>[found]</b>"
 			if(S.invokers_required > 1)
 				temp_info["invokers"] = "<font color=#B18B25>Invokers: <b>[S.invokers_required]</b></font>"
-			for(var/i in S.required_components)
-				temp_info["required"][i] += S.required_components[i]
-			var/list/really_temp_data = list()
-			for(var/i in temp_info["required"])
-				if(temp_info["required"][i])
-					really_temp_data += "<font color=[get_component_color_bright(i)]>[get_component_acronym(i)] <b>[temp_info["required"][i]]</b></font> "
-			really_temp_data = really_temp_data.Join()
-			temp_info["required"] = really_temp_data
+			var/costs_components = FALSE
+			for(var/i in S.consumed_components)
+				if(S.consumed_components[i])
+					temp_info["required"][i] += S.consumed_components[i]
+					costs_components = TRUE
+			if(costs_components) //if we have a component cost, we'll need a : next to the recital button
+				var/list/really_temp_data = list(": ")
+				for(var/i in temp_info["required"])
+					if(temp_info["required"][i])
+						really_temp_data += "<font color=[get_component_color_bright(i)]>[get_component_acronym(i)] <b>[temp_info["required"][i]]</b></font> "
+				really_temp_data = really_temp_data.Join()
+				temp_info["required"] = really_temp_data
+			else //and if we don't, we won't.
+				temp_info["required"] = ""
 			data["scripture"] += list(temp_info)
 	data["recollection"] = recollecting
-	data["rec_text"] = recollection()
+	if(recollecting)
+		data["rec_text"] = recollection()
 	return data
 
 /obj/item/clockwork/slab/ui_act(action, params)
@@ -436,9 +455,19 @@
 		if("toggle")
 			recollecting = !recollecting
 		if("recite")
-			addtimer(src, "recite_scripture", 0, TIMER_NORMAL, text2path(params["category"]), usr, FALSE)
+			INVOKE_ASYNC(src, .proc/recite_scripture, text2path(params["category"]), usr, FALSE)
 		if("select")
 			selected_scripture = params["category"]
+		if("component")
+			var/list/components = list("Random Components")
+			for(var/i in clockwork_component_cache)
+				var/cache_components = 0
+				if(clockwork_caches)
+					cache_components = clockwork_component_cache[i]
+				components["[get_component_name(i)] [(cache_components + stored_components[i])]"] = i
+			var/input_component = input("Choose a component type.", "Target Component") as null|anything in components
+			if(input_component && !..())
+				target_component_id = components[input_component]
 		if("bind")
 			var/datum/clockwork_scripture/path = text2path(params["category"]) //we need a path and not a string
 			var/found_index = quickbound.Find(path)
@@ -449,7 +478,7 @@
 					quickbound[found_index] = null //otherwise, leave it as a null so the scripture maintains position
 				update_quickbind()
 			else
-				var/target_index = input("Position of [initial(path.name)], 1 to 5?", text("Input"))  as num|null
+				var/target_index = input("Position of [initial(path.name)], 1 to 5?", "Input")  as num|null
 				if(isnum(target_index) && target_index > 0 && target_index < 6 && !..())
 					var/datum/clockwork_scripture/S
 					if(LAZYLEN(quickbound) >= target_index)
@@ -468,17 +497,24 @@
 
 /obj/item/clockwork/slab/proc/update_quickbind()
 	for(var/datum/action/item_action/clock/quickbind/Q in actions)
-		qdel(Q)
+		qdel(Q) //regenerate all our quickbound scriptures
 	if(LAZYLEN(quickbound))
 		for(var/i in 1 to quickbound.len)
 			if(!quickbound[i])
 				continue
 			var/datum/action/item_action/clock/quickbind/Q = new /datum/action/item_action/clock/quickbind(src)
 			Q.scripture_index = i
-			var/datum/clockwork_scripture/quickbind_slot = quickbound[i]
-			Q.name = "[initial(quickbind_slot.name)] ([Q.scripture_index])"
-			Q.desc = initial(quickbind_slot.quickbind_desc)
-			Q.button_icon_state = initial(quickbind_slot.name)
+			var/datum/clockwork_scripture/quickbind_slot = all_scripture[quickbound[i]]
+			Q.name = "[quickbind_slot.name] ([Q.scripture_index])"
+			var/list/temp_desc = list()
+			for(var/c in quickbind_slot.consumed_components) //show how much the bound scripture costs
+				if(quickbind_slot.consumed_components[c])
+					temp_desc += "<font color=[get_component_color_bright(c)]>[get_component_acronym(c)] <b>[quickbind_slot.consumed_components[c]]</b></font> "
+			if(LAZYLEN(temp_desc))
+				temp_desc += "<br>"
+			temp_desc += "[quickbind_slot.quickbind_desc]"
+			Q.desc = temp_desc.Join()
+			Q.button_icon_state = quickbind_slot.name
 			Q.UpdateButtonIcon()
 			if(isliving(loc))
 				Q.Grant(loc)
