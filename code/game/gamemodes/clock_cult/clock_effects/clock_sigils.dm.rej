diff a/code/game/gamemodes/clock_cult/clock_effects/clock_sigils.dm b/code/game/gamemodes/clock_cult/clock_effects/clock_sigils.dm	(rejected hunks)
@@ -35,7 +35,7 @@
 	if(isliving(AM))
 		var/mob/living/L = AM
 		if(L.stat <= stat_affected)
-			if((!is_servant_of_ratvar(L) || (is_servant_of_ratvar(L) && affects_servants)) && L.mind && (!isdrone(L) || istype(L, /mob/living/simple_animal/drone/cogscarab)))
+			if((!is_servant_of_ratvar(L) || (affects_servants && is_servant_of_ratvar(L))) && (L.mind || L.has_status_effect(STATUS_EFFECT_SIGILMARK)) && !isdrone(L))
 				var/obj/item/I = L.null_rod_check()
 				if(I)
 					L.visible_message("<span class='warning'>[L]'s [I.name] [resist_string], protecting them from [src]'s effects!</span>", \
@@ -51,8 +51,10 @@
 	name = "dull sigil"
 	desc = "A dull, barely-visible golden sigil. It's as though light was carved into the ground."
 	icon = 'icons/effects/clockwork_effects.dmi'
-	clockwork_desc = "A sigil that will stun the first non-servant to cross it. Nar-Sie's dogs will be knocked down."
+	clockwork_desc = "A sigil that will stun the next non-Servant to cross it."
 	icon_state = "sigildull"
+	layer = HIGH_SIGIL_LAYER
+	alpha = 60
 	color = "#FAE48C"
 	sigil_name = "Sigil of Transgression"
 
@@ -62,13 +64,13 @@
 		if(!is_servant_of_ratvar(M) && M != L)
 			M.flash_act()
 	if(iscultist(L))
-		L << "<span class='heavy_brass'>\"Watch your step, wretch.\"</span>"
+		to_chat(L, "<span class='heavy_brass'>\"Watch your step, wretch.\"</span>")
 		L.adjustBruteLoss(10)
 		L.Weaken(7)
 	L.visible_message("<span class='warning'>[src] appears around [L] in a burst of light!</span>", \
 	"<span class='userdanger'>[target_flashed ? "An unseen force":"The glowing sigil around you"] holds you in place!</span>")
 	L.Stun(5)
-	PoolOrNew(/obj/effect/overlay/temp/ratvar/sigil/transgression, get_turf(src))
+	new /obj/effect/overlay/temp/ratvar/sigil/transgression(get_turf(src))
 	qdel(src)
 
 
@@ -78,20 +80,22 @@
 	desc = "A luminous golden sigil. Something about it really bothers you."
 	clockwork_desc = "A sigil that will enslave the first person to cross it, provided they remain on it for seven seconds."
 	icon_state = "sigilsubmission"
-	color = "#FAE48C"
+	layer = LOW_SIGIL_LAYER
 	alpha = 125
+	color = "#FAE48C"
+	light_range = 2 //soft light
+	light_power = 0.9
+	light_color = "#FAE48C"
 	stat_affected = UNCONSCIOUS
 	resist_string = "glows faintly yellow"
 	var/convert_time = 70
-	var/glow_light = 2 //soft light
-	var/glow_falloff = 1
 	var/delete_on_finish = TRUE
 	sigil_name = "Sigil of Submission"
 	var/glow_type
 
 /obj/effect/clockwork/sigil/submission/New()
 	..()
-	SetLuminosity(glow_light,glow_falloff)
+	update_light()
 
 /obj/effect/clockwork/sigil/submission/proc/post_channel(mob/living/L)
 
@@ -101,7 +105,7 @@
 	animate(src, color = "#AF0AAF", time = convert_time)
 	var/obj/effect/overlay/temp/ratvar/sigil/glow
 	if(glow_type)
-		glow = PoolOrNew(glow_type, get_turf(src))
+		glow = new glow_type(get_turf(src))
 		animate(glow, alpha = 255, time = convert_time)
 	var/I = 0
 	while(I < convert_time && get_turf(L) == get_turf(src))
@@ -111,12 +115,12 @@
 		if(glow)
 			qdel(glow)
 		animate(src, color = oldcolor, time = 20)
-		addtimer(src, "update_atom_colour", 20)
+		addtimer(CALLBACK(src, /atom/proc/update_atom_colour), 20)
 		visible_message("<span class='warning'>[src] slowly stops glowing!</span>")
 		return
 	post_channel(L)
 	if(is_eligible_servant(L))
-		L << "<span class='heavy_brass'>\"You belong to me now.\"</span>"
+		to_chat(L, "<span class='heavy_brass'>\"You belong to me now.\"</span>")
 	add_servant_of_ratvar(L)
 	L.Weaken(3) //Completely defenseless for about five seconds - mainly to give them time to read over the information they've just been presented with
 	L.Stun(3)
@@ -127,17 +131,17 @@
 	for(var/M in mob_list)
 		if(isobserver(M))
 			var/link = FOLLOW_LINK(M, L)
-			M <<  "[link] <span class='heavy_brass'>[message] [L.real_name]!</span>"
+			to_chat(M,  "[link] <span class='heavy_brass'>[message] [L.real_name]!</span>")
 		else if(is_servant_of_ratvar(M))
 			if(M == L)
-				M << "<span class='heavy_brass'>[message] you!</span>"
+				to_chat(M, "<span class='heavy_brass'>[message] you!</span>")
 			else
-				M << "<span class='heavy_brass'>[message] [L.real_name]!</span>"
+				to_chat(M, "<span class='heavy_brass'>[message] [L.real_name]!</span>")
 	if(delete_on_finish)
 		qdel(src)
 	else
 		animate(src, color = oldcolor, time = 20)
-		addtimer(src, "update_atom_colour", 20)
+		addtimer(CALLBACK(src, /atom/proc/update_atom_colour), 20)
 		visible_message("<span class='warning'>[src] slowly stops glowing!</span>")
 
 
@@ -148,10 +152,11 @@
 	clockwork_desc = "A sigil that will enslave any person who crosses it, provided they remain on it for seven seconds. \n\
 	It can convert a mindshielded target once before disppearing, but can convert any number of non-implanted targets."
 	icon_state = "sigiltransgression"
-	color = "#A97F1B"
 	alpha = 200
-	glow_light = 4 //bright light
-	glow_falloff = 3
+	color = "#A97F1B"
+	light_range = 3 //bright light
+	light_power = 1
+	light_color = "#A97F1B"
 	delete_on_finish = FALSE
 	sigil_name = "Sigil of Accession"
 	glow_type = /obj/effect/overlay/temp/ratvar/sigil/accession
@@ -159,11 +164,10 @@
 
 /obj/effect/clockwork/sigil/submission/accession/post_channel(mob/living/L)
 	if(L.isloyal())
-		var/mob/living/carbon/C = L
 		delete_on_finish = TRUE
-		C.visible_message("<span class='warning'>[C] visibly trembles!</span>", \
+		L.visible_message("<span class='warning'>[L] visibly trembles!</span>", \
 		"<span class='sevtug'>[text2ratvar("You will be mine and his. This puny trinket will not stop me.")]</span>")
-		for(var/obj/item/weapon/implant/mindshield/M in C.implants)
+		for(var/obj/item/weapon/implant/mindshield/M in L.implants)
 			qdel(M)
 
 
@@ -171,14 +175,15 @@
 /obj/effect/clockwork/sigil/transmission
 	name = "suspicious sigil"
 	desc = "A glowing orange sigil. The air around it feels staticky."
-	clockwork_desc = "A sigil that will serve as a battery for clockwork structures. Use Volt Void while standing on it to charge it."
+	clockwork_desc = "A sigil that will serve as a battery for clockwork structures."
 	icon_state = "sigiltransmission"
-	color = "#EC8A2D"
 	alpha = 50
+	color = "#EC8A2D"
+	light_color = "#EC8A2D"
 	resist_string = "glows faintly"
 	sigil_name = "Sigil of Transmission"
 	affects_servants = TRUE
-	var/power_charge = REPLICANT_ALLOY_POWER //starts with REPLICANT_ALLOY_POWER by default
+	var/power_charge = CLOCKCULT_POWER_UNIT //starts with CLOCKCULT_POWER_UNIT by default
 
 /obj/effect/clockwork/sigil/transmission/ex_act(severity)
 	if(severity == 3)
@@ -190,26 +195,30 @@
 /obj/effect/clockwork/sigil/transmission/examine(mob/user)
 	..()
 	if(is_servant_of_ratvar(user) || isobserver(user))
-		user << "<span class='[power_charge ? "brass":"alloy"]'>It is storing <b>[ratvar_awakens ? "INFINITY":"[power_charge]"]W</b> of power.</span>"
+		var/structure_number = 0
+		for(var/obj/structure/destructible/clockwork/powered/P in range(SIGIL_ACCESS_RANGE, src))
+			structure_number++
+		to_chat(user, "<span class='[power_charge ? "brass":"alloy"]'>It is storing <b>[ratvar_awakens ? "INFINITY":"[power_charge]"]W</b> of power, \
+		and <b>[structure_number]</b> Clockwork Structure[structure_number == 1 ? "":"s"] [structure_number == 1 ? "is":"are"] in range.</span>")
 		if(iscyborg(user))
-			user << "<span class='brass'>You can recharge from the [sigil_name] by crossing it.</span>"
+			to_chat(user, "<span class='brass'>You can recharge from the [sigil_name] by crossing it.</span>")
 
 /obj/effect/clockwork/sigil/transmission/sigil_effects(mob/living/L)
 	if(is_servant_of_ratvar(L))
 		if(iscyborg(L))
 			charge_cyborg(L)
 	else if(power_charge)
-		L << "<span class='brass'>You feel a slight, static shock.</span>"
+		to_chat(L, "<span class='brass'>You feel a slight, static shock.</span>")
 
 /obj/effect/clockwork/sigil/transmission/proc/charge_cyborg(mob/living/silicon/robot/cyborg)
 	if(!cyborg_checks(cyborg))
 		return
-	cyborg << "<span class='brass'>You start to charge from the [sigil_name]...</span>"
+	to_chat(cyborg, "<span class='brass'>You start to charge from the [sigil_name]...</span>")
 	if(!do_after(cyborg, 50, target = src))
 		return
 	if(!cyborg_checks(cyborg))
 		return
-	var/giving_power = min(round((cyborg.cell.maxcharge - cyborg.cell.charge) * 0.02) * 50, power_charge) //give the borg either all our power or their missing power floored to 50
+	var/giving_power = min(Floor(cyborg.cell.maxcharge - cyborg.cell.charge, MIN_CLOCKCULT_POWER), power_charge) //give the borg either all our power or their missing power floored to MIN_CLOCKCULT_POWER
 	if(modify_charge(giving_power))
 		cyborg.visible_message("<span class='warning'>[cyborg] glows a brilliant orange!</span>")
 		var/previous_color = cyborg.color
@@ -217,20 +226,20 @@
 		var/datum/status_effect/cyborg_power_regen/CPR = cyborg.apply_status_effect(STATUS_EFFECT_POWERREGEN)
 		CPR.power_to_give = giving_power * 0.1 //ten ticks, restoring 10% each
 		animate(cyborg, color = previous_color, time = 100)
-		addtimer(cyborg, "update_atom_colour", 100)
+		addtimer(CALLBACK(cyborg, /atom/proc/update_atom_colour), 100)
 
 /obj/effect/clockwork/sigil/transmission/proc/cyborg_checks(mob/living/silicon/robot/cyborg)
 	if(!cyborg.cell)
-		cyborg << "<span class='warning'>You have no cell!</span>"
+		to_chat(cyborg, "<span class='warning'>You have no cell!</span>")
 		return FALSE
 	if(!power_charge)
-		cyborg << "<span class='warning'>The [sigil_name] has no stored power!</span>"
+		to_chat(cyborg, "<span class='warning'>The [sigil_name] has no stored power!</span>")
 		return FALSE
 	if(cyborg.cell.charge > cyborg.cell.maxcharge - MIN_CLOCKCULT_POWER)
-		cyborg << "<span class='warning'>You are already at maximum charge!</span>"
+		to_chat(cyborg, "<span class='warning'>You are already at maximum charge!</span>")
 		return FALSE
 	if(cyborg.has_status_effect(STATUS_EFFECT_POWERREGEN))
-		cyborg << "<span class='warning'>You are already regenerating power!</span>"
+		to_chat(cyborg, "<span class='warning'>You are already regenerating power!</span>")
 		return FALSE
 	return TRUE
 
@@ -254,10 +263,9 @@
 	else
 		alpha = min(initial(alpha) + power_charge*0.02, 255)
 	if(!power_charge)
-		SetLuminosity(0)
+		set_light(0)
 	else
-		SetLuminosity(round(alpha*0.03, 1), round(alpha*0.02, 1))
-
+		set_light(round(alpha*0.02, 1), round(alpha*0.005, 1))
 
 //Vitality Matrix: Drains health from non-servants to heal or even revive servants.
 /obj/effect/clockwork/sigil/vitality
@@ -265,65 +273,67 @@
 	desc = "A faint blue sigil. Looking at it makes you feel protected."
 	clockwork_desc = "A sigil that will drain non-Servants that remain on it. Servants that remain on it will be healed if it has any vitality drained."
 	icon_state = "sigilvitality"
-	color = "#123456"
+	layer = SIGIL_LAYER
 	alpha = 75
+	color = "#123456"
 	affects_servants = TRUE
 	stat_affected = DEAD
 	resist_string = "glows shimmering yellow"
 	sigil_name = "Vitality Matrix"
-	var/vitality = 0
+	var/static/vitality = 0
 	var/base_revive_cost = 20
 	var/sigil_active = FALSE
 	var/animation_number = 3 //each cycle increments this by 1, at 4 it produces an animation and resets
+	var/static/list/damage_heal_order = list(CLONE, TOX, BURN, BRUTE, OXY) //we heal damage in this order
 
 /obj/effect/clockwork/sigil/vitality/examine(mob/user)
 	..()
 	if(is_servant_of_ratvar(user) || isobserver(user))
-		user << "<span class='[vitality ? "inathneq_small":"alloy"]'>It is storing <b>[ratvar_awakens ? "INFINITE":"[vitality]"]</b> units of vitality.</span>"
-		user << "<span class='inathneq_small'>It requires at least <b>[base_revive_cost]</b> units of vitality to revive dead Servants, in addition to any damage the Servant has.</span>"
+		to_chat(user, "<span class='[vitality ? "inathneq_small":"alloy"]'>It has access to <b>[ratvar_awakens ? "INFINITE":"[vitality]"]</b> units of vitality.</span>")
+		if(ratvar_awakens)
+			to_chat(user, "<span class='inathneq_small'>It can revive Servants at no cost!</span>")
+		else
+			to_chat(user, "<span class='inathneq_small'>It can revive Servants at a cost of <b>[base_revive_cost]</b> vitality plus vitality equal to the non-oxygen damage they have, in addition to being destroyed in the process.</span>")
 
 /obj/effect/clockwork/sigil/vitality/sigil_effects(mob/living/L)
 	if((is_servant_of_ratvar(L) && L.suiciding) || sigil_active)
 		return
 	visible_message("<span class='warning'>[src] begins to glow bright blue!</span>")
 	animate(src, alpha = 255, time = 10)
-	addtimer(src, "update_alpha", 10)
+	addtimer(CALLBACK(src, .proc/update_alpha), 10)
 	sleep(10)
 //as long as they're still on the sigil and are either not a servant or they're a servant AND it has remaining vitality
-	while(L && (!is_servant_of_ratvar(L) || (is_servant_of_ratvar(L) && vitality)) && get_turf(L) == get_turf(src))
+	while(L && (!is_servant_of_ratvar(L) || (is_servant_of_ratvar(L) && (ratvar_awakens || vitality))) && get_turf(L) == get_turf(src))
 		sigil_active = TRUE
 		if(animation_number >= 4)
-			PoolOrNew(/obj/effect/overlay/temp/ratvar/sigil/vitality, get_turf(src))
+			new /obj/effect/overlay/temp/ratvar/sigil/vitality(get_turf(src))
 			animation_number = 0
 		animation_number++
 		if(!is_servant_of_ratvar(L))
 			var/vitality_drained = 0
 			if(L.stat == DEAD)
 				vitality_drained = L.maxHealth
-				var/obj/effect/overlay/temp/ratvar/sigil/vitality/V = PoolOrNew(/obj/effect/overlay/temp/ratvar/sigil/vitality, get_turf(src))
+				var/obj/effect/overlay/temp/ratvar/sigil/vitality/V = new /obj/effect/overlay/temp/ratvar/sigil/vitality(get_turf(src))
 				animate(V, alpha = 0, transform = matrix()*2, time = 8)
 				playsound(L, 'sound/magic/WandODeath.ogg', 50, 1)
 				L.visible_message("<span class='warning'>[L] collapses in on [L.p_them()]self as [src] flares bright blue!</span>")
-				L << "<span class='inathneq_large'>\"[text2ratvar("Your life will not be wasted.")]\"</span>"
+				to_chat(L, "<span class='inathneq_large'>\"[text2ratvar("Your life will not be wasted.")]\"</span>")
 				for(var/obj/item/W in L)
-					if(!L.unEquip(W))
+					if(!L.dropItemToGround(W))
 						qdel(W)
 				L.dust()
 			else
-				vitality_drained = L.adjustToxLoss(1.5)
+				if(!ratvar_awakens && L.stat == CONSCIOUS)
+					vitality_drained = L.adjustToxLoss(1)
+				else
+					vitality_drained = L.adjustToxLoss(1.5)
 			if(vitality_drained)
 				vitality += vitality_drained
 			else
 				break
 		else
-			var/clone_to_heal = L.getCloneLoss()
-			var/tox_to_heal = L.getToxLoss()
-			var/burn_to_heal = L.getFireLoss()
-			var/brute_to_heal = L.getBruteLoss()
-			var/oxy_to_heal = L.getOxyLoss()
-			var/total_damage = clone_to_heal + tox_to_heal + burn_to_heal + brute_to_heal + oxy_to_heal
 			if(L.stat == DEAD)
-				var/revival_cost = base_revive_cost + total_damage - oxy_to_heal //ignores oxygen damage
+				var/revival_cost = base_revive_cost + L.getCloneLoss() + L.getToxLoss() + L.getFireLoss() + L.getBruteLoss() //ignores oxygen damage
 				if(ratvar_awakens)
 					revival_cost = 0
 				var/mob/dead/observer/ghost = L.get_ghost(TRUE)
@@ -331,50 +341,28 @@
 					if(ghost)
 						ghost.reenter_corpse()
 					L.revive(1, 1)
+					var/obj/effect/overlay/temp/ratvar/sigil/vitality/V = new /obj/effect/overlay/temp/ratvar/sigil/vitality(get_turf(src))
+					animate(V, alpha = 0, transform = matrix()*2, time = 8)
 					playsound(L, 'sound/magic/Staff_Healing.ogg', 50, 1)
-					L.visible_message("<span class='warning'>[L] suddenly gets back up, [L.p_their()] mouth dripping blue ichor!</span>", \
+					L.visible_message("<span class='warning'>[L] suddenly gets back up, [ratvar_awakens ? "[L.p_their()] body dripping blue ichor":"even as [src] scatters into blue sparks around [L.p_them()]"]!</span>", \
 					"<span class='inathneq'>\"[text2ratvar("You will be okay, child.")]\"</span>")
 					vitality -= revival_cost
+					if(!ratvar_awakens)
+						qdel(src)
 				break
-			if(!total_damage)
+			var/vitality_for_cycle = 3
+			if(!ratvar_awakens)
+				if(L.stat == CONSCIOUS)
+					vitality_for_cycle = 2
+				vitality_for_cycle = min(vitality, vitality_for_cycle)
+			var/vitality_used = L.heal_ordered_damage(vitality_for_cycle, damage_heal_order)
+
+			if(!vitality_used)
 				break
-			var/vitality_for_cycle = min(vitality, 3)
-			var/vitality_used = 0
-			if(ratvar_awakens)
-				vitality_for_cycle = 3
-
-			if(clone_to_heal && vitality_for_cycle)
-				var/healing = min(vitality_for_cycle, clone_to_heal)
-				vitality_for_cycle -= healing
-				L.adjustCloneLoss(-healing)
-				vitality_used += healing
-
-			if(tox_to_heal && vitality_for_cycle)
-				var/healing = min(vitality_for_cycle, tox_to_heal)
-				vitality_for_cycle -= healing
-				L.adjustToxLoss(-healing)
-				vitality_used += healing
-
-			if(burn_to_heal && vitality_for_cycle)
-				var/healing = min(vitality_for_cycle, burn_to_heal)
-				vitality_for_cycle -= healing
-				L.adjustFireLoss(-healing)
-				vitality_used += healing
-
-			if(brute_to_heal && vitality_for_cycle)
-				var/healing = min(vitality_for_cycle, brute_to_heal)
-				vitality_for_cycle -= healing
-				L.adjustBruteLoss(-healing)
-				vitality_used += healing
-
-			if(oxy_to_heal && vitality_for_cycle)
-				var/healing = min(vitality_for_cycle, oxy_to_heal)
-				vitality_for_cycle -= healing
-				L.adjustOxyLoss(-healing)
-				vitality_used += healing
 
 			if(!ratvar_awakens)
 				vitality -= vitality_used
+
 		sleep(2)
 
 	if(sigil_active)
@@ -383,7 +371,7 @@
 		visible_message("<span class='warning'>[src] slowly stops glowing!</span>")
 	if(sigil_active || alpha == 255)
 		animate(src, alpha = initial(alpha), time = 10)
-		addtimer(src, "update_alpha", 10)
+		addtimer(CALLBACK(src, .proc/update_alpha), 10)
 
 /obj/effect/clockwork/sigil/vitality/proc/update_alpha()
 	if(sigil_active)
