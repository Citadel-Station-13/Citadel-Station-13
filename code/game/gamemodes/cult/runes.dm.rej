diff a/code/game/gamemodes/cult/runes.dm b/code/game/gamemodes/cult/runes.dm	(rejected hunks)
@@ -1,5 +1,6 @@
 /var/list/sacrificed = list() //a mixed list of minds and mobs
 var/list/non_revealed_runes = (subtypesof(/obj/effect/rune) - /obj/effect/rune/malformed)
+var/global/list/rune_types //Every rune that can be drawn by tomes
 
 /*
 
@@ -22,7 +23,7 @@ To draw a rune, use an arcane tome.
 	icon = 'icons/obj/rune.dmi'
 	icon_state = "1"
 	resistance_flags = FIRE_PROOF | UNACIDABLE | ACID_PROOF
-	layer = ABOVE_NORMAL_TURF_LAYER
+	layer = LOW_OBJ_LAYER
 	color = "#FF0000"
 
 	var/invocation = "Aiy ele-mayo!" //This is said by cultists when the rune is invoked.
@@ -47,27 +48,27 @@ To draw a rune, use an arcane tome.
 /obj/effect/rune/examine(mob/user)
 	..()
 	if(iscultist(user) || user.stat == DEAD) //If they're a cultist or a ghost, tell them the effects
-		user << "<b>Name:</b> [cultist_name]"
-		user << "<b>Effects:</b> [capitalize(cultist_desc)]"
-		user << "<b>Required Acolytes:</b> [req_cultists_text ? "[req_cultists_text]":"[req_cultists]"]"
+		to_chat(user, "<b>Name:</b> [cultist_name]")
+		to_chat(user, "<b>Effects:</b> [capitalize(cultist_desc)]")
+		to_chat(user, "<b>Required Acolytes:</b> [req_cultists_text ? "[req_cultists_text]":"[req_cultists]"]")
 		if(req_keyword && keyword)
-			user << "<b>Keyword:</b> [keyword]"
+			to_chat(user, "<b>Keyword:</b> [keyword]")
 
 /obj/effect/rune/attackby(obj/I, mob/user, params)
 	if(istype(I, /obj/item/weapon/tome) && iscultist(user))
-		user << "<span class='notice'>You carefully erase the [lowertext(cultist_name)] rune.</span>"
+		to_chat(user, "<span class='notice'>You carefully erase the [lowertext(cultist_name)] rune.</span>")
 		qdel(src)
 		return
 	else if(istype(I, /obj/item/weapon/nullrod))
 		user.say("BEGONE FOUL MAGIKS!!")
-		user << "<span class='danger'>You disrupt the magic of [src] with [I].</span>"
+		to_chat(user, "<span class='danger'>You disrupt the magic of [src] with [I].</span>")
 		qdel(src)
 		return
 	return
 
 /obj/effect/rune/attack_hand(mob/living/user)
 	if(!iscultist(user))
-		user << "<span class='warning'>You aren't able to understand the words of [src].</span>"
+		to_chat(user, "<span class='warning'>You aren't able to understand the words of [src].</span>")
 		return
 	var/list/invokers = can_invoke(user)
 	if(invokers.len >= req_cultists)
@@ -80,7 +81,7 @@ To draw a rune, use an arcane tome.
 		if(construct_invoke || !iscultist(M)) //if you're not a cult construct we want the normal fail message
 			attack_hand(M)
 		else
-			M << "<span class='warning'>You are unable to invoke the rune!</span>"
+			to_chat(M, "<span class='warning'>You are unable to invoke the rune!</span>")
 
 /obj/effect/rune/proc/talismanhide() //for talisman of revealing/hiding
 	visible_message("<span class='danger'>[src] fades away.</span>")
@@ -107,8 +108,8 @@ structure_check() searches for nearby cultist structures required for the invoca
 	var/list/invokers = list() //people eligible to invoke the rune
 	var/list/chanters = list() //people who will actually chant the rune when passed to invoke()
 	if(user)
-		chanters |= user
-		invokers |= user
+		chanters += user
+		invokers += user
 	if(req_cultists > 1 || allow_excess_invokers)
 		for(var/mob/living/L in range(1, src))
 			if(iscultist(L))
@@ -120,16 +121,17 @@ structure_check() searches for nearby cultist structures required for the invoca
 						continue
 				if(L.stat)
 					continue
-				invokers |= L
+				invokers += L
 		if(invokers.len >= req_cultists)
+			invokers -= user
 			if(allow_excess_invokers)
-				chanters |= invokers
+				chanters += invokers
 			else
-				invokers -= user
 				shuffle(invokers)
-				for(var/i in 0 to req_cultists)
+				for(var/i in 1 to req_cultists)
 					var/L = pick_n_take(invokers)
-					chanters |= L
+					if(L)
+						chanters += L
 	return chanters
 
 /obj/effect/rune/proc/invoke(var/list/invokers)
@@ -154,7 +156,7 @@ structure_check() searches for nearby cultist structures required for the invoca
 		var/oldcolor = color
 		color = rgb(255, 0, 0)
 		animate(src, color = oldcolor, time = 5)
-		addtimer(src, "update_atom_colour", 5)
+		addtimer(CALLBACK(src, /atom/proc/update_atom_colour), 5)
 
 //Malformed Rune: This forms if a rune is not drawn correctly. Invoking it does nothing but hurt the user.
 /obj/effect/rune/malformed
@@ -171,7 +173,7 @@ structure_check() searches for nearby cultist structures required for the invoca
 	..()
 	for(var/M in invokers)
 		var/mob/living/L = M
-		L << "<span class='cultitalic'><b>You feel your life force draining. The Geometer is displeased.</b></span>"
+		to_chat(L, "<span class='cultitalic'><b>You feel your life force draining. The Geometer is displeased.</b></span>")
 		L.apply_damage(30, BRUTE)
 	qdel(src)
 
@@ -202,12 +204,12 @@ structure_check() searches for nearby cultist structures required for the invoca
 	var/obj/item/weapon/paper/talisman/talisman_type
 	var/list/possible_talismans = list()
 	if(!papers_on_rune.len)
-		user << "<span class='cultitalic'>There must be a blank paper on top of [src]!</span>"
+		to_chat(user, "<span class='cultitalic'>There must be a blank paper on top of [src]!</span>")
 		fail_invoke()
 		log_game("Talisman Creation rune failed - no blank papers on rune")
 		return
 	if(rune_in_use)
-		user << "<span class='cultitalic'>[src] can only support one ritual at a time!</span>"
+		to_chat(user, "<span class='cultitalic'>[src] can only support one ritual at a time!</span>")
 		fail_invoke()
 		log_game("Talisman Creation rune failed - already in use")
 		return
@@ -219,11 +221,11 @@ structure_check() searches for nearby cultist structures required for the invoca
 			possible_talismans[talisman_cult_name] = J //This is to allow the menu to let cultists select talismans by name
 	entered_talisman_name = input(user, "Choose a talisman to imbue.", "Talisman Choices") as null|anything in possible_talismans
 	talisman_type = possible_talismans[entered_talisman_name]
-	if(!Adjacent(user) || !src || qdeleted(src) || user.incapacitated() || rune_in_use || !talisman_type)
+	if(!Adjacent(user) || !src || QDELETED(src) || user.incapacitated() || rune_in_use || !talisman_type)
 		return
 	papers_on_rune = checkpapers()
 	if(!papers_on_rune.len)
-		user << "<span class='cultitalic'>There must be a blank paper on top of [src]!</span>"
+		to_chat(user, "<span class='cultitalic'>There must be a blank paper on top of [src]!</span>")
 		fail_invoke()
 		log_game("Talisman Creation rune failed - no blank papers on rune")
 		return
@@ -231,7 +233,7 @@ structure_check() searches for nearby cultist structures required for the invoca
 	..()
 	visible_message("<span class='warning'>Dark power begins to channel into the paper!</span>")
 	rune_in_use = 1
-	if(!do_after(user, 100, target = paper_to_imbue))
+	if(!do_after(user, initial(talisman_type.creation_time), target = paper_to_imbue))
 		rune_in_use = 0
 		return
 	new talisman_type(get_turf(src))
@@ -270,41 +272,33 @@ var/list/teleport_runes = list()
 	var/mob/living/user = invokers[1] //the first invoker is always the user
 	var/list/potential_runes = list()
 	var/list/teleportnames = list()
-	var/list/duplicaterunecount = list()
 	for(var/R in teleport_runes)
 		var/obj/effect/rune/teleport/T = R
-		var/resultkey = T.listkey
-		if(resultkey in teleportnames)
-			duplicaterunecount[resultkey]++
-			resultkey = "[resultkey] ([duplicaterunecount[resultkey]])"
-		else
-			teleportnames.Add(resultkey)
-			duplicaterunecount[resultkey] = 1
 		if(T != src && (T.z <= ZLEVEL_SPACEMAX))
-			potential_runes[resultkey] = T
+			potential_runes[avoid_assoc_duplicate_keys(T.listkey, teleportnames)] = T
 
 	if(!potential_runes.len)
-		user << "<span class='warning'>There are no valid runes to teleport to!</span>"
+		to_chat(user, "<span class='warning'>There are no valid runes to teleport to!</span>")
 		log_game("Teleport rune failed - no other teleport runes")
 		fail_invoke()
 		return
 
 	if(user.z > ZLEVEL_SPACEMAX)
-		user << "<span class='cultitalic'>You are not in the right dimension!</span>"
+		to_chat(user, "<span class='cultitalic'>You are not in the right dimension!</span>")
 		log_game("Teleport rune failed - user in away mission")
 		fail_invoke()
 		return
 
 	var/input_rune_key = input(user, "Choose a rune to teleport to.", "Rune to Teleport to") as null|anything in potential_runes //we know what key they picked
 	var/obj/effect/rune/teleport/actual_selected_rune = potential_runes[input_rune_key] //what rune does that key correspond to?
-	if(!Adjacent(user) || !src || qdeleted(src) || user.incapacitated() || !actual_selected_rune)
+	if(!Adjacent(user) || !src || QDELETED(src) || user.incapacitated() || !actual_selected_rune)
 		fail_invoke()
 		return
 
 	var/turf/T = get_turf(src)
 	var/turf/target = get_turf(actual_selected_rune)
-	if(is_blocked_turf(target))
-		user << "<span class='warning'>The target rune is blocked. Attempting to teleport to it would be massively unwise.</span>"
+	if(is_blocked_turf(target, TRUE))
+		to_chat(user, "<span class='warning'>The target rune is blocked. Attempting to teleport to it would be massively unwise.</span>")
 		fail_invoke()
 		return
 	var/movedsomething = 0
@@ -320,7 +314,7 @@ var/list/teleport_runes = list()
 	if(movedsomething)
 		..()
 		visible_message("<span class='warning'>There is a sharp crack of inrushing air, and everything above the rune disappears!</span>")
-		user << "<span class='cult'>You[moveuserlater ? "r vision blurs, and you suddenly appear somewhere else":" send everything above the rune away"].</span>"
+		to_chat(user, "<span class='cult'>You[moveuserlater ? "r vision blurs, and you suddenly appear somewhere else":" send everything above the rune away"].</span>")
 		if(moveuserlater)
 			user.forceMove(target)
 	else
@@ -376,18 +370,18 @@ var/list/teleport_runes = list()
 		..()
 		do_sacrifice(L, invokers)
 	animate(src, color = oldcolor, time = 5)
-	addtimer(src, "update_atom_colour", 5)
+	addtimer(CALLBACK(src, /atom/proc/update_atom_colour), 5)
 	rune_in_use = FALSE
 
 /obj/effect/rune/convert/proc/do_convert(mob/living/convertee, list/invokers)
 	if(invokers.len < 2)
 		for(var/M in invokers)
-			M << "<span class='warning'>You need more invokers to convert [convertee]!</span>"
+			to_chat(M, "<span class='warning'>You need more invokers to convert [convertee]!</span>")
 		log_game("Offer rune failed - tried conversion with one invoker")
 		return 0
 	if(convertee.null_rod_check())
 		for(var/M in invokers)
-			M << "<span class='warning'>Something is shielding [convertee]'s mind!</span>"
+			to_chat(M, "<span class='warning'>Something is shielding [convertee]'s mind!</span>")
 		log_game("Offer rune failed - convertee had null rod")
 		return 0
 	var/brutedamage = convertee.getBruteLoss()
@@ -401,16 +395,16 @@ var/list/teleport_runes = list()
 	ticker.mode.add_cultist(convertee.mind, 1)
 	new /obj/item/weapon/tome(get_turf(src))
 	convertee.mind.special_role = "Cultist"
-	convertee << "<span class='cultitalic'><b>Your blood pulses. Your head throbs. The world goes red. All at once you are aware of a horrible, horrible, truth. The veil of reality has been ripped away \
-	and something evil takes root.</b></span>"
-	convertee << "<span class='cultitalic'><b>Assist your new compatriots in their dark dealings. Your goal is theirs, and theirs is yours. You serve the Geometer above all else. Bring it back.\
-	</b></span>"
+	to_chat(convertee, "<span class='cultitalic'><b>Your blood pulses. Your head throbs. The world goes red. All at once you are aware of a horrible, horrible, truth. The veil of reality has been ripped away \
+	and something evil takes root.</b></span>")
+	to_chat(convertee, "<span class='cultitalic'><b>Assist your new compatriots in their dark dealings. Your goal is theirs, and theirs is yours. You serve the Geometer above all else. Bring it back.\
+	</b></span>")
 	return 1
 
 /obj/effect/rune/convert/proc/do_sacrifice(mob/living/sacrificial, list/invokers)
 	if((((ishuman(sacrificial) || iscyborg(sacrificial)) && sacrificial.stat != DEAD) || is_sacrifice_target(sacrificial.mind)) && invokers.len < 3)
 		for(var/M in invokers)
-			M << "<span class='cultitalic'>[sacrificial] is too greatly linked to the world! You need three acolytes!</span>"
+			to_chat(M, "<span class='cultitalic'>[sacrificial] is too greatly linked to the world! You need three acolytes!</span>")
 		log_game("Offer rune failed - not enough acolytes and target is living or sac target")
 		return FALSE
 	var/sacrifice_fulfilled = FALSE
@@ -422,15 +416,15 @@ var/list/teleport_runes = list()
 	else
 		sacrificed += sacrificial
 
-	PoolOrNew(/obj/effect/overlay/temp/cult/sac, get_turf(src))
+	new /obj/effect/overlay/temp/cult/sac(get_turf(src))
 	for(var/M in invokers)
 		if(sacrifice_fulfilled)
-			M << "<span class='cultlarge'>\"Yes! This is the one I desire! You have done well.\"</span>"
+			to_chat(M, "<span class='cultlarge'>\"Yes! This is the one I desire! You have done well.\"</span>")
 		else
 			if(ishuman(sacrificial) || iscyborg(sacrificial))
-				M << "<span class='cultlarge'>\"I accept this sacrifice.\"</span>"
+				to_chat(M, "<span class='cultlarge'>\"I accept this sacrifice.\"</span>")
 			else
-				M << "<span class='cultlarge'>\"I accept this meager sacrifice.\"</span>"
+				to_chat(M, "<span class='cultlarge'>\"I accept this meager sacrifice.\"</span>")
 
 	var/obj/item/device/soulstone/stone = new /obj/item/device/soulstone(get_turf(src))
 	if(sacrificial.mind)
@@ -487,14 +481,14 @@ var/list/teleport_runes = list()
 
 	if(!cult_mode && !ignore_gamemode)
 		for(var/M in invokers)
-			M << "<span class='warning'>Nar-Sie does not respond!</span>"
+			to_chat(M, "<span class='warning'>Nar-Sie does not respond!</span>")
 		fail_invoke()
 		log_game("Summon Nar-Sie rune failed - gametype is not cult")
 		return
 
 	if(locate(/obj/singularity/narsie) in poi_list)
 		for(var/M in invokers)
-			M << "<span class='warning'>Nar-Sie is already on this plane!</span>"
+			to_chat(M, "<span class='warning'>Nar-Sie is already on this plane!</span>")
 		log_game("Summon Nar-Sie rune failed - already summoned")
 		return
 	//BEGIN THE SUMMONING
@@ -505,9 +499,9 @@ var/list/teleport_runes = list()
 	sleep(40)
 	if(src)
 		color = "#FF0000"
-	new /obj/singularity/narsie/large(T) //Causes Nar-Sie to spawn even if the rune has been removed
 	if(cult_mode)
 		cult_mode.eldergod = 0
+	new /obj/singularity/narsie/large(T) //Causes Nar-Sie to spawn even if the rune has been removed
 
 /obj/effect/rune/narsie/attackby(obj/I, mob/user, params)	//Since the narsie rune takes a long time to make, add logging to removal.
 	if((istype(I, /obj/item/weapon/tome) && iscultist(user)))
@@ -539,7 +533,7 @@ var/list/teleport_runes = list()
 		var/revive_number = 0
 		if(sacrificed.len)
 			revive_number = sacrificed.len - revives_used
-		user << "<b>Revives Remaining:</b> [revive_number]"
+		to_chat(user, "<b>Revives Remaining:</b> [revive_number]")
 
 /obj/effect/rune/raise_dead/invoke(var/list/invokers)
 	var/turf/T = get_turf(src)
@@ -552,19 +546,19 @@ var/list/teleport_runes = list()
 		if(iscultist(M) && M.stat == DEAD)
 			potential_revive_mobs |= M
 	if(!potential_revive_mobs.len)
-		user << "<span class='cultitalic'>There are no dead cultists on the rune!</span>"
+		to_chat(user, "<span class='cultitalic'>There are no dead cultists on the rune!</span>")
 		log_game("Raise Dead rune failed - no corpses to revive")
 		fail_invoke()
 		return
 	if(!sacrificed.len || sacrificed.len <= revives_used)
-		user << "<span class='warning'>You have sacrificed too few people to revive a cultist!</span>"
+		to_chat(user, "<span class='warning'>You have sacrificed too few people to revive a cultist!</span>")
 		fail_invoke()
 		return
 	if(potential_revive_mobs.len > 1)
 		mob_to_revive = input(user, "Choose a cultist to revive.", "Cultist to Revive") as null|anything in potential_revive_mobs
 	else
 		mob_to_revive = potential_revive_mobs[1]
-	if(!src || qdeleted(src) || rune_in_use || !validness_checks(mob_to_revive, user))
+	if(!src || QDELETED(src) || rune_in_use || !validness_checks(mob_to_revive, user))
 		return
 	rune_in_use = 1
 	if(user.name == "Herbert West")
@@ -575,7 +569,7 @@ var/list/teleport_runes = list()
 	revives_used++
 	mob_to_revive.revive(1, 1) //This does remove disabilities and such, but the rune might actually see some use because of it!
 	mob_to_revive.grab_ghost()
-	mob_to_revive << "<span class='cultlarge'>\"PASNAR SAVRAE YAM'TOTH. Arise.\"</span>"
+	to_chat(mob_to_revive, "<span class='cultlarge'>\"PASNAR SAVRAE YAM'TOTH. Arise.\"</span>")
 	mob_to_revive.visible_message("<span class='warning'>[mob_to_revive] draws in a huge breath, red light shining from [mob_to_revive.p_their()] eyes.</span>", \
 								  "<span class='cultlarge'>You awaken suddenly from the void. You're alive!</span>")
 	rune_in_use = 0
@@ -590,18 +584,18 @@ var/list/teleport_runes = list()
 		fail_invoke()
 		return 0
 	if(!(target_mob in T.contents))
-		user << "<span class='cultitalic'>The cultist to revive has been moved!</span>"
+		to_chat(user, "<span class='cultitalic'>The cultist to revive has been moved!</span>")
 		fail_invoke()
 		log_game("Raise Dead rune failed - revival target moved")
 		return 0
 	var/mob/dead/observer/ghost = target_mob.get_ghost(TRUE)
 	if(!ghost && (!target_mob.mind || !target_mob.mind.active))
-		user << "<span class='cultitalic'>The corpse to revive has no spirit!</span>"
+		to_chat(user, "<span class='cultitalic'>The corpse to revive has no spirit!</span>")
 		fail_invoke()
 		log_game("Raise Dead rune failed - revival target has no ghost")
 		return 0
 	if(!sacrificed.len || sacrificed.len <= revives_used)
-		user << "<span class='warning'>You have sacrificed too few people to revive a cultist!</span>"
+		to_chat(user, "<span class='warning'>You have sacrificed too few people to revive a cultist!</span>")
 		fail_invoke()
 		log_game("Raise Dead rune failed - too few sacrificed")
 		return 0
@@ -631,16 +625,16 @@ var/list/teleport_runes = list()
 		if(1 to 2)
 			playsound(E, 'sound/items/Welder2.ogg', 25, 1)
 			for(var/M in invokers)
-				M << "<span class='warning'>You feel a minute vibration pass through you...</span>"
+				to_chat(M, "<span class='warning'>You feel a minute vibration pass through you...</span>")
 		if(3 to 6)
 			playsound(E, 'sound/magic/Disable_Tech.ogg', 50, 1)
 			for(var/M in invokers)
-				M << "<span class='danger'>Your hair stands on end as a shockwave eminates from the rune!</span>"
+				to_chat(M, "<span class='danger'>Your hair stands on end as a shockwave eminates from the rune!</span>")
 		if(7 to INFINITY)
 			playsound(E, 'sound/magic/Disable_Tech.ogg', 100, 1)
 			for(var/M in invokers)
 				var/mob/living/L = M
-				L << "<span class='userdanger'>You chant in unison and a colossal burst of energy knocks you backward!</span>"
+				to_chat(L, "<span class='userdanger'>You chant in unison and a colossal burst of energy knocks you backward!</span>")
 				L.Weaken(2)
 	qdel(src) //delete before pulsing because it's a delay reee
 	empulse(E, 9*invokers.len, 12*invokers.len) // Scales now, from a single room to most of the station depending on # of chanters
@@ -659,16 +653,16 @@ var/list/teleport_runes = list()
 /obj/effect/rune/astral/examine(mob/user)
 	..()
 	if(affecting)
-		user << "<span class='cultitalic'>A translucent field encases [user] above the rune!</span>"
+		to_chat(user, "<span class='cultitalic'>A translucent field encases [user] above the rune!</span>")
 
 /obj/effect/rune/astral/can_invoke(mob/living/user)
 	if(rune_in_use)
-		user << "<span class='cultitalic'>[src] cannot support more than one body!</span>"
+		to_chat(user, "<span class='cultitalic'>[src] cannot support more than one body!</span>")
 		log_game("Astral Communion rune failed - more than one user")
 		return list()
 	var/turf/T = get_turf(src)
 	if(!(user in T))
-		user << "<span class='cultitalic'>You must be standing on top of [src]!</span>"
+		to_chat(user, "<span class='cultitalic'>You must be standing on top of [src]!</span>")
 		log_game("Astral Communion rune failed - user not standing on rune")
 		return list()
 	return ..()
@@ -705,13 +699,13 @@ var/list/teleport_runes = list()
 		if(user.stat == UNCONSCIOUS)
 			if(prob(1))
 				var/mob/dead/observer/G = user.get_ghost()
-				G << "<span class='cultitalic'>You feel the link between you and your body weakening... you must hurry!</span>"
+				to_chat(G, "<span class='cultitalic'>You feel the link between you and your body weakening... you must hurry!</span>")
 		if(user.stat == DEAD)
 			user.color = initial(user.color)
 			rune_in_use = 0
 			affecting = null
 			var/mob/dead/observer/G = user.get_ghost()
-			G << "<span class='cultitalic'><b>You suddenly feel your physical form pass on. [src]'s exertion has killed you!</b></span>"
+			to_chat(G, "<span class='cultitalic'><b>You suddenly feel your physical form pass on. [src]'s exertion has killed you!</b></span>")
 			return
 		sleep(1)
 	rune_in_use = 0
@@ -736,7 +730,7 @@ var/list/wall_runes = list()
 /obj/effect/rune/wall/examine(mob/user)
 	..()
 	if(density)
-		user << "<span class='cultitalic'>There is a barely perceptible shimmering of the air above [src].</span>"
+		to_chat(user, "<span class='cultitalic'>There is a barely perceptible shimmering of the air above [src].</span>")
 
 /obj/effect/rune/wall/Destroy()
 	density = 0
@@ -769,7 +763,7 @@ var/list/wall_runes = list()
 			W.density = TRUE
 			W.update_state()
 			W.spread_density()
-	density_timer = addtimer(src, "lose_density", 900)
+	density_timer = addtimer(CALLBACK(src, .proc/lose_density), 900, TIMER_STOPPABLE)
 
 /obj/effect/rune/wall/proc/lose_density()
 	if(density)
@@ -779,7 +773,7 @@ var/list/wall_runes = list()
 		var/oldcolor = color
 		add_atom_colour("#696969", FIXED_COLOUR_PRIORITY)
 		animate(src, color = oldcolor, time = 50, easing = EASE_IN)
-		addtimer(src, "recharge", 50)
+		addtimer(CALLBACK(src, .proc/recharge), 50)
 
 /obj/effect/rune/wall/proc/recharge()
 	recharging = FALSE
@@ -816,25 +810,25 @@ var/list/wall_runes = list()
 		if(!(M.current in invokers) && M.current && M.current.stat != DEAD)
 			cultists |= M.current
 	var/mob/living/cultist_to_summon = input(user, "Who do you wish to call to [src]?", "Followers of the Geometer") as null|anything in cultists
-	if(!Adjacent(user) || !src || qdeleted(src) || user.incapacitated())
+	if(!Adjacent(user) || !src || QDELETED(src) || user.incapacitated())
 		return
 	if(!cultist_to_summon)
-		user << "<span class='cultitalic'>You require a summoning target!</span>"
+		to_chat(user, "<span class='cultitalic'>You require a summoning target!</span>")
 		fail_invoke()
 		log_game("Summon Cultist rune failed - no target")
 		return
 	if(cultist_to_summon.stat == DEAD)
-		user << "<span class='cultitalic'>[cultist_to_summon] has died!</span>"
+		to_chat(user, "<span class='cultitalic'>[cultist_to_summon] has died!</span>")
 		fail_invoke()
 		log_game("Summon Cultist rune failed - target died")
 		return
 	if(!iscultist(cultist_to_summon))
-		user << "<span class='cultitalic'>[cultist_to_summon] is not a follower of the Geometer!</span>"
+		to_chat(user, "<span class='cultitalic'>[cultist_to_summon] is not a follower of the Geometer!</span>")
 		fail_invoke()
 		log_game("Summon Cultist rune failed - target was deconverted")
 		return
 	if(cultist_to_summon.z > ZLEVEL_SPACEMAX)
-		user << "<span class='cultitalic'>[cultist_to_summon] is not in our dimension!</span>"
+		to_chat(user, "<span class='cultitalic'>[cultist_to_summon] is not in our dimension!</span>")
 		fail_invoke()
 		log_game("Summon Cultist rune failed - target in away mission")
 		return
@@ -853,6 +847,7 @@ var/list/wall_runes = list()
 	invocation = "Dedo ol'btoh!"
 	icon_state = "4"
 	color = "#C80000"
+	light_color = LIGHT_COLOR_LAVA
 	req_cultists = 3
 	construct_invoke = 0
 	var/tick_damage = 25
@@ -868,21 +863,21 @@ var/list/wall_runes = list()
 	rune_in_use = TRUE
 	var/turf/T = get_turf(src)
 	visible_message("<span class='warning'>[src] turns a bright, glowing orange!</span>")
-	SetLuminosity(6)
+	set_light(6)
 	color = "#FC9B54"
 	for(var/M in invokers)
 		var/mob/living/L = M
 		L.apply_damage(10, BRUTE, pick("l_arm", "r_arm"))
-		L << "<span class='cultitalic'>[src] saps your strength!</span>"
+		to_chat(L, "<span class='cultitalic'>[src] saps your strength!</span>")
 	for(var/mob/living/L in viewers(T))
 		if(!iscultist(L) && L.blood_volume)
 			var/obj/item/weapon/nullrod/N = L.null_rod_check()
 			if(N)
-				L << "<span class='userdanger'>\The [N] suddenly burns hotly before returning to normal!</span>"
+				to_chat(L, "<span class='userdanger'>\The [N] suddenly burns hotly before returning to normal!</span>")
 				continue
-			L << "<span class='cultlarge'>Your blood boils in your veins!</span>"
+			to_chat(L, "<span class='cultlarge'>Your blood boils in your veins!</span>")
 			if(is_servant_of_ratvar(L))
-				L << "<span class='userdanger'>You feel an unholy darkness dimming the Justiciar's light!</span>"
+				to_chat(L, "<span class='userdanger'>You feel an unholy darkness dimming the Justiciar's light!</span>")
 	animate(src, color = "#FCB56D", time = 4)
 	sleep(4)
 	if(!src)
@@ -898,7 +893,7 @@ var/list/wall_runes = list()
 	if(!src)
 		return
 	do_area_burn(T, 1.5)
-	PoolOrNew(/obj/effect/hotspot, T)
+	new /obj/effect/hotspot(T)
 	qdel(src)
 
 /obj/effect/rune/blood_boil/proc/do_area_burn(turf/T, multiplier)
@@ -929,7 +924,7 @@ var/list/wall_runes = list()
 		if(M.stat != DEAD)
 			potential_targets += M
 	if(!potential_targets.len)
-		user << "<span class='cultitalic'>There must be at least one valid target on the rune!</span>"
+		to_chat(user, "<span class='cultitalic'>There must be at least one valid target on the rune!</span>")
 		log_game("Leeching rune failed - no valid targets")
 		return list()
 	return ..()
@@ -944,7 +939,7 @@ var/list/wall_runes = list()
 			var/drained_amount = rand(10,20)
 			M.apply_damage(drained_amount, BRUTE, "chest")
 			user.adjustBruteLoss(-drained_amount)
-			M << "<span class='cultitalic'>You feel extremely weak.</span>"
+			to_chat(M, "<span class='cultitalic'>You feel extremely weak.</span>")
 	user.Beam(T,icon_state="drainbeam",time=5)
 	user.visible_message("<span class='warning'>Blood flows from the rune into [user]!</span>", \
 	"<span class='cult'>Blood flows into you, healing your wounds and revitalizing your spirit.</span>")
@@ -965,7 +960,7 @@ var/list/wall_runes = list()
 
 /obj/effect/rune/manifest/can_invoke(mob/living/user)
 	if(!(user in get_turf(src)))
-		user << "<span class='cultitalic'>You must be standing on [src]!</span>"
+		to_chat(user, "<span class='cultitalic'>You must be standing on [src]!</span>")
 		fail_invoke()
 		log_game("Manifest rune failed - user not standing on rune")
 		return list()
@@ -974,7 +969,7 @@ var/list/wall_runes = list()
 		if(O.client && !jobban_isbanned(O, ROLE_CULTIST))
 			ghosts_on_rune |= O
 	if(!ghosts_on_rune.len)
-		user << "<span class='cultitalic'>There are no spirits near [src]!</span>"
+		to_chat(user, "<span class='cultitalic'>There are no spirits near [src]!</span>")
 		fail_invoke()
 		log_game("Manifest rune failed - no nearby ghosts")
 		return list()
@@ -992,13 +987,13 @@ var/list/wall_runes = list()
 	new_human.alpha = 150 //Makes them translucent
 	..()
 	visible_message("<span class='warning'>A cloud of red mist forms above [src], and from within steps... a man.</span>")
-	user << "<span class='cultitalic'>Your blood begins flowing into [src]. You must remain in place and conscious to maintain the forms of those summoned. This will hurt you slowly but surely...</span>"
+	to_chat(user, "<span class='cultitalic'>Your blood begins flowing into [src]. You must remain in place and conscious to maintain the forms of those summoned. This will hurt you slowly but surely...</span>")
 	var/turf/T = get_turf(src)
 	var/obj/structure/emergency_shield/invoker/N = new(T)
 
 	new_human.key = ghost_to_spawn.key
 	ticker.mode.add_cultist(new_human.mind, 0)
-	new_human << "<span class='cultitalic'><b>You are a servant of the Geometer. You have been made semi-corporeal by the cult of Nar-Sie, and you are to serve them at all costs.</b></span>"
+	to_chat(new_human, "<span class='cultitalic'><b>You are a servant of the Geometer. You have been made semi-corporeal by the cult of Nar-Sie, and you are to serve them at all costs.</b></span>")
 
 	while(user in T)
 		if(user.stat)
@@ -1011,5 +1006,5 @@ var/list/wall_runes = list()
 		new_human.visible_message("<span class='warning'>[new_human] suddenly dissolves into bones and ashes.</span>", \
 								  "<span class='cultlarge'>Your link to the world fades. Your form breaks apart.</span>")
 		for(var/obj/I in new_human)
-			new_human.unEquip(I)
+			new_human.dropItemToGround(I)
 		new_human.dust()
