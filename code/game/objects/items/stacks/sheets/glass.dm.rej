diff a/code/game/objects/items/stacks/sheets/glass.dm b/code/game/objects/items/stacks/sheets/glass.dm	(rejected hunks)
@@ -8,6 +8,11 @@
 /*
  * Glass sheets
  */
+var/global/list/datum/stack_recipe/glass_recipes = list ( \
+	new/datum/stack_recipe("directional window", /obj/structure/window/unanchored, time = 0, on_floor = TRUE, window_checks = TRUE), \
+	new/datum/stack_recipe("fulltile window", /obj/structure/window/fulltile/unanchored, 2, time = 0, on_floor = TRUE, window_checks = TRUE) \
+)
+
 /obj/item/stack/sheet/glass
 	name = "glass"
 	desc = "HOLY SHEET! That is a lot of glass."
@@ -27,19 +32,20 @@
 /obj/item/stack/sheet/glass/fifty
 	amount = 50
 
-/obj/item/stack/sheet/glass/attack_self(mob/user)
-	construct_window(user)
+/obj/item/stack/sheet/glass/Initialize(mapload, new_amount, merge = TRUE)
+	recipes = glass_recipes
+	..()
 
 /obj/item/stack/sheet/glass/attackby(obj/item/W, mob/user, params)
 	add_fingerprint(user)
 	if(istype(W, /obj/item/stack/cable_coil))
 		var/obj/item/stack/cable_coil/CC = W
 		if (get_amount() < 1 || CC.get_amount() < 5)
-			user << "<span class='warning>You need five lengths of coil and one sheet of glass to make wired glass!</span>"
+			to_chat(user, "<span class='warning>You need five lengths of coil and one sheet of glass to make wired glass!</span>")
 			return
 		CC.use(5)
 		use(1)
-		user << "<span class='notice'>You attach wire to the [name].</span>"
+		to_chat(user, "<span class='notice'>You attach wire to the [name].</span>")
 		var/obj/item/stack/light_w/new_tile = new(user.loc)
 		new_tile.add_fingerprint(user)
 	else if(istype(W, /obj/item/stack/rods))
@@ -55,84 +61,23 @@
 			if (!G && replace)
 				user.put_in_hands(RG)
 		else
-			user << "<span class='warning'>You need one rod and one sheet of glass to make reinforced glass!</span>"
+			to_chat(user, "<span class='warning'>You need one rod and one sheet of glass to make reinforced glass!</span>")
 			return
 	else
 		return ..()
 
-/obj/item/stack/sheet/glass/proc/construct_window(mob/user)
-	if(!user || !src)
-		return 0
-	if(!isturf(user.loc))
-		return 0
-	if(!user.IsAdvancedToolUser())
-		user << "<span class='warning'>You don't have the dexterity to do this!</span>"
-		return 0
-	if(zero_amount())
-		return 0
-	var/title = "Sheet-Glass"
-	title += " ([src.get_amount()] sheet\s left)"
-	switch(alert(title, "Would you like full tile glass or one direction?", "One Direction", "Full Window", "Cancel", null))
-		if("One Direction")
-			if(!src)
-				return 1
-			if(src.loc != user)
-				return 1
-
-			var/list/directions = new/list(cardinal)
-			var/i = 0
-			for (var/obj/structure/window/win in user.loc)
-				i++
-				if(i >= 4)
-					user << "<span class='warning'>There are too many windows in this location.</span>"
-					return 1
-				directions-=win.dir
-				if(!(win.ini_dir in cardinal))
-					user << "<span class='danger'>Can't let you do that.</span>"
-					return 1
-
-			//Determine the direction. It will first check in the direction the person making the window is facing, if it finds an already made window it will try looking at the next cardinal direction, etc.
-			var/dir_to_set = 2
-			for(var/direction in list( user.dir, turn(user.dir,90), turn(user.dir,180), turn(user.dir,270) ))
-				var/found = 0
-				for(var/obj/structure/window/WT in user.loc)
-					if(WT.dir == direction)
-						found = 1
-				if(!found)
-					dir_to_set = direction
-					break
-
-			var/obj/structure/window/W
-			W = new /obj/structure/window( user.loc, 0 )
-			W.setDir(dir_to_set)
-			W.ini_dir = W.dir
-			W.anchored = 0
-			W.air_update_turf(1)
-			src.use(1)
-			W.add_fingerprint(user)
-		if("Full Window")
-			if(!src)
-				return 1
-			if(src.loc != user)
-				return 1
-			if(src.get_amount() < 2)
-				user << "<span class='warning'>You need more glass to do that!</span>"
-				return 1
-			if(locate(/obj/structure/window) in user.loc)
-				user << "<span class='warning'>There is a window in the way!</span>"
-				return 1
-			var/obj/structure/window/W
-			W = new /obj/structure/window/fulltile( user.loc, 0 )
-			W.anchored = 0
-			W.air_update_turf(1)
-			W.add_fingerprint(user)
-			src.use(2)
-	return 0
-
 
 /*
  * Reinforced glass sheets
  */
+var/global/list/datum/stack_recipe/reinforced_glass_recipes = list ( \
+	new/datum/stack_recipe("windoor frame", /obj/structure/windoor_assembly, 5, time = 0, on_floor = TRUE, window_checks = TRUE), \
+	null, \
+	new/datum/stack_recipe("directional reinforced window", /obj/structure/window/reinforced/unanchored, time = 0, on_floor = TRUE, window_checks = TRUE), \
+	new/datum/stack_recipe("fulltile reinforced window", /obj/structure/window/reinforced/fulltile/unanchored, 2, time = 0, on_floor = TRUE, window_checks = TRUE) \
+)
+
+
 /obj/item/stack/sheet/rglass
 	name = "reinforced glass"
 	desc = "Glass which seems to have rods or something stuck in them."
@@ -161,116 +106,9 @@
 	source.add_charge(amount * metcost)
 	glasource.add_charge(amount * glacost)
 
-/obj/item/stack/sheet/rglass/attack_self(mob/user)
-	construct_window(user)
-
-/obj/item/stack/sheet/rglass/proc/construct_window(mob/user)
-	if(!user || !src)
-		return 0
-	if(!isturf(user.loc))
-		return 0
-	if(!user.IsAdvancedToolUser())
-		user << "<span class='warning'>You don't have the dexterity to do this!</span>"
-		return 0
-	var/title = "Sheet Reinf. Glass"
-	title += " ([src.get_amount()] sheet\s left)"
-	switch(input(title, "Would you like full tile glass a one direction glass pane or a windoor?") in list("One Direction", "Full Window", "Windoor", "Cancel"))
-		if("One Direction")
-			if(!src)
-				return 1
-			if(src.loc != user)
-				return 1
-			var/list/directions = new/list(cardinal)
-			var/i = 0
-			for (var/obj/structure/window/win in user.loc)
-				i++
-				if(i >= 4)
-					user << "<span class='danger'>There are too many windows in this location.</span>"
-					return 1
-				directions-=win.dir
-				if(!(win.ini_dir in cardinal))
-					user << "<span class='danger'>Can't let you do that.</span>"
-					return 1
-
-			//Determine the direction. It will first check in the direction the person making the window is facing, if it finds an already made window it will try looking at the next cardinal direction, etc.
-			var/dir_to_set = 2
-			for(var/direction in list( user.dir, turn(user.dir,90), turn(user.dir,180), turn(user.dir,270) ))
-				var/found = 0
-				for(var/obj/structure/window/WT in user.loc)
-					if(WT.dir == direction)
-						found = 1
-				if(!found)
-					dir_to_set = direction
-					break
-
-			var/obj/structure/window/W
-			W = new /obj/structure/window/reinforced( user.loc, 1 )
-			W.state = 0
-			W.setDir(dir_to_set)
-			W.ini_dir = W.dir
-			W.anchored = 0
-			W.add_fingerprint(user)
-			src.use(1)
-
-		if("Full Window")
-			if(!src)
-				return 1
-			if(src.loc != user)
-				return 1
-			if(src.get_amount() < 2)
-				user << "<span class='warning'>You need more glass to do that!</span>"
-				return 1
-			if(locate(/obj/structure/window) in user.loc)
-				user << "<span class='warning'>There is a window in the way!</span>"
-				return 1
-			var/obj/structure/window/W
-			W = new /obj/structure/window/reinforced/fulltile(user.loc, 1)
-			W.state = 0
-			W.anchored = 0
-			W.add_fingerprint(user)
-			src.use(2)
-
-		if("Windoor")
-			if(!src || src.loc != user || !isturf(user.loc))
-				return 1
-
-			for(var/obj/structure/windoor_assembly/WA in user.loc)
-				if(WA.dir == user.dir)
-					user << "<span class='warning'>There is already a windoor assembly in that location!</span>"
-					return 1
-
-			for(var/obj/machinery/door/window/W in user.loc)
-				if(W.dir == user.dir)
-					user << "<span class='warning'>There is already a windoor in that location!</span>"
-					return 1
-
-			if(src.get_amount() < 5)
-				user << "<span class='warning'>You need more glass to do that!</span>"
-				return 1
-
-			var/obj/structure/windoor_assembly/WD = new(user.loc)
-			WD.state = "01"
-			WD.anchored = 0
-			WD.add_fingerprint(user)
-			src.use(5)
-			switch(user.dir)
-				if(SOUTH)
-					WD.setDir(SOUTH)
-					WD.ini_dir = SOUTH
-				if(EAST)
-					WD.setDir(EAST)
-					WD.ini_dir = EAST
-				if(WEST)
-					WD.setDir(WEST)
-					WD.ini_dir = WEST
-				else //If the user is facing northeast. northwest, southeast, southwest or north, default to north
-					WD.setDir(NORTH)
-					WD.ini_dir = NORTH
-		else
-			return 1
-
-
-	return 0
+/obj/item/stack/sheet/rglass/Initialize(mapload, new_amount, merge = TRUE)
+	recipes = reinforced_glass_recipes
+	..()
 
 
 /obj/item/weapon/shard
@@ -321,11 +159,11 @@
 	if(ishuman(user))
 		var/mob/living/carbon/human/H = user
 		if(!H.gloves && !(PIERCEIMMUNE in H.dna.species.species_traits)) // golems, etc
-			H << "<span class='warning'>[src] cuts into your hand!</span>"
+			to_chat(H, "<span class='warning'>[src] cuts into your hand!</span>")
 			H.apply_damage(force*0.5, BRUTE, hit_hand)
 	else if(ismonkey(user))
 		var/mob/living/carbon/monkey/M = user
-		M << "<span class='warning'>[src] cuts into your hand!</span>"
+		to_chat(M, "<span class='warning'>[src] cuts into your hand!</span>")
 		M.apply_damage(force*0.5, BRUTE, hit_hand)
 
 
@@ -342,7 +180,7 @@
 				if(G.amount >= G.max_amount)
 					continue
 				G.attackby(NG, user)
-			user << "<span class='notice'>You add the newly-formed glass to the stack. It now contains [NG.amount] sheet\s.</span>"
+			to_chat(user, "<span class='notice'>You add the newly-formed glass to the stack. It now contains [NG.amount] sheet\s.</span>")
 			qdel(src)
 	else
 		return ..()
@@ -358,15 +196,17 @@
 			var/obj/item/bodypart/O = H.get_bodypart(picked_def_zone)
 			if(!istype(O))
 				return
-			if(!H.shoes)
-				H.apply_damage(5, BRUTE, picked_def_zone)
-				if(cooldown < world.time - 10) //cooldown to avoid message spam.
-					if(!H.incapacitated())
-						H.visible_message("<span class='danger'>[H] steps in the broken glass!</span>", \
-								"<span class='userdanger'>You step in the broken glass!</span>")
-					else
-						H.visible_message("<span class='danger'>[H] slides on the broken glass!</span>", \
-								"<span class='userdanger'>You slide on the broken glass!</span>")
-
-					cooldown = world.time
-				H.Weaken(3)
+			var/feetCover = (H.wear_suit && H.wear_suit.body_parts_covered & FEET) || (H.w_uniform && H.w_uniform.body_parts_covered & FEET)
+			if(H.shoes || feetCover || H.movement_type & FLYING || H.buckled)
+				return
+			H.apply_damage(5, BRUTE, picked_def_zone)
+			if(cooldown < world.time - 10) //cooldown to avoid message spam.
+				if(!H.incapacitated())
+					H.visible_message("<span class='danger'>[H] steps in the broken glass!</span>", \
+							"<span class='userdanger'>You step in the broken glass!</span>")
+				else
+					H.visible_message("<span class='danger'>[H] slides on the broken glass!</span>", \
+							"<span class='userdanger'>You slide on the broken glass!</span>")
+
+				cooldown = world.time
+			H.Weaken(3)
