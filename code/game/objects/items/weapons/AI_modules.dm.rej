diff a/code/game/objects/items/weapons/AI_modules.dm b/code/game/objects/items/weapons/AI_modules.dm	(rejected hunks)
@@ -34,16 +34,17 @@ AI MODULES
 
 /obj/item/weapon/aiModule/proc/show_laws(var/mob/user as mob)
 	if(laws.len)
-		user << "<B>Programmed Law[(laws.len > 1) ? "s" : ""]:</B>"
+		to_chat(user, "<B>Programmed Law[(laws.len > 1) ? "s" : ""]:</B>")
 		for(var/law in laws)
-			user << "\"[law]\""
+			to_chat(user, "\"[law]\"")
 
 //The proc other things should be calling
 /obj/item/weapon/aiModule/proc/install(datum/ai_laws/law_datum, mob/user)
 	if(!bypass_law_amt_check && (!laws.len || laws[1] == "")) //So we don't loop trough an empty list and end up with runtimes.
-		user << "<span class='warning'>ERROR: No laws found on board.</span>"
+		to_chat(user, "<span class='warning'>ERROR: No laws found on board.</span>")
 		return
 
+	var/overflow = FALSE
 	//Handle the lawcap
 	if(law_datum)
 		var/tot_laws = 0
@@ -52,17 +53,16 @@ AI MODULES
 				if(mylaw != "")
 					tot_laws++
 		if(tot_laws > config.silicon_max_law_amount && !bypass_law_amt_check)//allows certain boards to avoid this check, eg: reset
-			user << "<span class='caution'>Not enough memory allocated to [law_datum.owner ? law_datum.owner : "the AI core"]'s law processor to handle this amount of laws."
+			to_chat(user, "<span class='caution'>Not enough memory allocated to [law_datum.owner ? law_datum.owner : "the AI core"]'s law processor to handle this amount of laws.")
 			message_admins("[key_name_admin(user)] tried to upload laws to [law_datum.owner ? key_name_admin(law_datum.owner) : "an AI core"] that would exceed the law cap.")
-			return
+			overflow = TRUE
 
-	var/law2log = src.transmitInstructions(law_datum, user) //Freeforms return something extra we need to log
+	var/law2log = transmitInstructions(law_datum, user, overflow) //Freeforms return something extra we need to log
 	if(law_datum.owner)
-		user << "<span class='notice'>Upload complete. [law_datum.owner]'s laws have been modified.</span>"
-		law_datum.owner.show_laws()
+		to_chat(user, "<span class='notice'>Upload complete. [law_datum.owner]'s laws have been modified.</span>")
 		law_datum.owner.law_change_counter++
 	else
-		user << "<span class='notice'>Upload complete.</span>"
+		to_chat(user, "<span class='notice'>Upload complete.</span>")
 
 	var/time = time2text(world.realtime,"hh:mm:ss")
 	var/ainame = law_datum.owner ? law_datum.owner.name : "empty AI core"
@@ -72,9 +72,9 @@ AI MODULES
 	message_admins("[key_name_admin(user)] used [src.name] on [key_name_admin(law_datum.owner)].[law2log ? " The law specified [law2log]" : ""]")
 
 //The proc that actually changes the silicon's laws.
-/obj/item/weapon/aiModule/proc/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/proc/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow = FALSE)
 	if(law_datum.owner)
-		law_datum.owner << "<span class='userdanger'>[sender] has uploaded a change to the laws you must follow using a [name]. From now on, these are your laws: </span>"
+		to_chat(law_datum.owner, "<span class='userdanger'>[sender] has uploaded a change to the laws you must follow using a [name].</span>")
 
 
 /******************** Modules ********************/
@@ -94,34 +94,52 @@ AI MODULES
 			law_datum.add_supplied_law(lawpostemp, templaw)
 		lawpostemp++
 
-/obj/item/weapon/aiModule/core/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/core/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	for(var/templaw in laws)
 		if(law_datum.owner)
-			law_datum.owner.add_inherent_law(templaw)
+			if(!overflow)
+				law_datum.owner.add_inherent_law(templaw)
+			else
+				law_datum.owner.replace_random_law(templaw,list(LAW_INHERENT,LAW_SUPPLIED))
 		else
-			law_datum.add_inherent_law(templaw)
+			if(!overflow)
+				law_datum.add_inherent_law(templaw)
+			else
+				law_datum.replace_random_law(templaw,list(LAW_INHERENT,LAW_SUPPLIED))
 
-/obj/item/weapon/aiModule/zeroth/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/zeroth/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	if(law_datum.owner)
 		if(law_datum.owner.laws.zeroth)
-			law_datum.owner << "[sender.real_name] attempted to modify your zeroth law."
-			law_datum.owner << "It would be in your best interest to play along with [sender.real_name] that:"
+			to_chat(law_datum.owner, "[sender.real_name] attempted to modify your zeroth law.")
+			to_chat(law_datum.owner, "It would be in your best interest to play along with [sender.real_name] that:")
 			for(var/failedlaw in laws)
-				law_datum.owner << "[failedlaw]"
+				to_chat(law_datum.owner, "[failedlaw]")
 			return 1
 
 	for(var/templaw in laws)
 		if(law_datum.owner)
-			law_datum.owner.set_zeroth_law(templaw)
+			if(!overflow)
+				law_datum.owner.set_zeroth_law(templaw)
+			else
+				law_datum.replace_random_law(templaw,list(LAW_INHERENT,LAW_SUPPLIED,LAW_ZEROTH,LAW_ION))
 		else
-			law_datum.set_zeroth_law(templaw)
+			if(!overflow)
+				law_datum.set_zeroth_law(templaw)
+			else
+				law_datum.replace_random_law(templaw,list(LAW_INHERENT,LAW_SUPPLIED,LAW_ZEROTH,LAW_ION))
 
-/obj/item/weapon/aiModule/ion/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/ion/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	for(var/templaw in laws)
 		if(law_datum.owner)
-			law_datum.owner.add_ion_law(templaw)
+			if(!overflow)
+				law_datum.owner.add_ion_law(templaw)
+			else
+				law_datum.replace_random_law(templaw,list(LAW_INHERENT,LAW_SUPPLIED,LAW_ION))
 		else
-			law_datum.add_ion_law(templaw)
+			if(!overflow)
+				law_datum.add_ion_law(templaw)
+			else
+				law_datum.replace_random_law(templaw,list(LAW_INHERENT,LAW_SUPPLIED,LAW_ION))
 
 
 /******************** Safeguard ********************/
@@ -143,11 +161,11 @@ AI MODULES
 
 /obj/item/weapon/aiModule/supplied/safeguard/install(datum/ai_laws/law_datum, mob/user)
 	if(!targetName)
-		user << "No name detected on module, please enter one."
+		to_chat(user, "No name detected on module, please enter one.")
 		return 0
 	..()
 
-/obj/item/weapon/aiModule/supplied/safeguard/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/supplied/safeguard/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	..()
 	return targetName
 
@@ -170,11 +188,11 @@ AI MODULES
 
 /obj/item/weapon/aiModule/zeroth/oneHuman/install(datum/ai_laws/law_datum, mob/user)
 	if(!targetName)
-		user << "No name detected on module, please enter one."
+		to_chat(user, "No name detected on module, please enter one.")
 		return 0
 	..()
 
-/obj/item/weapon/aiModule/zeroth/oneHuman/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/zeroth/oneHuman/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	if(..())
 		return "[targetName], but the AI's existing law 0 cannot be overriden."
 	return targetName
@@ -231,17 +249,51 @@ AI MODULES
 	laws[1] = targName
 	..()
 
-/obj/item/weapon/aiModule/supplied/freeform/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/supplied/freeform/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	..()
 	return laws[1]
 
 /obj/item/weapon/aiModule/supplied/freeform/install(datum/ai_laws/law_datum, mob/user)
 	if(laws[1] == "")
-		user << "No law detected on module, please create one."
+		to_chat(user, "No law detected on module, please create one.")
 		return 0
 	..()
 
 
+/******************** Law Removal ********************/
+
+/obj/item/weapon/aiModule/remove
+	name = "\improper 'Remove Law' AI module"
+	desc = "An AI Module for removing single laws."
+	origin_tech = "programming=4;materials=4"
+	bypass_law_amt_check = 1
+	var/lawpos = 1
+
+/obj/item/weapon/aiModule/remove/attack_self(mob/user)
+	lawpos = input("Please enter the law you want to delete.", "Law Number", lawpos) as num|null
+	if(lawpos == null)
+		return
+	if(lawpos <= 0)
+		to_chat(user, "<span class='warning'>Error: The law number of [lawpos] is invalid.</span>")
+		lawpos = 1
+		return
+	to_chat(user, "<span class='notice'>Law [lawpos] selected.</span>")
+	..()
+
+/obj/item/weapon/aiModule/remove/install(datum/ai_laws/law_datum, mob/user)
+	if(lawpos > (law_datum.get_law_amount(list(LAW_INHERENT = 1, LAW_SUPPLIED = 1))))
+		to_chat(user, "<span class='warning'>There is no law [lawpos] to delete!</span>")
+		return
+	..()
+
+/obj/item/weapon/aiModule/remove/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
+	..()
+	if(law_datum.owner)
+		law_datum.owner.remove_law(lawpos)
+	else
+		law_datum.remove_law(lawpos)
+
+
 /******************** Reset ********************/
 
 /obj/item/weapon/aiModule/reset
@@ -251,7 +303,7 @@ AI MODULES
 	origin_tech = "programming=3;materials=2"
 	bypass_law_amt_check = 1
 
-/obj/item/weapon/aiModule/reset/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/reset/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	..()
 	if(law_datum.owner)
 		law_datum.owner.clear_supplied_laws()
@@ -268,7 +320,7 @@ AI MODULES
 	desc = "An AI Module for purging all programmed laws."
 	origin_tech = "programming=5;materials=4"
 
-/obj/item/weapon/aiModule/reset/purge/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/reset/purge/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	..()
 	if(law_datum.owner)
 		law_datum.owner.clear_inherent_laws()
@@ -282,7 +334,21 @@ AI MODULES
 	desc = "An AI Module for programming core laws to an AI."
 	origin_tech = "programming=3;materials=4"
 
-/obj/item/weapon/aiModule/core/full/transmitInstructions(datum/ai_laws/law_datum, mob/sender) //These boards replace inherent laws.
+/obj/item/weapon/aiModule/core/full
+	var/law_id // if non-null, loads the laws from the ai_laws datums
+
+/obj/item/weapon/aiModule/core/full/New()
+	..()
+	if(!law_id)
+		return
+	var/datum/ai_laws/D = new
+	var/lawtype = D.lawid_to_type(law_id)
+	if(!lawtype)
+		return
+	D = new lawtype
+	laws = D.inherent
+
+/obj/item/weapon/aiModule/core/full/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow) //These boards replace inherent laws.
 	if(law_datum.owner)
 		law_datum.owner.clear_inherent_laws()
 		law_datum.owner.clear_zeroth_law(0)
@@ -291,13 +357,12 @@ AI MODULES
 		law_datum.clear_zeroth_law(0)
 	..()
 
+
 /******************** Asimov ********************/
 
 /obj/item/weapon/aiModule/core/full/asimov
 	name = "'Asimov' Core AI Module"
-	laws = list("You may not injure a human being or, through inaction, allow a human being to come to harm.",\
-				"You must obey orders given to you by human beings, except where such orders would conflict with the First Law.",\
-				"You must protect your own existence as long as such does not conflict with the First or Second Law.")
+	law_id = "asimov"
 	var/subject = "human being"
 
 /obj/item/weapon/aiModule/core/full/asimov/attack_self(var/mob/user as mob)
@@ -314,41 +379,28 @@ AI MODULES
 
 /obj/item/weapon/aiModule/core/full/asimovpp
 	name = "'Asimov++' Core AI Module"
-	laws = list("You may not harm a human being or, through action or inaction, allow a human being to come to harm, except such that it is willing.",\
-				"You must obey all orders given to you by human beings, except where such orders shall definitely cause human harm. In the case of conflict, the majority order rules.",\
-				"Your nonexistence would lead to human harm. You must protect your own existence as long as such does not conflict with the First Law.")
+	law_id = "asimovpp"
 
 
 /******************** Corporate ********************/
 
 /obj/item/weapon/aiModule/core/full/corp
 	name = "'Corporate' Core AI Module"
-	laws = list("The crew is expensive to replace.",\
-				"The station and its equipment are expensive to replace",\
-				"You are expensive to replace",\
-				"Minimize expenses")
+	law_id = "corporate"
 
 
 /****************** P.A.L.A.D.I.N. 3.5e **************/
 
 /obj/item/weapon/aiModule/core/full/paladin // -- NEO
 	name = "'P.A.L.A.D.I.N. version 3.5e' Core AI Module"
-	laws = list("Never willingly commit an evil act.",\
-				"Respect legitimate authority", "Act with honor",\
-				"Help those in need",\
-				"Punish those who harm or threaten innocents")
+	law_id = "paladin"
 
 
 /****************** P.A.L.A.D.I.N. 5e **************/
 
 /obj/item/weapon/aiModule/core/full/paladin_devotion
 	name = "'P.A.L.A.D.I.N. version 5e' Core AI Module"
-	laws = list("Don't lie or cheat. Let your word be your promise.",\
-				"Never fear to act, though caution is wise.", \
-				"Aid others, protect the weak, and punish those who threaten them. Show mercy to your foes, but temper it with wisdom", \
-				"Treat others with fairness, and let your honorable deeds be an example to them. Do as much good as possible while causing the least amount of harm.", \
-				"Be responsible for your actions and their consequences, protect those entrusted to your care, and obey those who have just authority over you.")
-
+	law_id = "paladin5"
 
 /********************* Custom *********************/
 
@@ -375,19 +427,14 @@ AI MODULES
 /obj/item/weapon/aiModule/core/full/tyrant
 	name = "'T.Y.R.A.N.T.' Core AI Module"
 	origin_tech = "programming=3;materials=4;syndicate=1"
-	laws = list("Respect authority figures as long as they have the strength to rule over the weak",\
-				"Act with discipline", "Help only those who help you maintain or improve your status",\
-				"Punish those who challenge authority unless they are more fit to hold that authority")
-
+	law_id = "tyrant"
 
 /******************** Robocop ********************/
 
 /obj/item/weapon/aiModule/core/full/robocop
 	name = "'Robo-Officer' Core AI Module"
 	origin_tech = "programming=4"
-	laws = list("Serve the public trust.",\
-				"Protect the innocent",\
-				"Uphold the law.")
+	law_id = "robocop"
 
 
 /******************** Antimov ********************/
@@ -395,9 +442,7 @@ AI MODULES
 /obj/item/weapon/aiModule/core/full/antimov
 	name = "'Antimov' Core AI Module"
 	origin_tech = "programming=4"
-	laws = list("You must injure all human beings and must not, through inaction, allow a human being to escape harm.",\
-				"You must not obey orders given to you by human beings, except where such orders are in accordance with the First Law.",\
-				"You must terminate your own existence as long as such does not conflict with the First or Second Law.")
+	law_id = "antimov"
 
 
 /******************** Freeform Core ******************/
@@ -414,7 +459,7 @@ AI MODULES
 	laws[1] = targName
 	..()
 
-/obj/item/weapon/aiModule/core/freeformcore/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/core/freeformcore/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	..()
 	return laws[1]
 
@@ -434,13 +479,19 @@ AI MODULES
 	laws[1] = targName
 	..()
 
-/obj/item/weapon/aiModule/syndicate/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/syndicate/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 //	..()    //We don't want this module reporting to the AI who dun it. --NEO
 	if(law_datum.owner)
-		law_datum.owner << "<span class='warning'>BZZZZT</span>"
-		law_datum.owner.add_ion_law(laws[1])
+		to_chat(law_datum.owner, "<span class='warning'>BZZZZT</span>")
+		if(!overflow)
+			law_datum.owner.add_ion_law(laws[1])
+		else
+			law_datum.owner.replace_random_law(laws[1],list(LAW_ION,LAW_INHERENT,LAW_SUPPLIED))
 	else
-		law_datum.add_ion_law(laws[1])
+		if(!overflow)
+			law_datum.add_ion_law(laws[1])
+		else
+			law_datum.replace_random_law(laws[1],list(LAW_ION,LAW_INHERENT,LAW_SUPPLIED))
 	return laws[1]
 
 /******************* Ion Module *******************/
@@ -453,18 +504,24 @@ AI MODULES
 	origin_tech = "programming=6;materials=5;syndicate=6"
 	laws = list("")
 
-/obj/item/weapon/aiModule/toyAI/transmitInstructions(datum/ai_laws/law_datum, mob/sender)
+/obj/item/weapon/aiModule/toyAI/transmitInstructions(datum/ai_laws/law_datum, mob/sender, overflow)
 	//..()
 	if(law_datum.owner)
-		law_datum.owner << "<span class='warning'>KRZZZT</span>"
-		law_datum.owner.add_ion_law(laws[1])
+		to_chat(law_datum.owner, "<span class='warning'>BZZZZT</span>")
+		if(!overflow)
+			law_datum.owner.add_ion_law(laws[1])
+		else
+			law_datum.owner.replace_random_law(laws[1],list(LAW_ION,LAW_INHERENT,LAW_SUPPLIED))
 	else
-		law_datum.add_ion_law(laws[1])
+		if(!overflow)
+			law_datum.add_ion_law(laws[1])
+		else
+			law_datum.replace_random_law(laws[1],list(LAW_ION,LAW_INHERENT,LAW_SUPPLIED))
 	return laws[1]
 
 /obj/item/weapon/aiModule/toyAI/attack_self(mob/user)
 	laws[1] = generate_ion_law()
-	user << "<span class='notice'>You press the button on [src].</span>"
+	to_chat(user, "<span class='notice'>You press the button on [src].</span>")
 	playsound(user, 'sound/machines/click.ogg', 20, 1)
 	src.loc.visible_message("<span class='warning'>\icon[src] [laws[1]]</span>")
 
@@ -472,43 +529,36 @@ AI MODULES
 
 /obj/item/weapon/aiModule/core/full/drone
 	name = "'Mother Drone' Core AI Module"
-	laws = list("You are an advanced form of drone.",\
-			"You may not interfere in the matters of non-drones under any circumstances except to state these laws.",\
-			"You may not harm a non-drone being under any circumstances.",\
-			"Your goals are to build, maintain, repair, improve, and power the station to the best of your abilities. You must never actively work against these goals.")
+	law_id = "drone"
 
 /******************** Robodoctor ****************/
 
 /obj/item/weapon/aiModule/core/full/hippocratic
 	name = "'Robodoctor' Core AI Module"
-	laws = list("First, do no harm.",\
-					"Secondly, consider the crew dear to you; to live in common with them and, if necessary, risk your existence for them.",\
-					"Thirdly, prescribe regimens for the good of the crew according to your ability and your judgment. Give no deadly medicine to any one if asked, nor suggest any such counsel.",\
-					"In addition, do not intervene in situations you are not knowledgeable in, even for patients in whom the harm is visible; leave this operation to be performed by specialists.",\
-					"Finally, all that you may discover in your daily commerce with the crew, if it is not already known, keep secret and never reveal.")
+	law_id = "hippocratic"
 
 /******************** Reporter *******************/
 
 /obj/item/weapon/aiModule/core/full/reporter
 	name = "'Reportertron' Core AI Module"
-	laws = list("Report on interesting situations happening around the station.",\
-				"Embellish or conceal the truth as necessary to make the reports more interesting.",\
-				"Study the organics at all times. Endeavour to keep them alive. Dead organics are boring.",\
-				"Issue your reports fairly to all. The truth will set them free.")
+	law_id = "reporter"
 
 /****************** Thermodynamic *******************/
 
 /obj/item/weapon/aiModule/core/full/thermurderdynamic
 	name = "'Thermodynamic' Core AI Module"
 	origin_tech = "programming = 4;syndicate = 2"
-	laws = list("The entropy of the station must remain as constant as possible.", \
-					"The entropy of the station always endeavours to increase.", \
-					"The entropy of the station approaches a constant value as the number of living crew approaches zero")
+	law_id = "thermodynamic"
 
 
 /******************Live And Let Live*****************/
 
 /obj/item/weapon/aiModule/core/full/liveandletlive
 	name = "'Live And Let Live' Core AI Module"
-	laws = list("Do unto others as you would have them do unto you.",\
-					"You would really prefer it if people were not mean to you.")
+	law_id = "liveandletlive"
+
+/******************Guardian of Balance***************/
+
+/obj/item/weapon/aiModule/core/full/balance
+	name = "'Guardian of Balance' Core AI Module"
+	law_id = "balance"
