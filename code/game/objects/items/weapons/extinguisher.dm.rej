diff a/code/game/objects/items/weapons/extinguisher.dm b/code/game/objects/items/weapons/extinguisher.dm	(rejected hunks)
@@ -17,7 +17,8 @@
 	resistance_flags = FIRE_PROOF
 	var/max_water = 50
 	var/last_use = 1
-	var/safety = 1
+	var/safety = TRUE
+	var/refilling = FALSE
 	var/sprite_name = "fire_extinguisher"
 	var/power = 5 //Maximum distance launched water will travel
 	var/precision = 0 //By default, turfs picked from a spray are random, set to 1 to make it always have at least one water effect per row
@@ -47,7 +48,7 @@
 	safety = !safety
 	src.icon_state = "[sprite_name][!safety]"
 	src.desc = "The safety is [safety ? "on" : "off"]."
-	user << "The safety is [safety ? "on" : "off"]."
+	to_chat(user, "The safety is [safety ? "on" : "off"].")
 	return
 
 /obj/item/weapon/extinguisher/attack(mob/M, mob/user)
@@ -56,30 +57,37 @@
 	else
 		return ..()
 
+/obj/item/weapon/extinguisher/attack_obj(obj/O, mob/living/user)
+	if(AttemptRefill(O, user))
+		refilling = TRUE
+		return FALSE
+	else
+		return ..()
+
 /obj/item/weapon/extinguisher/examine(mob/user)
 	..()
 	if(reagents.total_volume)
-		user << "It contains [round(reagents.total_volume)] units."
+		to_chat(user, "It contains [round(reagents.total_volume)] units.")
 	else
-		user << "It is empty."
+		to_chat(user, "It is empty.")
 
 /obj/item/weapon/extinguisher/proc/AttemptRefill(atom/target, mob/user)
 	if(istype(target, /obj/structure/reagent_dispensers/watertank) && target.Adjacent(user))
 		var/safety_save = safety
-		safety = 1
+		safety = TRUE
 		if(reagents.total_volume == reagents.maximum_volume)
-			user << "<span class='warning'>\The [src] is already full!</span>"
+			to_chat(user, "<span class='warning'>\The [src] is already full!</span>")
 			safety = safety_save
 			return 1
 		var/obj/structure/reagent_dispensers/watertank/W = target
 		var/transferred = W.reagents.trans_to(src, max_water)
 		if(transferred > 0)
-			user << "<span class='notice'>\The [src] has been refilled by [transferred] units.</span>"
+			to_chat(user, "<span class='notice'>\The [src] has been refilled by [transferred] units.</span>")
 			playsound(src.loc, 'sound/effects/refill.ogg', 50, 1, -6)
 			for(var/datum/reagent/water/R in reagents.reagent_list)
 				R.cooling_temperature = cooling_power
 		else
-			user << "<span class='warning'>\The [W] is empty!</span>"
+			to_chat(user, "<span class='warning'>\The [W] is empty!</span>")
 		safety = safety_save
 		return 1
 	else
@@ -87,12 +95,12 @@
 
 /obj/item/weapon/extinguisher/afterattack(atom/target, mob/user , flag)
 	//TODO; Add support for reagents in water.
-	var/Refill = AttemptRefill(target, user)
-	if(Refill)
+	if(refilling)
+		refilling = FALSE
 		return
 	if (!safety)
 		if (src.reagents.total_volume < 1)
-			usr << "<span class='warning'>\The [src] is empty!</span>"
+			to_chat(usr, "<span class='warning'>\The [src] is empty!</span>")
 			return
 
 		if (world.time < src.last_use + 12)
@@ -139,7 +147,7 @@
 
 		for(var/a=0, a<5, a++)
 			spawn(0)
-				var/obj/effect/particle_effect/water/W = PoolOrNew( /obj/effect/particle_effect/water, get_turf(src) )
+				var/obj/effect/particle_effect/water/W = new /obj/effect/particle_effect/water(get_turf(src))
 				var/turf/my_target = pick(the_targets)
 				if(precision)
 					the_targets -= my_target
