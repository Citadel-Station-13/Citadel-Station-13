diff a/code/game/objects/items/devices/radio/radio.dm b/code/game/objects/items/devices/radio/radio.dm	(rejected hunks)
@@ -17,7 +17,6 @@
 	var/broadcasting = 0
 	var/listening = 1
 	var/translate_binary = 0
-	var/translate_hive = 0
 	var/freerange = 0 // 0 - Sanitize frequencies, 1 - Full range
 	var/list/channels = list() //see communications.dm for full list. First channes is a "default" for :h
 	var/obj/item/device/encryptionkey/keyslot //To allow the radio to accept encryption keys.
@@ -54,13 +53,10 @@
 		wires.cut(WIRE_TX) // OH GOD WHY
 	secure_radio_connections = new
 	..()
-	if(SSradio)
-		initialize()
 
 /obj/item/device/radio/proc/recalculateChannels()
 	channels = list()
 	translate_binary = 0
-	translate_hive = 0
 	syndie = 0
 	centcom = 0
 
@@ -74,9 +70,6 @@
 		if(keyslot.translate_binary)
 			translate_binary = 1
 
-		if(keyslot.translate_hive)
-			translate_hive = 1
-
 		if(keyslot.syndie)
 			syndie = 1
 
@@ -100,7 +93,8 @@
 	keyslot = null
 	return ..()
 
-/obj/item/device/radio/initialize()
+/obj/item/device/radio/Initialize()
+	..()
 	frequency = sanitize_frequency(frequency, freerange)
 	set_frequency(frequency)
 
@@ -197,7 +191,7 @@
 				. = TRUE
 
 /obj/item/device/radio/talk_into(atom/movable/M, message, channel, list/spans)
-	addtimer(src,"talk_into_impl",0, TIMER_NORMAL,M,message,channel,spans)
+	INVOKE_ASYNC(src, .proc/talk_into_impl, M, message, channel, spans)
 	return ITALICS | REDUCE_RANGE
 
 /obj/item/device/radio/proc/talk_into_impl(atom/movable/M, message, channel, list/spans)
@@ -244,6 +238,12 @@
 	var/freqnum = text2num(freq) //Why should we call text2num three times when we can just do it here?
 	var/turf/position = get_turf(src)
 
+	var/jammed = FALSE
+	for(var/obj/item/device/jammer/jammer in active_jammers)
+		if(get_dist(position,get_turf(jammer)) < jammer.range)
+			jammed = TRUE
+			break
+
 	//#### Tagging the signal with all appropriate identity values ####//
 
 	// ||-- The mob's name identity --||
@@ -260,6 +260,8 @@
 
 	var/jobname // the mob's "job"
 
+	if(jammed)
+		message = Gibberish(message,100)
 
 	// --- Human: use their job as seen on the crew manifest - makes it unneeded to carry an ID for an AI to see their job
 	if(ishuman(M))
@@ -505,18 +507,18 @@
 /obj/item/device/radio/examine(mob/user)
 	..()
 	if (b_stat)
-		user << "<span class='notice'>[name] can be attached and modified.</span>"
+		to_chat(user, "<span class='notice'>[name] can be attached and modified.</span>")
 	else
-		user << "<span class='notice'>[name] can not be modified or attached.</span>"
+		to_chat(user, "<span class='notice'>[name] can not be modified or attached.</span>")
 
 /obj/item/device/radio/attackby(obj/item/weapon/W, mob/user, params)
 	add_fingerprint(user)
 	if(istype(W, /obj/item/weapon/screwdriver))
 		b_stat = !b_stat
 		if(b_stat)
-			user << "<span class='notice'>The radio can now be attached and modified!</span>"
+			to_chat(user, "<span class='notice'>The radio can now be attached and modified!</span>")
 		else
-			user << "<span class='notice'>The radio can no longer be modified or attached!</span>"
+			to_chat(user, "<span class='notice'>The radio can no longer be modified or attached!</span>")
 	else
 		return ..()
 
@@ -524,7 +526,7 @@
 	emped++ //There's been an EMP; better count it
 	var/curremp = emped //Remember which EMP this was
 	if (listening && ismob(loc))	// if the radio is turned on and on someone's person they notice
-		loc << "<span class='warning'>\The [src] overloads.</span>"
+		to_chat(loc, "<span class='warning'>\The [src] overloads.</span>")
 	broadcasting = 0
 	listening = 0
 	for (var/ch_name in channels)
@@ -547,6 +549,10 @@
 	subspace_switchable = 1
 	dog_fashion = null
 
+/obj/item/device/radio/borg/Initialize(mapload)
+	..()
+	SET_SECONDARY_FLAG(src, NO_EMP_WIRES)
+
 /obj/item/device/radio/borg/syndicate
 	syndie = 1
 	keyslot = new /obj/item/device/encryptionkey/syndicate
@@ -571,20 +577,19 @@
 					keyslot = null
 
 			recalculateChannels()
-			user << "<span class='notice'>You pop out the encryption key in the radio.</span>"
+			to_chat(user, "<span class='notice'>You pop out the encryption key in the radio.</span>")
 
 		else
-			user << "<span class='warning'>This radio doesn't have any encryption keys!</span>"
+			to_chat(user, "<span class='warning'>This radio doesn't have any encryption keys!</span>")
 
 	else if(istype(W, /obj/item/device/encryptionkey/))
 		if(keyslot)
-			user << "<span class='warning'>The radio can't hold another key!</span>"
+			to_chat(user, "<span class='warning'>The radio can't hold another key!</span>")
 			return
 
 		if(!keyslot)
-			if(!user.unEquip(W))
+			if(!user.transferItemToLoc(W, src))
 				return
-			W.loc = src
 			keyslot = W
 
 		recalculateChannels()
