diff a/code/game/objects/structures/aliens.dm b/code/game/objects/structures/aliens.dm	(rejected hunks)
@@ -69,7 +69,6 @@
 /obj/structure/alien/resin/New(location)
 	..()
 	air_update_turf(1)
-	return
 
 /obj/structure/alien/resin/Move()
 	var/turf/T = loc
@@ -122,16 +121,27 @@
 	icon_state = "weeds"
 	obj_integrity = 15
 	max_integrity = 15
-	var/obj/structure/alien/weeds/node/linked_node = null
 	canSmoothWith = list(/obj/structure/alien/weeds, /turf/closed/wall)
 	smooth = SMOOTH_MORE
+	var/last_expand = 0 //last world.time this weed expanded
+	var/growth_cooldown_low = 150
+	var/growth_cooldown_high = 200
+	var/static/list/blacklisted_turfs
 
-
-/obj/structure/alien/weeds/New(pos, node)
+/obj/structure/alien/weeds/Initialize()
 	pixel_x = -4
 	pixel_y = -4 //so the sprites line up right in the map editor
 	..()
-	if(!luminosity) //weed nodes have luminosity, but normal weeds don't!
+
+	if(!blacklisted_turfs)
+		blacklisted_turfs = typecacheof(list(
+			/turf/open/space,
+			/turf/open/chasm,
+			/turf/open/floor/plating/lava))
+
+
+	last_expand = world.time + rand(growth_cooldown_low, growth_cooldown_high)
+	if(icon == initial(icon))
 		switch(rand(1,3))
 			if(1)
 				icon = 'icons/obj/smooth_structures/alien/weeds1.dmi'
@@ -139,56 +149,55 @@
 				icon = 'icons/obj/smooth_structures/alien/weeds2.dmi'
 			if(3)
 				icon = 'icons/obj/smooth_structures/alien/weeds3.dmi'
-	linked_node = node
-	if(isspaceturf(loc))
-		qdel(src)
-		return
-	addtimer(src, "Life", rand(150, 200))
 
-/obj/structure/alien/weeds/Destroy()
-	linked_node = null
-	return ..()
-
-/obj/structure/alien/weeds/proc/Life()
-	set background = BACKGROUND_ENABLED
+/obj/structure/alien/weeds/proc/expand()
 	var/turf/U = get_turf(src)
-
-	if(isspaceturf(U))
+	if(is_type_in_typecache(U, blacklisted_turfs))
 		qdel(src)
-		return
-
-	if(!linked_node || get_dist(linked_node, src) > linked_node.node_range)
-		return
+		return FALSE
 
 	for(var/turf/T in U.GetAtmosAdjacentTurfs())
-
-		if (locate(/obj/structure/alien/weeds) in T || isspaceturf(T))
+		if(locate(/obj/structure/alien/weeds) in T)
 			continue
 
-		new /obj/structure/alien/weeds(T, linked_node)
-
-
-/obj/structure/alien/weeds/ex_act(severity, target)
-	qdel(src)
+		if(is_type_in_typecache(T, blacklisted_turfs))
+			continue
 
+		new /obj/structure/alien/weeds(T)
+	return TRUE
 
 /obj/structure/alien/weeds/temperature_expose(datum/gas_mixture/air, exposed_temperature, exposed_volume)
 	if(exposed_temperature > 300)
 		take_damage(5, BURN, 0, 0)
 
-
 //Weed nodes
 /obj/structure/alien/weeds/node
 	name = "glowing resin"
 	desc = "Blue bioluminescence shines from beneath the surface."
 	icon_state = "weednode"
-	luminosity = 1
+	light_color = LIGHT_COLOR_BLUE
+	light_power = 0.5
+	var/lon_range = 4
 	var/node_range = NODERANGE
 
-
-/obj/structure/alien/weeds/node/New()
+/obj/structure/alien/weeds/node/Initialize()
 	icon = 'icons/obj/smooth_structures/alien/weednode.dmi'
-	..(loc, src)
+	..()
+	set_light(lon_range)
+	var/obj/structure/alien/weeds/W = locate(/obj/structure/alien/weeds) in loc
+	if(W && W != src)
+		qdel(W)
+	START_PROCESSING(SSobj, src)
+
+/obj/structure/alien/weeds/node/Destroy()
+	STOP_PROCESSING(SSobj, src)
+	return ..()
+
+/obj/structure/alien/weeds/node/process()
+	for(var/obj/structure/alien/weeds/W in range(node_range, src))
+		if(W.last_expand <= world.time)
+			if(W.expand())
+				W.last_expand = world.time + rand(growth_cooldown_low, growth_cooldown_high)
 
 #undef NODERANGE
 
@@ -198,99 +207,116 @@
  */
 
 //for the status var
-#define BURST 0
-#define BURSTING 1
-#define GROWING 2
-#define GROWN 3
+#define BURST "burst"
+#define GROWING "growing"
+#define GROWN "grown"
 #define MIN_GROWTH_TIME 900	//time it takes to grow a hugger
 #define MAX_GROWTH_TIME 1500
 
 /obj/structure/alien/egg
 	name = "egg"
 	desc = "A large mottled egg."
+	var/base_icon = "egg"
 	icon_state = "egg_growing"
-	density = 0
-	anchored = 1
+	density = FALSE
+	anchored = TRUE
 	obj_integrity = 100
 	max_integrity = 100
+	integrity_failure = 5
 	var/status = GROWING	//can be GROWING, GROWN or BURST; all mutually exclusive
 	layer = MOB_LAYER
+	var/obj/item/clothing/mask/facehugger/child
 
 
-/obj/structure/alien/egg/New()
-	new /obj/item/clothing/mask/facehugger(src)
+/obj/structure/alien/egg/Initialize(mapload)
 	..()
-	addtimer(src, "Grow", rand(MIN_GROWTH_TIME, MAX_GROWTH_TIME))
+	update_icon()
+	if(status == GROWING || status == GROWN)
+		child = new(src)
+	if(status == GROWING)
+		addtimer(CALLBACK(src, .proc/Grow), rand(MIN_GROWTH_TIME, MAX_GROWTH_TIME))
+	if(status == GROWN)
+		add_to_proximity_list(src, 1)
+	if(status == BURST)
+		obj_integrity = integrity_failure
 
 /obj/structure/alien/egg/Destroy()
 	remove_from_proximity_list(src, 1)
+	. = ..()
+
+/obj/structure/alien/egg/update_icon()
 	..()
+	switch(status)
+		if(GROWING)
+			icon_state = "[base_icon]_growing"
+		if(GROWN)
+			icon_state = "[base_icon]"
+		if(BURST)
+			icon_state = "[base_icon]_hatched"
 
 /obj/structure/alien/egg/attack_paw(mob/living/user)
-	return attack_hand(user)
+	. = attack_hand(user)
 
 /obj/structure/alien/egg/attack_alien(mob/living/carbon/alien/user)
-	return attack_hand(user)
+	. = attack_hand(user)
 
 /obj/structure/alien/egg/attack_hand(mob/living/user)
 	if(user.getorgan(/obj/item/organ/alien/plasmavessel))
 		switch(status)
 			if(BURST)
-				user << "<span class='notice'>You clear the hatched egg.</span>"
+				to_chat(user, "<span class='notice'>You clear the hatched egg.</span>")
 				playsound(loc, 'sound/effects/attackblob.ogg', 100, 1)
 				qdel(src)
 				return
 			if(GROWING)
-				user << "<span class='notice'>The child is not developed yet.</span>"
+				to_chat(user, "<span class='notice'>The child is not developed yet.</span>")
 				return
 			if(GROWN)
-				user << "<span class='notice'>You retrieve the child.</span>"
-				Burst(0)
+				to_chat(user, "<span class='notice'>You retrieve the child.</span>")
+				Burst(kill=FALSE)
 				return
 	else
-		user << "<span class='notice'>It feels slimy.</span>"
+		to_chat(user, "<span class='notice'>It feels slimy.</span>")
 		user.changeNext_move(CLICK_CD_MELEE)
 
 
-/obj/structure/alien/egg/proc/GetFacehugger()
-	return locate(/obj/item/clothing/mask/facehugger) in contents
-
 /obj/structure/alien/egg/proc/Grow()
-	icon_state = "egg"
 	status = GROWN
+	update_icon()
 	add_to_proximity_list(src, 1)
 
-/obj/structure/alien/egg/proc/Burst(kill = 1)	//drops and kills the hugger if any is remaining
+//drops and kills the hugger if any is remaining
+/obj/structure/alien/egg/proc/Burst(kill = TRUE)
 	if(status == GROWN || status == GROWING)
 		remove_from_proximity_list(src, 1)
-		icon_state = "egg_hatched"
+		status = BURST
+		update_icon()
 		flick("egg_opening", src)
-		status = BURSTING
-		spawn(15)
-			status = BURST
-			var/obj/item/clothing/mask/facehugger/child = GetFacehugger()
-			if(child)
-				child.loc = get_turf(src)
-				if(kill && istype(child))
-					child.Die()
-				else
-					for(var/mob/M in range(1,src))
-						if(CanHug(M))
-							child.Attach(M)
-							break
-
-/obj/structure/alien/egg/Move()
-	remove_from_proximity_list(src, 1)
-	..()
+		addtimer(CALLBACK(src, .proc/finish_bursting, kill), 15)
+
+/obj/structure/alien/egg/proc/finish_bursting(kill = TRUE)
+	if(child)
+		child.forceMove(get_turf(src))
+		// TECHNICALLY you could put non-facehuggers in the child var
+		if(istype(child))
+			if(kill)
+				child.Die()
+			else
+				for(var/mob/M in range(1,src))
+					if(CanHug(M))
+						child.Attach(M)
+						break
 
-/obj/structure/alien/egg/deconstruct()
+/obj/structure/alien/egg/Moved(oldloc)
+	remove_from_proximity_list(oldloc, 1)
+	if(status == GROWN)
+		add_to_proximity_list(src, 1)
+	return ..()
+
+/obj/structure/alien/egg/obj_break(damage_flag)
 	if(!(flags & NODECONSTRUCT))
-		if(status != BURST && status != BURSTING)
-			Burst()
-		else if(status == BURST)
-			qdel(src)	//Remove the egg after it has been hit after bursting.
-	else
-		qdel(src)
+		if(status != BURST)
+			Burst(kill=TRUE)
 
 /obj/structure/alien/egg/temperature_expose(datum/gas_mixture/air, exposed_temperature, exposed_volume)
 	if(exposed_temperature > 500)
@@ -306,10 +332,17 @@
 		if(C.stat == CONSCIOUS && C.getorgan(/obj/item/organ/body_egg/alien_embryo))
 			return
 
-		Burst(0)
+		Burst(kill=FALSE)
+
+/obj/structure/alien/egg/grown
+	status = GROWN
+	icon_state = "egg"
+
+/obj/structure/alien/egg/burst
+	status = BURST
+	icon_state = "egg_hatched"
 
 #undef BURST
-#undef BURSTING
 #undef GROWING
 #undef GROWN
 #undef MIN_GROWTH_TIME
