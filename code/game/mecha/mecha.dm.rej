diff a/code/game/mecha/mecha.dm b/code/game/mecha/mecha.dm	(rejected hunks)
@@ -49,7 +49,6 @@
 	var/lights_power = 6
 	var/last_user_hud = 1 // used to show/hide the mecha hud while preserving previous preference
 
-
 	var/bumpsmash = 0 //Whether or not the mech destroys walls by running into it.
 	//inner atmos
 	var/use_internal_tank = 0
@@ -117,7 +116,7 @@
 
 	var/occupant_sight_flags = 0 //sight flags to give to the occupant (e.g. mech mining scanner gives meson-like vision)
 
-	hud_possible = list (DIAG_STAT_HUD, DIAG_BATT_HUD, DIAG_MECH_HUD)
+	hud_possible = list (DIAG_STAT_HUD, DIAG_BATT_HUD, DIAG_MECH_HUD, DIAG_TRACK_HUD)
 
 
 /obj/mecha/New()
@@ -142,6 +141,7 @@
 	diag_hud_set_mechhealth()
 	diag_hud_set_mechcell()
 	diag_hud_set_mechstat()
+	diag_hud_set_mechtracking()
 
 
 /obj/mecha/Destroy()
@@ -251,19 +251,19 @@
 	var/integrity = obj_integrity*100/max_integrity
 	switch(integrity)
 		if(85 to 100)
-			user << "It's fully intact."
+			to_chat(user, "It's fully intact.")
 		if(65 to 85)
-			user << "It's slightly damaged."
+			to_chat(user, "It's slightly damaged.")
 		if(45 to 65)
-			user << "It's badly damaged."
+			to_chat(user, "It's badly damaged.")
 		if(25 to 45)
-			user << "It's heavily damaged."
+			to_chat(user, "It's heavily damaged.")
 		else
-			user << "It's falling apart."
+			to_chat(user, "It's falling apart.")
 	if(equipment && equipment.len)
-		user << "It's equipped with:"
+		to_chat(user, "It's equipped with:")
 		for(var/obj/item/mecha_parts/mecha_equipment/ME in equipment)
-			user << "\icon[ME] [ME]"
+			to_chat(user, "\icon[ME] [ME]")
 
 //processing internal damage, temperature, air regulation, alert updates, lights power use.
 /obj/mecha/process()
@@ -358,8 +358,11 @@
 				occupant.throw_alert("mech damage", /obj/screen/alert/low_mech_integrity, 3)
 			else
 				occupant.clear_alert("mech damage")
-
-		if(occupant.loc != src) //something went wrong
+		var/actual_loc = occupant.loc
+		if(istype(actual_loc, /obj/item/device/mmi))
+			var/obj/item/device/mmi/M = actual_loc
+			actual_loc = M.mecha
+		if(actual_loc != src) //something went wrong
 			occupant.clear_alert("charge")
 			occupant.clear_alert("mech damage")
 			RemoveActions(occupant, human_occupant=1)
@@ -373,6 +376,7 @@
 	diag_hud_set_mechhealth()
 	diag_hud_set_mechcell()
 	diag_hud_set_mechstat()
+	diag_hud_set_mechtracking()
 
 
 /obj/mecha/proc/drop_item()//Derpfix, but may be useful in future for engineering exosuits.
@@ -462,7 +466,7 @@
 		if(istype(backup) && movement_dir && !backup.anchored)
 			if(backup.newtonian_move(turn(movement_dir, 180)))
 				if(occupant)
-					occupant << "<span class='info'>You push off of [backup] to propel yourself.</span>"
+					to_chat(occupant, "<span class='info'>You push off of [backup] to propel yourself.</span>")
 		return 1
 
 /obj/mecha/relaymove(mob/user,direction)
@@ -470,7 +474,7 @@
 		return
 	if(user != occupant) //While not "realistic", this piece is player friendly.
 		user.forceMove(get_turf(src))
-		user << "<span class='notice'>You climb out from [src].</span>"
+		to_chat(user, "<span class='notice'>You climb out from [src].</span>")
 		return 0
 	if(connected_port)
 		if(world.time - last_message > 20)
@@ -562,8 +566,10 @@
 				var/obj/O = obstacle
 				if(!O.anchored)
 					step(obstacle, dir)
-			else if(istype(obstacle, /mob))
-				step(obstacle, dir)
+			else if(ismob(obstacle))
+				var/mob/M = obstacle
+				if(!M.anchored)
+					step(obstacle, dir)
 
 
 
@@ -620,11 +626,25 @@
 	if(user.can_dominate_mechs)
 		examine(user) //Get diagnostic information!
 		for(var/obj/item/mecha_parts/mecha_tracking/B in trackers)
-			user << "<span class='danger'>Warning: Tracking Beacon detected. Enter at your own risk. Beacon Data:"
-			user << "[B.get_mecha_info()]"
+			to_chat(user, "<span class='danger'>Warning: Tracking Beacon detected. Enter at your own risk. Beacon Data:")
+			to_chat(user, "[B.get_mecha_info()]")
 			break
 		//Nothing like a big, red link to make the player feel powerful!
-		user << "<a href='?src=\ref[user];ai_take_control=\ref[src]'><span class='userdanger'>ASSUME DIRECT CONTROL?</span></a><br>"
+		to_chat(user, "<a href='?src=\ref[user];ai_take_control=\ref[src]'><span class='userdanger'>ASSUME DIRECT CONTROL?</span></a><br>")
+	else
+		examine(user)
+		if(occupant)
+			to_chat(user, "<span class='warning'>This exosuit has a pilot and cannot be controlled.</span>")
+			return
+		var/can_control_mech = 0
+		for(var/obj/item/mecha_parts/mecha_tracking/ai_control/A in trackers)
+			can_control_mech = 1
+			to_chat(user, "<span class='notice'>\icon[src] Status of [name]:</span>\n[A.get_mecha_info()]")
+			break
+		if(!can_control_mech)
+			to_chat(user, "<span class='warning'>You cannot control exosuits without AI control beacons installed.</span>")
+			return
+		to_chat(user, "<a href='?src=\ref[user];ai_take_control=\ref[src]'><span class='boldnotice'>Take control of exosuit?</span></a><br>")
 
 /obj/mecha/transfer_ai(interaction, mob/user, mob/living/silicon/ai/AI, obj/item/device/aicard/card)
 	if(!..())
@@ -634,11 +654,11 @@
 	switch(interaction)
 		if(AI_TRANS_TO_CARD) //Upload AI from mech to AI card.
 			if(!state) //Mech must be in maint mode to allow carding.
-				user << "<span class='warning'>[name] must have maintenance protocols active in order to allow a transfer.</span>"
+				to_chat(user, "<span class='warning'>[name] must have maintenance protocols active in order to allow a transfer.</span>")
 				return
 			AI = occupant
 			if(!AI || !isAI(occupant)) //Mech does not have an AI for a pilot
-				user << "<span class='warning'>No AI detected in the [name] onboard computer.</span>"
+				to_chat(user, "<span class='warning'>No AI detected in the [name] onboard computer.</span>")
 				return
 			AI.ai_restore_power()//So the AI initially has power.
 			AI.control_disabled = 1
@@ -649,31 +669,32 @@
 			AI.controlled_mech = null
 			AI.remote_control = null
 			icon_state = initial(icon_state)+"-open"
-			AI << "You have been downloaded to a mobile storage device. Wireless connection offline."
-			user << "<span class='boldnotice'>Transfer successful</span>: [AI.name] ([rand(1000,9999)].exe) removed from [name] and stored within local memory."
-
-		if(AI_MECH_HACK) //Called by Malf AI mob on the mech.
-			new /obj/structure/AIcore/deactivated(AI.loc)
-			if(occupant) //Oh, I am sorry, were you using that?
-				AI << "<span class='warning'>Pilot detected! Forced ejection initiated!"
-				occupant << "<span class='danger'>You have been forcibly ejected!</span>"
-				go_out(1) //IT IS MINE, NOW. SUCK IT, RD!
+			to_chat(AI, "You have been downloaded to a mobile storage device. Wireless connection offline.")
+			to_chat(user, "<span class='boldnotice'>Transfer successful</span>: [AI.name] ([rand(1000,9999)].exe) removed from [name] and stored within local memory.")
+
+		if(AI_MECH_HACK) //Called by AIs on the mech
+			AI.linked_core = new /obj/structure/AIcore/deactivated(AI.loc)
+			if(AI.can_dominate_mechs)
+				if(occupant) //Oh, I am sorry, were you using that?
+					to_chat(AI, "<span class='warning'>Pilot detected! Forced ejection initiated!")
+					to_chat(occupant, "<span class='danger'>You have been forcibly ejected!</span>")
+					go_out(1) //IT IS MINE, NOW. SUCK IT, RD!
 			ai_enter_mech(AI, interaction)
 
 		if(AI_TRANS_FROM_CARD) //Using an AI card to upload to a mech.
 			AI = card.AI
 			if(!AI)
-				user << "<span class='warning'>There is no AI currently installed on this device.</span>"
+				to_chat(user, "<span class='warning'>There is no AI currently installed on this device.</span>")
 				return
 			else if(AI.stat || !AI.client)
-				user << "<span class='warning'>[AI.name] is currently unresponsive, and cannot be uploaded.</span>"
+				to_chat(user, "<span class='warning'>[AI.name] is currently unresponsive, and cannot be uploaded.</span>")
 				return
 			else if(occupant || dna_lock) //Normal AIs cannot steal mechs!
-				user << "<span class='warning'>Access denied. [name] is [occupant ? "currently occupied" : "secured with a DNA lock"]."
+				to_chat(user, "<span class='warning'>Access denied. [name] is [occupant ? "currently occupied" : "secured with a DNA lock"].")
 				return
 			AI.control_disabled = 0
 			AI.radio_enabled = 1
-			user << "<span class='boldnotice'>Transfer successful</span>: [AI.name] ([rand(1000,9999)].exe) installed and executed successfully. Local copy has been removed."
+			to_chat(user, "<span class='boldnotice'>Transfer successful</span>: [AI.name] ([rand(1000,9999)].exe) installed and executed successfully. Local copy has been removed.")
 			card.AI = null
 			ai_enter_mech(AI, interaction)
 
@@ -691,10 +712,10 @@
 	AI.remote_control = src
 	AI.canmove = 1 //Much easier than adding AI checks! Be sure to set this back to 0 if you decide to allow an AI to leave a mech somehow.
 	AI.can_shunt = 0 //ONE AI ENTERS. NO AI LEAVES.
-	AI << "[interaction == AI_MECH_HACK ? "<span class='announce'>Takeover of [name] complete! You are now loaded onto the onboard computer. Do not attempt to leave the station sector!</span>" \
-	: "<span class='notice'>You have been uploaded to a mech's onboard computer."]"
-	AI << "<span class='reallybig boldnotice'>Use Middle-Mouse to activate mech functions and equipment. Click normally for AI interactions.</span>"
-	GrantActions(AI)
+	to_chat(AI, "[AI.can_dominate_mechs ? "<span class='announce'>Takeover of [name] complete! You are now loaded onto the onboard computer. Do not attempt to leave the station sector!</span>" \
+	: "<span class='notice'>You have been uploaded to a mech's onboard computer."]")
+	to_chat(AI, "<span class='reallybig boldnotice'>Use Middle-Mouse to activate mech functions and equipment. Click normally for AI interactions.</span>")
+	GrantActions(AI, !AI.can_dominate_mechs)
 
 
 //An actual AI (simple_animal mecha pilot) entering the mech
@@ -783,7 +804,7 @@
 		return
 	log_message("[user] tries to move in.")
 	if (occupant)
-		usr << "<span class='warning'>The [name] is already occupied!</span>"
+		to_chat(usr, "<span class='warning'>The [name] is already occupied!</span>")
 		log_append_to_last("Permission denied.")
 		return
 	var/passed
@@ -795,32 +816,32 @@
 	else if(operation_allowed(user))
 		passed = 1
 	if(!passed)
-		user << "<span class='warning'>Access denied.</span>"
+		to_chat(user, "<span class='warning'>Access denied.</span>")
 		log_append_to_last("Permission denied.")
 		return
 	if(user.buckled)
-		user << "<span class='warning'>You are currently buckled and cannot move.</span>"
+		to_chat(user, "<span class='warning'>You are currently buckled and cannot move.</span>")
 		log_append_to_last("Permission denied.")
 		return
 	if(user.has_buckled_mobs()) //mob attached to us
-		user << "<span class='warning'>You can't enter the exosuit with other creatures attached to you!</span>"
+		to_chat(user, "<span class='warning'>You can't enter the exosuit with other creatures attached to you!</span>")
 		return
 
 	visible_message("[user] starts to climb into [name].")
 
 	if(do_after(user, 40, target = src))
 		if(obj_integrity <= 0)
-			user << "<span class='warning'>You cannot get in the [name], it has been destroyed!</span>"
+			to_chat(user, "<span class='warning'>You cannot get in the [name], it has been destroyed!</span>")
 		else if(occupant)
-			user << "<span class='danger'>[occupant] was faster! Try better next time, loser.</span>"
+			to_chat(user, "<span class='danger'>[occupant] was faster! Try better next time, loser.</span>")
 		else if(user.buckled)
-			user << "<span class='warning'>You can't enter the exosuit while buckled.</span>"
+			to_chat(user, "<span class='warning'>You can't enter the exosuit while buckled.</span>")
 		else if(user.has_buckled_mobs())
-			user << "<span class='warning'>You can't enter the exosuit with other creatures attached to you!</span>"
+			to_chat(user, "<span class='warning'>You can't enter the exosuit with other creatures attached to you!</span>")
 		else
 			moved_inside(user)
 	else
-		user << "<span class='warning'>You stop entering the exosuit!</span>"
+		to_chat(user, "<span class='warning'>You stop entering the exosuit!</span>")
 	return
 
 /obj/mecha/proc/moved_inside(mob/living/carbon/human/H)
@@ -840,58 +861,58 @@
 	else
 		return 0
 
-/obj/mecha/proc/mmi_move_inside(obj/item/device/mmi/mmi_as_oc,mob/user)
+/obj/mecha/proc/mmi_move_inside(obj/item/device/mmi/mmi_as_oc, mob/user)
 	if(!mmi_as_oc.brainmob || !mmi_as_oc.brainmob.client)
-		user << "<span class='warning'>Consciousness matrix not detected!</span>"
-		return 0
+		to_chat(user, "<span class='warning'>Consciousness matrix not detected!</span>")
+		return FALSE
 	else if(mmi_as_oc.brainmob.stat)
-		user << "<span class='warning'>Beta-rhythm below acceptable level!</span>"
-		return 0
+		to_chat(user, "<span class='warning'>Beta-rhythm below acceptable level!</span>")
+		return FALSE
 	else if(occupant)
-		user << "<span class='warning'>Occupant detected!</span>"
-		return 0
-	else if(dna_lock && (!mmi_as_oc.brainmob.stored_dna || dna_lock!=mmi_as_oc.brainmob.stored_dna.unique_enzymes))
-		user << "<span class='warning'>Access denied. [name] is secured with a DNA lock.</span>"
-		return 0
+		to_chat(user, "<span class='warning'>Occupant detected!</span>")
+		return FALSE
+	else if(dna_lock && (!mmi_as_oc.brainmob.stored_dna || (dna_lock != mmi_as_oc.brainmob.stored_dna.unique_enzymes)))
+		to_chat(user, "<span class='warning'>Access denied. [name] is secured with a DNA lock.</span>")
+		return FALSE
 
 	visible_message("<span class='notice'>[user] starts to insert an MMI into [name].</span>")
 
 	if(do_after(user, 40, target = src))
 		if(!occupant)
-			return mmi_moved_inside(mmi_as_oc,user)
+			return mmi_moved_inside(mmi_as_oc, user)
 		else
-			user << "<span class='warning'>Occupant detected!</span>"
+			to_chat(user, "<span class='warning'>Occupant detected!</span>")
 	else
-		user << "<span class='notice'>You stop inserting the MMI.</span>"
-	return 0
+		to_chat(user, "<span class='notice'>You stop inserting the MMI.</span>")
+	return FALSE
 
-/obj/mecha/proc/mmi_moved_inside(obj/item/device/mmi/mmi_as_oc,mob/user)
-	if(mmi_as_oc && user in range(1))
-		if(!mmi_as_oc.brainmob || !mmi_as_oc.brainmob.client)
-			user << "<span class='notice'>Consciousness matrix not detected!</span>"
-			return 0
-		else if(mmi_as_oc.brainmob.stat)
-			user << "<span class='warning'>Beta-rhythm below acceptable level!</span>"
-			return 0
-		if(!user.unEquip(mmi_as_oc))
-			user << "<span class='warning'>\the [mmi_as_oc] is stuck to your hand, you cannot put it in \the [src]!</span>"
-			return
-		var/mob/brainmob = mmi_as_oc.brainmob
-		occupant = brainmob
-		brainmob.loc = src //should allow relaymove
-		brainmob.reset_perspective(src)
-		brainmob.canmove = 1
-		mmi_as_oc.loc = src
-		mmi_as_oc.mecha = src
-		icon_state = initial(icon_state)
-		setDir(dir_in)
-		log_message("[mmi_as_oc] moved in as pilot.")
-		if(!internal_damage)
-			occupant << sound('sound/mecha/nominal.ogg',volume=50)
-		GrantActions(brainmob)
-		return 1
-	else
-		return 0
+/obj/mecha/proc/mmi_moved_inside(obj/item/device/mmi/mmi_as_oc, mob/user)
+	if(!(Adjacent(mmi_as_oc) && Adjacent(user)))
+		return FALSE
+	if(!mmi_as_oc.brainmob || !mmi_as_oc.brainmob.client)
+		to_chat(user, "<span class='notice'>Consciousness matrix not detected!</span>")
+		return FALSE
+	else if(mmi_as_oc.brainmob.stat)
+		to_chat(user, "<span class='warning'>Beta-rhythm below acceptable level!</span>")
+		return FALSE
+	if(!user.transferItemToLoc(mmi_as_oc, src))
+		to_chat(user, "<span class='warning'>\the [mmi_as_oc] is stuck to your hand, you cannot put it in \the [src]!</span>")
+		return FALSE
+	var/mob/brainmob = mmi_as_oc.brainmob
+	mmi_as_oc.mecha = src
+	occupant = brainmob
+	brainmob.forceMove(src) //should allow relaymove
+	brainmob.reset_perspective(src)
+	brainmob.remote_control = src
+	brainmob.update_canmove()
+	icon_state = initial(icon_state)
+	update_icon()
+	setDir(dir_in)
+	log_message("[mmi_as_oc] moved in as pilot.")
+	if(!internal_damage)
+		occupant << sound('sound/mecha/nominal.ogg',volume=50)
+	GrantActions(brainmob)
+	return TRUE
 
 /obj/mecha/container_resist(mob/living/user)
 	go_out()
@@ -914,11 +935,25 @@
 		var/mob/living/brain/brain = occupant
 		RemoveActions(brain)
 		mob_container = brain.container
-	else if(isAI(occupant) && forced) //This should only happen if there are multiple AIs in a round, and at least one is Malf.
-		RemoveActions(occupant)
-		occupant.gib()  //If one Malf decides to steal a mech from another AI (even other Malfs!), they are destroyed, as they have nowhere to go when replaced.
-		occupant = null
-		return
+	else if(isAI(occupant))
+		var/mob/living/silicon/ai/AI = occupant
+		if(forced)//This should only happen if there are multiple AIs in a round, and at least one is Malf.
+			RemoveActions(occupant)
+			occupant.gib()  //If one Malf decides to steal a mech from another AI (even other Malfs!), they are destroyed, as they have nowhere to go when replaced.
+			occupant = null
+			return
+		else
+			if(!AI.linked_core)
+				to_chat(AI, "<span class='userdanger'>Inactive core destroyed. Unable to return.</span>")
+				AI.linked_core = null
+				return
+			to_chat(AI, "<span class='notice'>Returning to core...</span>")
+			AI.controlled_mech = null
+			AI.remote_control = null
+			RemoveActions(occupant, 1)
+			mob_container = AI
+			newloc = get_turf(AI.linked_core)
+			qdel(AI.linked_core)
 	else
 		return
 	var/mob/living/L = occupant
@@ -939,7 +974,7 @@
 		setDir(dir_in)
 
 	if(L && L.client)
-		L.client.view = world.view
+		L.client.change_view(world.view)
 		zoom_mode = 0
 
 /////////////////////////
@@ -965,7 +1000,7 @@
 /obj/mecha/proc/occupant_message(message as text)
 	if(message)
 		if(occupant && occupant.client)
-			occupant << "\icon[src] [message]"
+			to_chat(occupant, "\icon[src] [message]")
 	return
 
 /obj/mecha/proc/log_message(message as text,red=null)
