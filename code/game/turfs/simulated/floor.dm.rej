diff a/code/game/turfs/simulated/floor.dm b/code/game/turfs/simulated/floor.dm	(rejected hunks)
@@ -33,7 +33,7 @@ var/list/icons_to_ignore_at_floor_init = list("damaged1","damaged2","damaged3","
 	var/list/broken_states
 	var/list/burnt_states
 
-/turf/open/floor/New()
+/turf/open/floor/Initialize(mapload)
 	if (!broken_states)
 		broken_states = list("damaged1", "damaged2", "damaged3", "damaged4", "damaged5")
 	if (!burnt_states)
@@ -43,6 +43,8 @@ var/list/icons_to_ignore_at_floor_init = list("damaged1","damaged2","damaged3","
 		icon_regular_floor = "floor"
 	else
 		icon_regular_floor = icon_state
+	if(mapload)
+		MakeDirty()
 
 /turf/open/floor/ex_act(severity, target)
 	var/shielded = is_shielded()
@@ -135,37 +137,53 @@ var/list/icons_to_ignore_at_floor_init = list("damaged1","damaged2","damaged3","
 	if(..())
 		return 1
 	if(intact && istype(C, /obj/item/weapon/crowbar))
-		if(broken || burnt)
-			broken = 0
-			burnt = 0
-			user << "<span class='danger'>You remove the broken plating.</span>"
-		else
-			if(istype(src, /turf/open/floor/wood))
-				user << "<span class='danger'>You forcefully pry off the planks, destroying them in the process.</span>"
-			else
-				user << "<span class='danger'>You remove the floor tile.</span>"
-				if(floor_tile)
-					PoolOrNew(floor_tile, src)
-		make_plating()
-		playsound(src, C.usesound, 80, 1)
+		pry_tile(C, user)
 		return 1
+	if(intact && istype(C, /obj/item/stack/tile))
+		var/obj/item/stack/tile/T = C
+		if(T.turf_type == type)
+			return
+		var/obj/item/weapon/crowbar/CB = user.is_holding_item_of_type(/obj/item/weapon/crowbar)
+		if(!CB)
+			return
+		var/turf/open/floor/plating/P = pry_tile(CB, user, TRUE)
+		if(!istype(P))
+			return
+		P.attackby(T, user, params)
 	return 0
 
+/turf/open/floor/proc/pry_tile(obj/item/C, mob/user, silent = FALSE)
+	playsound(src, C.usesound, 80, 1)
+	return remove_tile(user, silent)
+
+/turf/open/floor/proc/remove_tile(mob/user, silent = FALSE, make_tile = TRUE)
+	if(broken || burnt)
+		broken = 0
+		burnt = 0
+		if(user && !silent)
+			to_chat(user, "<span class='danger'>You remove the broken plating.</span>")
+	else
+		if(user && !silent)
+			to_chat(user, "<span class='danger'>You remove the floor tile.</span>")
+		if(floor_tile && make_tile)
+			new floor_tile(src)
+	return make_plating()
+
 /turf/open/floor/singularity_pull(S, current_size)
 	if(current_size == STAGE_THREE)
 		if(prob(30))
 			if(floor_tile)
-				PoolOrNew(floor_tile, src)
+				new floor_tile(src)
 				make_plating()
 	else if(current_size == STAGE_FOUR)
 		if(prob(50))
 			if(floor_tile)
-				PoolOrNew(floor_tile, src)
+				new floor_tile(src)
 				make_plating()
 	else if(current_size >= STAGE_FIVE)
 		if(floor_tile)
 			if(prob(70))
-				PoolOrNew(floor_tile, src)
+				new floor_tile(src)
 				make_plating()
 		else if(prob(50))
 			ReplaceWithLattice()
@@ -174,14 +192,61 @@ var/list/icons_to_ignore_at_floor_init = list("damaged1","damaged2","damaged3","
 	if(prob(20))
 		ChangeTurf(/turf/open/floor/engine/cult)
 
-/turf/open/floor/ratvar_act(force)
+/turf/open/floor/ratvar_act(force, ignore_mobs)
 	. = ..()
 	if(.)
 		ChangeTurf(/turf/open/floor/clockwork)
 
-/turf/open/floor/initialize()
-	..()
-	MakeDirty()
-
 /turf/open/floor/acid_melt()
 	ChangeTurf(baseturf)
+
+/turf/open/floor/rcd_vals(mob/user, obj/item/weapon/rcd/the_rcd)
+	switch(the_rcd.mode)
+		if(RCD_FLOORWALL)
+			return list("mode" = RCD_FLOORWALL, "delay" = 20, "cost" = 16)
+		if(RCD_AIRLOCK)
+			return list("mode" = RCD_AIRLOCK, "delay" = 50, "cost" = 16)
+		if(RCD_DECONSTRUCT)
+			return list("mode" = RCD_DECONSTRUCT, "delay" = 50, "cost" = 33)
+		if(RCD_WINDOWGRILLE)
+			return list("mode" = RCD_WINDOWGRILLE, "delay" = 40, "cost" = 4)
+	return FALSE
+
+/turf/open/floor/rcd_act(mob/user, obj/item/weapon/rcd/the_rcd, passed_mode)
+	switch(passed_mode)
+		if(RCD_FLOORWALL)
+			to_chat(user, "<span class='notice'>You build a wall.</span>")
+			ChangeTurf(/turf/closed/wall)
+			return TRUE
+		if(RCD_AIRLOCK)
+			if(locate(/obj/machinery/door/airlock) in src)
+				return FALSE
+			to_chat(user, "<span class='notice'>You build an airlock.</span>")
+			var/obj/machinery/door/airlock/A = new the_rcd.airlock_type(src)
+
+			A.electronics = new/obj/item/weapon/electronics/airlock(A)
+
+			if(the_rcd.conf_access)
+				A.electronics.accesses = the_rcd.conf_access.Copy()
+			A.electronics.one_access = the_rcd.use_one_access
+
+			if(A.electronics.one_access)
+				A.req_one_access = A.electronics.accesses
+			else
+				A.req_access = A.electronics.accesses
+			A.autoclose = TRUE
+			return TRUE
+		if(RCD_DECONSTRUCT)
+			if(istype(src, baseturf))
+				return FALSE
+			to_chat(user, "<span class='notice'>You deconstruct [src].</span>")
+			ChangeTurf(baseturf)
+			return TRUE
+		if(RCD_WINDOWGRILLE)
+			if(locate(/obj/structure/grille) in src)
+				return FALSE
+			to_chat(user, "<span class='notice'>You construct the grille.</span>")
+			var/obj/structure/grille/G = new(src)
+			G.anchored = TRUE
+			return TRUE
+	return FALSE
