diff a/code/__HELPERS/_logging.dm b/code/__HELPERS/_logging.dm	(rejected hunks)
@@ -1,17 +1,20 @@
 //print a warning message to world.log
 #define WARNING(MSG) warning("[MSG] in [__FILE__] at line [__LINE__] src: [src] usr: [usr].")
 /proc/warning(msg)
-	world.log << "## WARNING: [msg]"
+	msg = "## WARNING: [msg]"
+	log_world(msg)
 
 //not an error or a warning, but worth to mention on the world log, just in case.
 #define NOTICE(MSG) notice(MSG)
 /proc/notice(msg)
-	world.log << "## NOTICE: [msg]"
+	msg = "## NOTICE: [msg]"
+	log_world(msg)
 
-//print a testing-mode debug message to world.log
-/proc/testing(msg)
+//print a testing-mode debug message to world.log and world
 #ifdef TESTING
-	world.log << "## TESTING: [msg]"
+#define testing(msg) log_world("## TESTING: [msg]"); to_chat(world, "## TESTING: [msg]")
+#else
+#define testing(msg)
 #endif
 
 /proc/log_admin(text)
@@ -19,9 +22,15 @@
 	if (config.log_admin)
 		diary << "\[[time_stamp()]]ADMIN: [text]"
 
+//Items using this proc are stripped from public logs - use with caution
+/proc/log_admin_private(text)
+	admin_log.Add(text)
+	if (config.log_admin)
+		diary << "\[[time_stamp()]]ADMINPRIVATE: [text]"
+
 /proc/log_adminsay(text)
 	if (config.log_adminchat)
-		log_admin("ASAY: [text]")
+		log_admin_private("ASAY: [text]")
 
 /proc/log_dsay(text)
 	if (config.log_adminchat)
@@ -78,4 +87,35 @@
 
 /proc/log_chat(text)
 	if (config.log_pda)
-		diary << "\[[time_stamp()]]CHAT: [text]"
\ No newline at end of file
+		diary << "\[[time_stamp()]]CHAT: [text]"
+
+/proc/log_sql(text)
+	if(config.sql_enabled)
+		diary << "\[[time_stamp()]]SQL: [text]"
+
+//This replaces world.log so it displays both in DD and the file
+/proc/log_world(text)
+	if(config && config.log_runtimes)
+		world.log = runtime_diary
+		world.log << text
+	world.log = null
+	world.log << text
+
+// Helper procs for building detailed log lines
+
+/proc/datum_info_line(datum/D)
+	if(!istype(D))
+		return
+	if(!istype(D, /mob))
+		return "[D] ([D.type])"
+	var/mob/M = D
+	return "[M] ([M.ckey]) ([M.type])"
+
+/proc/atom_loc_line(atom/A)
+	if(!istype(A))
+		return
+	var/turf/T = get_turf(A)
+	if(istype(T))
+		return "[A.loc] [COORD(T)] ([A.loc.type])"
+	else if(A.loc)
+		return "[A.loc] (0, 0, 0) ([A.loc.type])"
